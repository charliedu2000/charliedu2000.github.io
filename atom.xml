<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>愚人而已</title>
  
  <subtitle>以愚者之名攀上顶峰</subtitle>
  <link href="https://afool.top/atom.xml" rel="self"/>
  
  <link href="https://afool.top/"/>
  <updated>2022-06-21T01:26:14.701Z</updated>
  <id>https://afool.top/</id>
  
  <author>
    <name>零歌</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>真实轰然崩塌——冈岛二人《克莱因壶》</title>
    <link href="https://afool.top/post/klein-no-tsubo-by-futari-okajima/"/>
    <id>https://afool.top/post/klein-no-tsubo-by-futari-okajima/</id>
    <published>2022-06-20T23:39:55.000Z</published>
    <updated>2022-06-21T01:26:14.701Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><img src="https://s2.loli.net/2022/06/21/S24u6PzL1iKlt7x.jpg" alt="klein-no-tsubo-by-futari-okajima" loading="lazy"></p><p>《克莱因壶》</p><p>（日）冈岛二人 著</p><p>张舟 译</p><p>化学工业出版社</p></blockquote><p><strong>个人强烈推荐</strong></p><h2 id="跃入克莱因之壶，“真实”的界限轰然崩塌"><a href="#跃入克莱因之壶，“真实”的界限轰然崩塌" class="headerlink" title="跃入克莱因之壶，“真实”的界限轰然崩塌"></a>跃入克莱因之壶，“真实”的界限轰然崩塌</h2><details><summary>剧透警告</summary><p>上世纪九十年代。</p><p>故事的开头是一份契约书，伊普西隆研发公司买下了主人公，也就是“我”，上杉彰彦的游戏书《脑部症候群》，作为他们新游戏的原作。“我”正在逃亡，原因似乎正是这份契约书。</p><p>究竟是怎么回事呢，这就要从“我”与“克莱因之壶”的初次接触开始讲起了。</p><p>伊普西隆的新游戏绝非那种常见的电子游戏，它将颠覆所有人对游戏的认知。“我”在研发人员百濑伸夫的陪同下尝试了伊普西隆游戏装置的试做品 K1（KLIEN 1），它看起来像是手套，但是可以完美模拟任何感觉。等待了一年半之后，百濑伸夫似乎完成了工作离开了这里，而这套装置已经发展成能够容纳整个人的躯体、把人完全置于虚拟世界之中的容器 K2。</p><p>“我”作为游戏的原作者，受邀与少女梨纱一同担任游戏测试员。梨纱还是个学生，面容姣好，楚楚动人，一出现就吸引了“我”的目光。她对这款即将颠覆时代的游戏好奇万分，也对写出了原作游戏书的“我”崇拜不已。在测试过程中，两个人被 K2 带来的极度真实的游戏体验所震撼，但由于需要保密，他们只能在两人之间交流感想，不能将任何信息透露出去。于是，两人在某种程度上成了亲密的伙伴，两颗心之间的距离渐渐缩短。</p><p>其实 K2 的模拟也并不是十全十美，在游戏过程中，“我”常常遇到眼前一黑、身体不受控制地下沉的情况，这时候总是有个男人的声音说着“回去”、“不可再继续下去”。这样的意外又一次出现，“我”不得不中断游戏。这时，伊普西隆的人突然告知“我”自己的家人出了车祸，需要马上赶往医院。“我”丢下仍在游戏中的梨纱急忙冲向医院，然而医院并没有接收到出车祸的急诊病人，“我”的家人安然无恙。</p><p>七美，一个自称是梨纱好友的女孩突然找上门来，她说梨纱已经失踪多日。公司的人也毫无征兆地告诉“我”梨纱辞职了。在寻找梨纱的过程中，“我”和七美都开始怀疑对方在说谎，因为两人的记忆完全对不上。“我”开始发现自己最近的经历变得匪夷所思：本该存在的东西消失不见，第二天却又原封不动地出现在自己身上；明明记得自己去了很多地方，在那些地方等待的七美却说“我”根本没有出现。</p><p>“我”和七美开始对行事谨慎的伊普西隆产生怀疑，对那个能够以假乱真的“克莱因壶”产生怀疑。这种装置真的只是游戏机吗？它给人的感觉是那样逼真，在游戏里能“感觉快要死了”，如果它能够超越单纯的“感觉”……“我”又想起了那个男人警告：“趁现在还可以控制，快逃吧。”那是百濑伸夫的声音。</p><p>梨纱是不是在 K2 里面遭遇了什么？“我”的记忆又是怎么回事？调查的线索全都指向了“克莱因壶”，既然它能够完美模拟现实，那么给“我”一个伪造的场景来混淆记忆应该也是轻而易举吧？</p><p>于是“我”假装自己生病，没有去测试游戏，实际上偷偷潜入了伊普西隆费尽心机隐藏的研究所，发现了项目的档案，发现了伊普西隆对“我”的调查，发现了“我”被骗到医院那天梨纱的遭遇——她的死状。在离开研究所的途中，“我”吸入了伊普西隆施放的毒气，失去意识……</p><p>醒来后，“我”发现梨纱没有失踪，“我们”就在研究所。“我”刚刚完成一场游戏，险些直接通关。伊普西隆的人说他们安排了惊喜，将游戏的舞台换成了现实的翻版，“我”在游戏里度过了六天，但实际上游戏只进行了一个小时。</p><p>从“我”被告知家人出车祸开始就已经全是游戏了，在那之后的内容并不是真实的，后来出现的七美等人也并不存在。</p><p>测试结束后，“我”被梨绘邀请到她的公寓，两人一起用餐，一起看电影。相拥，亲吻……</p><p>是这样吗？</p><p>“快回去。”</p><p>“趁现在还可以控制，快逃吧。”</p><p>是百濑的声音。</p><p>第二天，“我”离开了梨纱。</p><p>说来也是，究竟哪边才是真实的呢？此刻“我”究竟是在“壶内”还是在“壶外”呢？“我”是又被扔进了克莱因壶、被灌输着模拟的感受，还是被克莱因壶制造的幻影纠缠、难以自拔？</p><p>与克莱因壶接触的那一瞬，“我”就已经被吸入壶内。这壶的内外，或许本就没有什么区别。</p><p>要找到答案也不是没有办法，用生命去验证就好了。如果身在壶内，应该会游戏结束。如果身在壶外——</p></details><h2 id="清晨，我麻木的大脑"><a href="#清晨，我麻木的大脑" class="headerlink" title="清晨，我麻木的大脑"></a>清晨，我麻木的大脑</h2><h3 id="极致的阅读快感"><a href="#极致的阅读快感" class="headerlink" title="极致的阅读快感"></a>极致的阅读快感</h3><p>写得好啊，冈岛二人。我好久没有为了看小说而熬夜了，但是这本《克莱因壶》向我证明了它值得我熬。</p><p>我上面的总结<del>剧透</del>远远不能概括这部作品的魅力。作为一部科幻小说，《克莱因壶》的题材显然是领先于时代的。这本书首次出版应该是在 1989 年，那个时候“虚拟现实”这个概念可远远比不上今天这么火爆，大概是在九十年代后期，像《黑客帝国》这样的作品的出现才带起了一波热潮。当然现在大家已经把这个元素玩出花了，VR 元素有《头号玩家》、《刀剑神域》等，谈到混淆虚拟与现实的话《盗梦空间》之类的作品也算有异曲同工之妙。冈岛二人能够写出这样的题材、达到这样的高度，令人叹为观止。</p><p>作为一部推理小说，《克莱因壶》几乎把“精彩”二字揉进了书中的每一个角落。说实话，要猜测情节的大致走向不算太难，毕竟今天的读者对这种主人公受虚拟世界影响感觉虚实难辨的故事已经有点司空见惯了。但是，冈岛二人的高明之处在于将情节的矛盾冲突安排得恰到好处，主人公在游戏中一开始遇到程序异常，这没有什么（程序员都知道这是常态了，你说是吧），但是随着情节的发展，这个不怎么意外的异常成为了主人公对自己的经历产生怀疑的主要原因之一。“第一幕出现的枪，第三幕一定要响”。本作的各种伏笔细节也十分到位，悬念解开的一刹，即使已经多多少少猜到了故事的走向，我还是被震得头皮发麻。那种揭露真相的快感还有思考“壶内壶外”之后的心有余悸是这部作品送给我的终极大礼。</p><h3 id="对着梨纱幻想爱情"><a href="#对着梨纱幻想爱情" class="headerlink" title="对着梨纱幻想爱情"></a>对着梨纱幻想爱情</h3><p>有点不好意思，在读的过程中，我的脑子里还一直有个声音疯狂叫喊：梨纱卡哇伊！（我还老是想把她叫成梨绘，不知道为什么。）梨纱一出场就是直接的外貌描写，直接把“娇柔可爱”、“身材好”和“青春活泼”等标签扔到了我的脸上，各种不经意间的小动作，就差把“会和男主角暗生情愫”这句话直接写进设定了。我一个死宅哪见过这种场面，只好一边跟着故事情节坐过山车一边想着“嘿嘿，梨纱，我的梨纱……”或者“呜呜，梨纱，我的梨纱……”</p><h3 id="真实与虚幻，世界的真身"><a href="#真实与虚幻，世界的真身" class="headerlink" title="真实与虚幻，世界的真身"></a>真实与虚幻，世界的真身</h3><p><del>一小段梦话，没水平。</del></p><p>读完这样的作品，总是不由得思考人生。倒也没什么成果，就是没有摆脱中二的胡思乱想罢了。</p><p>如果真有机器能够完美模拟所有的感官，那它模拟出的和人感受到的真实有什么差别？答案可能是没有差别。我们对世界的认知取决于我们看待世界的方式。那么世界、物质这些东西到底有没有自己的准确形态呢？我认为有。但是我们还是要通过一定的方式去感知它们的存在形式和规律，所以我们认识到的形态其实还是与我们采取的认知方式有关。如果“感觉到一模一样”，那么对我们来说，它们应该就是一样。</p><p>只能说幸好技术还没有那么发达，不然我可能也要整日怀疑自己是不是个“缸中之脑”了。</p><h2 id="余谈——传奇般的二人"><a href="#余谈——传奇般的二人" class="headerlink" title="余谈——传奇般的二人"></a>余谈——传奇般的二人</h2><p>开始读正文之前，我的内心历程：</p><ul><li>（看封面）冈岛二人？这名字有点意思……“二”人有什么含义吗……</li><li>（开始读导读）原来“二人”就是字面意义上的二人！冈岛二人（Okajima Futari）发音近似“两个怪人”（Okashina Futari）啊……</li><li>“社会人”德山从生活中发现灵感、设想背景、线索和对话等，“宅男”井上负责大纲和整个故事主体，两人各自的习惯阅历等等成就了这个组合。</li><li>分开后果然是井上好作品更多啊……不过德山能继续在其他地方设计谜题也算是发挥了长处吧……</li><li>绑架的冈岛……嗯……皆杀的田中（无端）？</li><li>爱写赛马……我又无端想到东野圭吾爱写滑雪……</li><li>《然后，门被关上了》，记下，有机会找来看一看。</li><li>写作题材很丰富啊，两个人的合作优势明显。</li><li>（看到书衣上的译者简介）嗯？译者也是两人的写作组合？</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/06/21/S24u6PzL1iKlt7x.jpg&quot; alt=&quot;klein-no-tsubo-by-futari-okajima&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="读点什么" scheme="https://afool.top/categories/%E8%AF%BB%E7%82%B9%E4%BB%80%E4%B9%88/"/>
    
    
    <category term="小说" scheme="https://afool.top/tags/%E5%B0%8F%E8%AF%B4/"/>
    
    <category term="读后感" scheme="https://afool.top/tags/%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>用 tcod-rs 写个游戏，所以……</title>
    <link href="https://afool.top/learning/write-a-roguelike-game-with-tcod-rs/"/>
    <id>https://afool.top/learning/write-a-roguelike-game-with-tcod-rs/</id>
    <published>2022-05-15T15:45:35.000Z</published>
    <updated>2022-05-15T15:51:33.145Z</updated>
    
    <content type="html"><![CDATA[<p><del>这是一篇水文。</del></p><h2 id="为什么写了这个么东西呢？"><a href="#为什么写了这个么东西呢？" class="headerlink" title="为什么写了这个么东西呢？"></a>为什么写了这个么东西呢？</h2><p>这是个好问题，动机永远是关键。第一点呢，我这个人玩心很重，能不做任务就绝对不会做，用一切时间来玩（或者睡），在玩的过程中逐渐有了自己做个游戏的想法。正巧托室友的福，我发现了这个项目合集：<a href="https://github.com/codecrafters-io/build-your-own-x">Build your own x</a>，里面有好几个小游戏的实现教程。至于第二点，我最近对 Rust 比较感兴趣，还心血来潮用它写了个课程实验。看到合集里有 Rust 的游戏，我觉得有点惊喜，就选了一个跟着做一下。</p><span id="more"></span><p>就是<a href="https://tomassedovic.github.io/roguelike-tutorial/index.html">这个</a>，用 tcod-rs 来做的 Roguelike。之前玩 Hades 很上头，发现了 Roguelike 的吸引力，就它了。</p><p>那么，一知半解的 Rust + Roguelike 游戏之旅就这么拉开了序幕。</p><p><em>当然不会贴具体的代码和过程，毕竟基本上是按教程做的，不会有太多差异。</em></p><h2 id="什么是-Roguelike？"><a href="#什么是-Roguelike？" class="headerlink" title="什么是 Roguelike？"></a>什么是 Roguelike？</h2><blockquote><p><a href="https://zh.wikipedia.org/wiki/Roguelike">Roguelike - 维基百科</a></p></blockquote><p>根据维基百科的描述，Roguelike 游戏有一些明确的特点，包括随机生成地牢、使用永久死亡机制和回合制等等（柏林准则）。在最直观的元素——画面上，早期的 Roguelike 游戏往往使用一连串的 ASCII 或者 ANSI 字符来表示。其他的也没必要说太多，知道这些就够用了。</p><p>不过看了才知道，像 Hades 这样的游戏已经比传统的 Roguelike 简单了很多。这算是降低了一点门槛吧。</p><h2 id="游戏的逻辑"><a href="#游戏的逻辑" class="headerlink" title="游戏的逻辑"></a>游戏的逻辑</h2><p>真正上手做游戏之前最大的困惑就是游戏的运行逻辑该如何实现，各种元素应该如何放到代码里面组成想要的那个东西。趁着现在还没忘完，来梳理一下。</p><h3 id="游戏里的各种物体——组装！"><a href="#游戏里的各种物体——组装！" class="headerlink" title="游戏里的各种物体——组装！"></a>游戏里的各种物体——组装！</h3><p>游戏里最直观的就是能看到、能互动的各种物体了。它们会有很多不同，比如一个敌人单位和一个友好的 NPC 的属性、行为等当然会不一样。但是它们也会有很多相同之处，比方说敌人和 NPC 都可能会移动，这部分代码很可能一样，不太可能把它们分别写好几遍。怎么在代码层面描述这些不同和共同之处？</p><p>之前尝试用 Java 写的时候，可以利用面向对象的特点，把一些共同的部分——例如 move ——抽象成接口，不同的物体就可以分别实现这些接口，实现各种功能自由组合的直观效果。然而 Rust 似乎没有一般意义上的面向对象这个概念（它甚至都不是个面向对象的语言），所幸通过结构体的一些操作能实现一样的效果。利用特性可以实现一些接口，在子类中定义父类的实例可以变相实现继承。</p><p>比方说有一个具有战斗相关属性的类型 <code>Fighter</code>，如果是 Java 就可以把它写成接口，放在子类里面实现，而 Rust 要直接写出实现，在 <code>Object</code> 里定义一个 <code>Option&lt;Fighter&gt;</code>，当这个 <code>Fighter</code> 有确定的实例时它就是一个战斗单位（玩家、敌人等）。像是用各种零件组装出一个完整的机器一样。</p><p>这样一来就清楚了，可以把各种功能属性单独包装起来，用这种组合的方式实现具有复杂属性的类型。</p><h3 id="游戏循环——性能黑洞？"><a href="#游戏循环——性能黑洞？" class="headerlink" title="游戏循环——性能黑洞？"></a>游戏循环——性能黑洞？</h3><p>看过一些有关游戏实现的文章之后，我悟了：游戏可以在一个循环中进行，尤其是这种玩家行动-怪物行动的模式，实在是再合适不过了。</p><p>开始游戏其实就是进入程序的主循环，我按照教程做下来，主循环会依次完成这些任务：</p><ol><li>清除前一帧</li><li>检测、记录鼠标键盘输入事件</li><li>重新绘制画面</li><li>计算经验值</li><li>根据玩家行动退出游戏或使怪物行动</li></ol><p>具体每一步怎么实现就不赘述了，展示信息、修改属性数值什么的还算比较常规。</p><p>按照这样的思路，游戏的每一次循环都会对所有数据来一次检查，如果是比较复杂的游戏，计算量应该会很大。<del>游戏吃性能的原因之一？</del></p><h2 id="关于-Rust-本身"><a href="#关于-Rust-本身" class="headerlink" title="关于 Rust 本身"></a>关于 Rust 本身</h2><p>在整个实现过程中我又把之前忘掉的 Rust 相关的注意事项稍微拾起了一点，见识到了之前没来得及看的更高级操作，果然要把工具用得更好就是要多用。</p><h3 id="derive"><a href="#derive" class="headerlink" title="derive"></a>derive</h3><p>按照比较官方的说法，derive 应该是用来自动实现一些 trait （特性？），比方说用了 <code>#[derive(Debug)]</code>，就不用再为结构体手动写 <code>std::fmt::Debug</code> 的实现，算是非常方便了。还可以自己写 derive 宏。</p><blockquote><p>备注：<a href="https://doc.rust-lang.org/book/ch19-06-macros.html">Macros</a></p></blockquote><h3 id="所有权，所有权，还是所有权"><a href="#所有权，所有权，还是所有权" class="headerlink" title="所有权，所有权，还是所有权"></a>所有权，所有权，还是所有权</h3><p>Rust 对变量的生命周期控制得很严格，之前没怎么写 Rust 的我刚上手写这个游戏时总是碰一鼻子灰。回头又看了看 Rust “圣经”里面关于所有权和生命周期的章节，Rust 中变量与数据的交互包括移动和克隆，值得注意。不过这方面的错误应该过不了编译器那一关，多写写自然也就不会犯了。</p><p>关于所有权，比较有意思的还有 <code>Copy</code> trait、返回值转移所有权以及引用借用等。</p><p>话说为什么对所有权有这么多规定呢？可能和内存管理有关？先按下不表，之后再说（懒癌发作）。</p><p>那么就先到这里，写这篇水文距离我跟着教程做完已经有一段时间了，也忘了很多想写进来的东西，有一点遗憾。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;del&gt;这是一篇水文。&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&quot;为什么写了这个么东西呢？&quot;&gt;&lt;a href=&quot;#为什么写了这个么东西呢？&quot; class=&quot;headerlink&quot; title=&quot;为什么写了这个么东西呢？&quot;&gt;&lt;/a&gt;为什么写了这个么东西呢？&lt;/h2&gt;&lt;p&gt;这是个好问题，动机永远是关键。第一点呢，我这个人玩心很重，能不做任务就绝对不会做，用一切时间来玩（或者睡），在玩的过程中逐渐有了自己做个游戏的想法。正巧托室友的福，我发现了这个项目合集：&lt;a href=&quot;https://github.com/codecrafters-io/build-your-own-x&quot;&gt;Build your own x&lt;/a&gt;，里面有好几个小游戏的实现教程。至于第二点，我最近对 Rust 比较感兴趣，还心血来潮用它写了个课程实验。看到合集里有 Rust 的游戏，我觉得有点惊喜，就选了一个跟着做一下。&lt;/p&gt;</summary>
    
    
    
    <category term="奇怪的知识增加了" scheme="https://afool.top/categories/%E5%A5%87%E6%80%AA%E7%9A%84%E7%9F%A5%E8%AF%86%E5%A2%9E%E5%8A%A0%E4%BA%86/"/>
    
    
    <category term="游戏" scheme="https://afool.top/tags/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="Rust" scheme="https://afool.top/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>生产者消费者模型</title>
    <link href="https://afool.top/learning/java-thread-producer-and-consumer/"/>
    <id>https://afool.top/learning/java-thread-producer-and-consumer/</id>
    <published>2021-10-07T11:37:53.000Z</published>
    <updated>2022-05-15T15:32:02.555Z</updated>
    
    <content type="html"><![CDATA[<h2 id="生产者消费者模型"><a href="#生产者消费者模型" class="headerlink" title="生产者消费者模型"></a>生产者消费者模型</h2><p><del>书接上回……<a href="https://afool.top/learning/java-thread/">Java 中的多线程编程？</a>……</del></p><p>要讨论多线程问题，生产者消费者模型是绕不开的。简单来说，生产者消费者模型中有生产者和消费者两种角色，它们操作同一个“仓库”（或许仓库也可以算一个角色），生产者向仓库中存放资源，消费者从仓库中获取资源。</p><p><img src="https://i.loli.net/2021/10/08/uegpBx7DaF2IOZJ.png" alt="生产者消费者" loading="lazy"></p><p>显然，仓库已满的时候生产者不能再往仓库中存放资源，而仓库为空的时候消费者不能获取资源。</p><h2 id="所以……这就实现了？"><a href="#所以……这就实现了？" class="headerlink" title="所以……这就实现了？"></a>所以……这就实现了？</h2><p>按照上面所写的定义，我们写代码实现一下这个模型。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 仓库</span><span class="token keyword">package</span> <span class="token namespace">thread1006</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Storage</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> linkedList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    linkedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生产者 "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 生产，当前数量："</span> <span class="token operator">+</span> linkedList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">consume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    linkedList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者 "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 消费，当前数量："</span> <span class="token operator">+</span> linkedList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMAX_SIZE</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">20</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">getLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> linkedList<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 生产者</span><span class="token keyword">package</span> <span class="token namespace">thread1006</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">thread1006<span class="token punctuation">.</span></span><span class="token class-name">MyRandom</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Storage</span> storage<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span><span class="token class-name">Storage</span> storage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>storage <span class="token operator">=</span> storage<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>storage<span class="token punctuation">.</span><span class="token function">getLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> storage<span class="token punctuation">.</span><span class="token function">getMAX_SIZE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"仓库已满，生产者 "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 等待"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>          <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">MyRandom</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        storage<span class="token punctuation">.</span><span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 消费者</span><span class="token keyword">package</span> <span class="token namespace">thread1006</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">thread1006<span class="token punctuation">.</span></span><span class="token class-name">MyRandom</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>  <span class="token class-name">Storage</span> storage<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span><span class="token class-name">Storage</span> storage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>storage <span class="token operator">=</span> storage<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>storage<span class="token punctuation">.</span><span class="token function">getLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"仓库为空，消费者 "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 等待"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>          <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">MyRandom</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        storage<span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Storage</span> storage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Storage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Producer</span> producer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Producer</span> producer2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Producer</span> producer3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Consumer</span> consumer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Consumer</span> consumer2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Consumer</span> consumer3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span><span class="token punctuation">;</span>    producer1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>在 <code>Consumer</code> 类中写了程序入口。按照前面所讲的，我们的生产者和消费者线程应该会根据仓库中列表的大小完成我们预期的动作。</p><p>但是程序运行的结果却让我大跌眼镜，来看其中的一小段输出：</p><pre class="language-text" data-language="text"><code class="language-text">生产者 Thread-2 生产，当前数量：1消费者 Thread-4 消费，当前数量：0消费者 Thread-3 消费，当前数量：1生产者 Thread-1 生产，当前数量：2生产者 Thread-0 生产，当前数量：1生产者 Thread-0 生产，当前数量：2消费者 Thread-5 消费，当前数量：0生产者 Thread-0 生产，当前数量：3生产者 Thread-1 生产，当前数量：1消费者 Thread-4 消费，当前数量：0生产者 Thread-2 生产，当前数量：1消费者 Thread-4 消费，当前数量：3生产者 Thread-1 生产，当前数量：4生产者 Thread-1 生产，当前数量：4</code></pre><p>消费者消费数量与仓库中资源减少量不符，生产者生产后资源数量不变……</p><p>还有这种：</p><pre class="language-text" data-language="text"><code class="language-text">仓库为空，消费者 Thread-3 等待仓库为空，消费者 Thread-5 等待仓库为空，消费者 Thread-4 等待仓库已满，生产者 Thread-0 等待仓库已满，生产者 Thread-1 等待仓库已满，生产者 Thread-2 等待</code></pre><p>仓库到底是空还是满？</p><p>这些问题很严重。为什么会这样呢？原因很简单：这些线程没有同步。各个线程可以同时对仓库执行自己的动作，我们看到的输出就会乱作一团。设想一下，两个生产者同时生产，我们预期的结果是数量依次加1，但是我们实际看到的可能是两个生产者输出的数量都是原来的数量加2。</p><p>还有一个经典的例子：售卖车票。如果购票系统中的一个线程刚使票数减1，票卖完了，但操作没有结束，另一个线程就插进来，很可能导致系统卖出一张不存在的票。</p><p>为了避免这些情况，我们需要给这些线程加上同步锁，使线程互斥。</p><h2 id="还要加锁"><a href="#还要加锁" class="headerlink" title="还要加锁"></a>还要加锁</h2><p>在 Java 中加同步锁很简单，用 <code>synchronized (共享数据对象) &#123; 要同步的代码块 &#125;</code> 就可以。</p><p>加上锁的生产者和消费者如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 生产者</span><span class="token keyword">package</span> <span class="token namespace">thread1006</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Storage</span> storage<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span><span class="token class-name">Storage</span> storage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>storage <span class="token operator">=</span> storage<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>storage<span class="token punctuation">.</span><span class="token function">getLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>storage<span class="token punctuation">.</span><span class="token function">getLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> storage<span class="token punctuation">.</span><span class="token function">getMAX_SIZE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"仓库已满，生产者 "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 等待"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            storage<span class="token punctuation">.</span><span class="token function">getLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          storage<span class="token punctuation">.</span><span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          storage<span class="token punctuation">.</span><span class="token function">getLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 消费者</span><span class="token keyword">package</span> <span class="token namespace">thread1006</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>  <span class="token class-name">Storage</span> storage<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span><span class="token class-name">Storage</span> storage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>storage <span class="token operator">=</span> storage<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>storage<span class="token punctuation">.</span><span class="token function">getLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>storage<span class="token punctuation">.</span><span class="token function">getLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"仓库为空，消费者 "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 等待"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            storage<span class="token punctuation">.</span><span class="token function">getLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          storage<span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          storage<span class="token punctuation">.</span><span class="token function">getLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Storage</span> storage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Storage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Producer</span> producer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Producer</span> producer2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Producer</span> producer3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Consumer</span> consumer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Consumer</span> consumer2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Consumer</span> consumer3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span><span class="token punctuation">;</span>    producer1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>仓库中的 <code>linkedList</code> 就是共享数据，所以要把它作为锁，把线程对它的操作作为同步代码块。这样的话在某一时刻就只有一个线程能拿到共享的数据，避免了前面的错误。</p><p>上面是用了 <code>wait()</code> 和 <code>notify()</code> 方法来完成线程的等待和唤醒，当然还有其他方法，就不一一展示了。</p><p>一小段输出结果：</p><pre class="language-text" data-language="text"><code class="language-text">仓库已满，生产者 Thread-2 等待仓库已满，生产者 Thread-0 等待仓库已满，生产者 Thread-1 等待消费者 Thread-3消费，当前数量：19消费者 Thread-3消费，当前数量：18消费者 Thread-3消费，当前数量：17消费者 Thread-3消费，当前数量：16消费者 Thread-3消费，当前数量：15消费者 Thread-3消费，当前数量：14消费者 Thread-3消费，当前数量：13生产者 Thread-1生产，当前数量：14生产者 Thread-1生产，当前数量：15生产者 Thread-1生产，当前数量：16生产者 Thread-1生产，当前数量：17生产者 Thread-1生产，当前数量：18生产者 Thread-1生产，当前数量：19生产者 Thread-1生产，当前数量：20仓库已满，生产者 Thread-1 等待消费者 Thread-3消费，当前数量：19消费者 Thread-3消费，当前数量：18生产者 Thread-2生产，当前数量：19生产者 Thread-2生产，当前数量：20仓库已满，生产者 Thread-2 等待消费者 Thread-5消费，当前数量：19消费者 Thread-5消费，当前数量：18消费者 Thread-5消费，当前数量：17消费者 Thread-5消费，当前数量：16消费者 Thread-5消费，当前数量：15消费者 Thread-5消费，当前数量：14消费者 Thread-5消费，当前数量：13</code></pre><h3 id="关于-wait-和-notify"><a href="#关于-wait-和-notify" class="headerlink" title="关于 wait() 和 notify()"></a>关于 wait() 和 notify()</h3><p>从上面可以看出调用 <code>wait()</code> 和 <code>notify()</code> 的对象是作为同步锁的共享资源 <code>Storage.linkedList</code>，为什么要用它来调用这两个方法呢？</p><p><code>wait()</code> 方法可以让一个线程进入等待状态并释放持有的锁，而 <code>notify() </code> 则是通知等待该锁的线程重新获得这个锁对象。显然，如果没有锁对象，这两个方法就没有意义。所以要使用这两个方法，必须指定锁对象，把要同步的部分写进同步代码块，通过锁对象来调用它们。</p><p><del>（话锋一转）</del>这也就解释了 <code>wait()</code> 和 <code>sleep()</code> 的本质区别。<code>wait()</code> 是通过线程通信来通知线程进入等待状态并释放锁，而 <code>sleep()</code> 是控制当前线程等待，并不释放所持有的资源。同时，由于 <code>wait()</code> 涉及到同步锁，我们必须在同步代码块中才能使用它，而 <code>sleep()</code> 与锁无关，我们可以在任何地方调用。</p><p>哦，还有一件事，<code>wait()</code> 属于 <code>Object</code> 类（毕竟同步锁可以是任何类的实例），而 <code>sleep()</code> 是 <code>Thread</code> 类的静态方法。这一点应该不难理解吧……</p><p>（欢迎捉虫，逃~）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;生产者消费者模型&quot;&gt;&lt;a href=&quot;#生产者消费者模型&quot; class=&quot;headerlink&quot; title=&quot;生产者消费者模型&quot;&gt;&lt;/a&gt;生产者消费者模型&lt;/h2&gt;&lt;p&gt;&lt;del&gt;书接上回……&lt;a href=&quot;https://afool.top/learning</summary>
      
    
    
    
    <category term="快去学习" scheme="https://afool.top/categories/%E5%BF%AB%E5%8E%BB%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://afool.top/tags/Java/"/>
    
    <category term="多线程" scheme="https://afool.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>如何拥有一辆属于自己的三蹦子</title>
    <link href="https://afool.top/learning/how-to-own-a-tricycle/"/>
    <id>https://afool.top/learning/how-to-own-a-tricycle/</id>
    <published>2021-09-26T10:56:38.000Z</published>
    <updated>2022-05-15T15:32:02.553Z</updated>
    
    <content type="html"><![CDATA[<p>你是否经常感到空虚寂寞、百无聊赖？你是否缺少陪伴、倍感不安、想要在这喧嚣的城市里寻找一份慰藉？</p><p>毫无疑问，拥有属于自己的车、房可以在物质层面缓解这些焦虑（确信）。买房太难了，所以就先从车开始吧。</p><h2 id="三轮车也是车"><a href="#三轮车也是车" class="headerlink" title="三轮车也是车"></a>三轮车也是车</h2><p>打住，我要说的并不是这种车：</p><p><img src="https://i.loli.net/2021/09/26/ln7xH36LUbiZc9O.png" alt="车1网图" loading="lazy"></p><p><img src="https://i.loli.net/2021/09/26/GHQzW9Xd73DqvNF.png" alt="车2网图" loading="lazy"></p><p>或者这种车：</p><p><img src="https://i.loli.net/2021/09/26/E3CDyXLPTh5qFfS.png" alt="蝙蝠车网图" loading="lazy"></p><p><del>废话，你以为我买得起？</del></p><p>而是这种：</p><p><img src="https://i.loli.net/2021/09/26/En4idsW7mopQIlw.png" alt="三蹦子" loading="lazy"></p><p>什么？这不行？气抖冷，难道三轮车就不是车？玩具车就不能给慰藉了？</p><span id="more"></span><h2 id="从零（并不是）开始的造三轮生活"><a href="#从零（并不是）开始的造三轮生活" class="headerlink" title="从零（并不是）开始的造三轮生活"></a>从零（并不是）开始的造三轮生活</h2><p>是这样的，我想搞个小车已经很久了，大概大半年了？早早地就从某宝上买了亚克力板和电机、轮子（所以不算从零开始），准备大干一番，却一直没有动手。因为之前没有接触过单片机，丝毫没有头绪。<del>（懒）</del></p><p>事情的转机出现在今年夏季小学期，我们要基于单片机学电子系统设计了。狂喜，有人教了。于是在焊完板子学了一些案例后我们就放假回家了，老师特意说要自己想想选题（不过很多人不一定想了）嗯？这还用想？做车啊！</p><p><del>虽然这样说，我还是等到了暑假的最后一周才开始动手。</del></p><h3 id="电机驱动"><a href="#电机驱动" class="headerlink" title="电机驱动"></a>电机驱动</h3><p>对于车来说，最基本的是什么？当然是能跑。所以我首先测了电机能不能转。</p><p>我用的板子就是之前<a href="https://afool.top/learning/stc-beep-music/">蜂鸣器唱《国际歌》</a>的那块，芯片型号是 IAP15F2K60S2（基本等同于STC15F2K60S2）。板子上有三个拓展接口：EXT、SM 和 485。大概长这样：</p><p><img src="https://i.loli.net/2021/09/26/zn1dQPEOVopC6Nb.png" alt="拓展接口" loading="lazy"></p><p>最适合拿来控制两个电机的当然是 SM （步进电机）接口，给了一个 VCC 和四个引脚输出（EXT 接口蓝牙要用，485 只给了两个引脚和 GND）。直接把电机接到 VCC 和另一个引脚，没问题，但是接两个引脚给高低电平电机就不转，设推挽输出也没用，我是没想明白怎么回事。实在太逊了，这个样子连电机反转都搞不了，还怎么跑两个电机啊？</p><p>办法总比困难多，博闻强识的我（大嘘）怎么能想不到解决方案呢？好吧，其实是搜索引擎帮大忙。我借助了双路 L9110S 电机驱动来控制电机。</p><p><img src="https://i.loli.net/2021/09/26/sag6u8wGnzUjeJI.png" alt="电机驱动" loading="lazy"></p><p>这样就可以做到用 SM 的 VCC 和 485 的 GND 供电，用 S1 到 S4 控制两个电机。四个引脚分别接图里下方的 A-1A 这些。A-1A 和 A-1B 控制 Motor A，Motor A连接到一个电机的两端，Motor B 同理。嗯，完美解决。</p><p>让小车按命令动起来的话当然要写程序了，先给小车运动状态的基本定义：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_MOVE_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_MOVE_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"STC15F2K60S2.H"</span></span><span class="token comment">// 接电机的引脚</span>sbit s1 <span class="token operator">=</span> P4 <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">;</span>sbit s2 <span class="token operator">=</span> P4 <span class="token operator">^</span> <span class="token number">2</span><span class="token punctuation">;</span>sbit s3 <span class="token operator">=</span> P4 <span class="token operator">^</span> <span class="token number">3</span><span class="token punctuation">;</span>sbit s4 <span class="token operator">=</span> P4 <span class="token operator">^</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">// 电机转动方向</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RightMotorStop</span> <span class="token expression">s1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> s2 <span class="token operator">=</span> <span class="token number">0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LeftMotorStop</span> <span class="token expression">s3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> s4 <span class="token operator">=</span> <span class="token number">0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RightMotorFWD</span> <span class="token expression">s1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> s2 <span class="token operator">=</span> <span class="token number">0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LeftMotorFWD</span> <span class="token expression">s3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> s4 <span class="token operator">=</span> <span class="token number">0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RightMotorREV</span> <span class="token expression">s1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> s2 <span class="token operator">=</span> <span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LeftMotorREV</span> <span class="token expression">s3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> s4 <span class="token operator">=</span> <span class="token number">1</span></span></span><span class="token comment">// 运动和停止</span><span class="token keyword">void</span> <span class="token function">Forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Backward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TurnLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TurnRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">VStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 初始化</span><span class="token keyword">void</span> <span class="token function">MoveInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></code></pre><p><del>分别给高低电平应该能看懂吧？</del></p><p>函数实现：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"move.h"</span></span><span class="token comment">// 前进</span><span class="token keyword">void</span> <span class="token function">Forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>LeftMotorFWD<span class="token punctuation">;</span>RightMotorFWD<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 后退</span><span class="token keyword">void</span> <span class="token function">Backward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>LeftMotorREV<span class="token punctuation">;</span>RightMotorREV<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 左转</span><span class="token keyword">void</span> <span class="token function">TurnLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>LeftMotorREV<span class="token punctuation">;</span>RightMotorFWD<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 右转</span><span class="token keyword">void</span> <span class="token function">TurnRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>LeftMotorFWD<span class="token punctuation">;</span>RightMotorREV<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 停车</span><span class="token keyword">void</span> <span class="token function">VStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>LeftMotorStop<span class="token punctuation">;</span>RightMotorStop<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 初始化，s1 到 s4 推挽输出</span><span class="token keyword">void</span> <span class="token function">MoveInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>P4M0 <span class="token operator">=</span> <span class="token number">0xff</span><span class="token punctuation">;</span>P4M1 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span><span class="token comment">//P0 = 0;</span><span class="token function">VStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>我觉得这些都算得上言简意赅（叉腰），就不多解释了。</p><h3 id="蓝牙遥控与串口通信"><a href="#蓝牙遥控与串口通信" class="headerlink" title="蓝牙遥控与串口通信"></a>蓝牙遥控与串口通信</h3><p>小车能动了，但是我们还需要控制。我最开始的想法就是做遥控，能用手机直接遥控就再好不过了。手机遥控？那就用蓝牙！</p><p>遥控器程序去手机的应用商店里搜“蓝牙串口”，最好是带按钮编辑的那种，一搜一大把，所以就先不关心了。</p><p>小车的蓝牙接收我是用 HC-06 来做的。</p><p>老师给出的样例里面有用到蓝牙串口通信的，遂“参考”之。</p><blockquote><p>STC15F2K60S2 系列单片机有2个高速异步串行通信端口，每个串口由2个数据缓冲器、一个移位寄存器、一个串行控制寄存器和一个波特率发生器等组成。</p><p>串口1已被用于下载电路，故本案例使用的是串口2来进行与蓝牙的通信。从芯片引脚电路图中，我们可以找到串口2对应的收发引脚分别为 P1.0 和 P1.1，将其的“接受”端和蓝牙模块的“发送”端相连，“发送”端和蓝牙模块的“接收端”端相连，再对应连接 VCC 和 GND 即实现了物理上电路的连通。</p><p>串口2只能使用定时器2作为波特率发生器，根据芯片使用手册的说明设置好定时器后，只要将要发送的数据写到 SBUF2 中，串口即自动发送缓存中的数据。</p><p><img src="https://i.loli.net/2021/09/26/3bd725qZpOjQaWt.png" alt="连接图示" loading="lazy"></p><p>——湖大超星 电子系统设计与创新基础训练 基于Andriod的数据采集系统</p></blockquote><p>如上所示，使用串口2进行蓝牙通信，串口2只能用定时器2作为波特率发生器，所以先初始化定时器：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Uart2Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token comment">// 9600bps@11.0592MHz</span><span class="token punctuation">&#123;</span>S2CON <span class="token operator">=</span> <span class="token number">0x50</span><span class="token punctuation">;</span> <span class="token comment">// 8位数据，可变波特率</span>AUXR <span class="token operator">|=</span> <span class="token number">0x04</span><span class="token punctuation">;</span> <span class="token comment">// 定时器2时钟为Fosc，即1T</span>T2L <span class="token operator">=</span> <span class="token number">0xE0</span><span class="token punctuation">;</span>   <span class="token comment">// 设定定时初值</span>T2H <span class="token operator">=</span> <span class="token number">0xFE</span><span class="token punctuation">;</span>   <span class="token comment">// 设定定时初值</span>AUXR <span class="token operator">|=</span> <span class="token number">0x10</span><span class="token punctuation">;</span> <span class="token comment">//启动定时器2</span>IE2 <span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>P_SW2 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>EA <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>前面有注释的都是 STC-ISP 软件自动生成的，最后三句大概是中断使能、外设切换等<del>，没怎么看懂</del>。</p><p>然后是用于读取串口2接收数据的中断函数：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">UART2_Interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">8</span> <span class="token comment">// 中断8，用于串口2</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">char</span> temp<span class="token punctuation">;</span>    <span class="token comment">// 检查串口2控制寄存器</span>    <span class="token comment">// 将1字节的新数据赋给 ReceivedData</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>S2CON<span class="token operator">&amp;</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>S2CON <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token number">0x01</span><span class="token punctuation">;</span>temp <span class="token operator">=</span> S2BUF<span class="token punctuation">;</span>ReceivedData<span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><del>这里似乎可以不用 <code>temp</code>。</del></p><p><code>ReceivedData</code> 是个 <code>unsigned char</code> 型的全局变量。在手机的蓝牙串口应用里编辑按钮发送不同数据，根据 <code>ReceivedData</code> 来调用小车的运动控制函数就能实现遥控。这部分程序就不写出来了，<code>switch</code> 或者 <code>if</code> 判断就行。</p><p><del>现在一看好简单啊！那为什么我暑假里写了好几天？</del></p><h2 id="当你拥有了现成的轮子"><a href="#当你拥有了现成的轮子" class="headerlink" title="当你拥有了现成的轮子"></a>当你拥有了现成的轮子</h2><p><strong>这部分可能不太具有复现性（湖大信息院学生除外，毕竟有老师给的 BSP）。</strong></p><p>上面这些是在八月的最后两三天完成的，一边摸鱼一边写程序，算是完成了蓝牙遥控小车的功能，想着就这样吧，也算个设计了，就这样交差。</p><p>令我没想到的是，暑假回来之后的下半个小学期，老师给出了一套功能完备的 BSP （Board Support Package，板级支持包），里面有板子上各种外设的驱动程序。比方说要让数码管显示一个数字，原来你需要这样：写段选、写位选、设置推挽输出、引脚赋值、循环内刷新……现在你只需要这样：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token function">DisplayerInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">// 显示模块初始化</span><span class="token function">SetDisplayerArea</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 只用数码管最后一位</span><span class="token function">Seg7Print</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数码管最后一位显示1</span></code></pre><p>初始化之后想显示什么直接调用 <code>Seg7Print()</code> 就行，十分快捷。</p><p>有了这样一套轮子，大家想做什么直接调库函数就行，完全不需要向我之前那样从定时器和中断开始写。于是同学们纷纷变身缝合怪，恨不得把所有模块都加到自己的设计中。</p><p><del>坏了，卷起来了。</del></p><p>没办法，我也只能多搞点东西了。先把蓝牙遥控换成了 BSP 的实现，加了上锁功能。此外在小车上加什么好呢？在咨询了<a href="https://blog.csdn.net/dasifhoaisfg?spm=1001.2014.3001.5509">隔壁老王</a>后，我确定了“超声波”这个方向，避障什么的自然是少不了，跟随式行李箱也有点意思。完成这些之后我又附加了一个红外遥控的模式。</p><p>嗯……比我的最初想法丰富多了……</p><h3 id="车身功能"><a href="#车身功能" class="headerlink" title="车身功能"></a>车身功能</h3><p><img src="https://i.loli.net/2021/09/27/Em4FxIQVOqHk23v.png" alt="车身功能" loading="lazy"></p><h3 id="程序构成"><a href="#程序构成" class="headerlink" title="程序构成"></a>程序构成</h3><p>小车整体的思想是依托 BSP 提供的<strong>设置事件回调函数</strong>的功能，持续获取外部和车身命令，维护几个系统变量，根据命令和这些变量判断当前小车应该执行的动作。</p><p><del>就没必要给整体流程图了吧？</del></p><p>由于 BSP 是学校老师写的，且其中函数实现被封装进了库文件，我就不太好意思上传了，只讲一下整体的结构和我自己写的函数吧。</p><h4 id="系统变量和函数声明"><a href="#系统变量和函数声明" class="headerlink" title="系统变量和函数声明"></a>系统变量和函数声明</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">// main.h</span><span class="token comment">// 老师写的数码管显示码表就略过了</span><span class="token comment">/** * 提供四种模式： * 1. 红外遥控 * 2. 蓝牙串口遥控 * 3. 超声波避障 * 4. 跟随/保持距离 * 其中红外和蓝牙串口模式的运动状态均由 Remote() 控制 * 避障模式的运动状态由 AutoMove(int i) 控制，跟随模式的运动状态由 Follow(int i) 控制 * 系统利用 TenMsCallback()，每 10ms 进行运动控制，根据当前模式调用上述三个函数中的一个 */</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> rxd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 红外和蓝牙接收的数据</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> rxdHead <span class="token operator">=</span> <span class="token number">0xFA</span><span class="token punctuation">;</span> <span class="token comment">// 蓝牙校验，为配合红外的数据头校验，不特意使用 SetUart2Rxd() 设置</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> flag<span class="token punctuation">;</span><span class="token comment">// 标志位，是否允许操作，为1时允许操作</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> speedState<span class="token punctuation">;</span><span class="token comment">// PWM 控制标志</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> speedControl<span class="token punctuation">;</span> <span class="token comment">// 速度控制参数，将电机转速降为全速的 1/speedControl</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> speedLevel<span class="token punctuation">;</span><span class="token comment">// 速度档位，数字越大速度越快</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> dirFlag<span class="token punctuation">;</span><span class="token comment">// 避障转向选择</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> mode<span class="token punctuation">;</span><span class="token comment">// 模式标志</span><span class="token keyword">void</span> <span class="token function">ChangeSpeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 更改速度档位</span><span class="token keyword">void</span> <span class="token function">Remote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 遥控</span><span class="token keyword">void</span> <span class="token function">AutoMove</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 避障</span><span class="token keyword">void</span> <span class="token function">Follow</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 维持距离</span><span class="token keyword">void</span> <span class="token function">ModeBTRemote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 蓝牙遥控模式初始化</span><span class="token keyword">void</span> <span class="token function">ModeIRRemote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 红外遥控模式初始化</span><span class="token keyword">void</span> <span class="token function">ModeAuto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 避障模式初始化</span><span class="token keyword">void</span> <span class="token function">ModeFollow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 跟随&amp;控制距离模式初始化</span><span class="token keyword">void</span> <span class="token function">SwitchModes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 切换模式</span><span class="token keyword">void</span> <span class="token function">KeyCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 按键事件回调函数</span><span class="token keyword">void</span> <span class="token function">Uart2Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 蓝牙接收数据回调函数，仅处理解锁上锁，运动控制被 TenMsCallback() 接管</span><span class="token keyword">void</span> <span class="token function">IRCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 红外接收数据回调函数，仅处理解锁上锁，运动控制被 TenMsCallback() 接管</span><span class="token keyword">void</span> <span class="token function">TenMsCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 10ms 回调，实现电机转速控制</span></code></pre><p>以上函数均在 <code>main.c</code> 中实现，下面出现的没有在此处声明的函数都来自老师的 BSP。</p><h4 id="系统初始化"><a href="#系统初始化" class="headerlink" title="系统初始化"></a>系统初始化</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">Key_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 按键初始化</span><span class="token function">DisplayerInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 显示模块初始化</span><span class="token function">SetDisplayerArea</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用数码管范围</span><span class="token function">BeepInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 蜂鸣器初始化</span><span class="token function">SetEventCallBack</span><span class="token punctuation">(</span>enumEventKey<span class="token punctuation">,</span> KeyCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 设置按键回调函数，本机按键包括模式切换和上锁解锁</span><span class="token function">SetEventCallBack</span><span class="token punctuation">(</span>enumEventSys10mS<span class="token punctuation">,</span> TenMsCallback<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 每 10ms 进行运动控制</span>speedState <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 给PWM控制位赋初值</span>speedLevel <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 默认速度档位</span>flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 启动时未上锁</span><span class="token function">MoveInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置 s1 到 s4 推挽输出</span><span class="token function">ModeIRRemote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 默认启动红外遥控模式，即模式0</span><span class="token function">MySTC_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">MySTC_OS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">LedPrint</span><span class="token punctuation">(</span><span class="token punctuation">(</span>flag <span class="token operator">&lt;&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> mode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用 LED7 显示 flag 状态，亮起时表示未上锁</span> <span class="token comment">// LED0、1、2、3分别表示模式0、1、2、3</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="车身按键功能"><a href="#车身按键功能" class="headerlink" title="车身按键功能"></a>车身按键功能</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">// 按下车机按键的回调函数</span><span class="token keyword">void</span> <span class="token function">KeyCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 按下 key1 上锁解锁</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GetKeyAct</span><span class="token punctuation">(</span>enumKey1<span class="token punctuation">)</span> <span class="token operator">==</span> enumKeyPress<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">VStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>flag <span class="token operator">=</span> <span class="token operator">!</span>flag<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 按下 key2 切换模式</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GetKeyAct</span><span class="token punctuation">(</span>enumKey2<span class="token punctuation">)</span> <span class="token operator">==</span> enumKeyPress<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">VStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">SwitchModes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="运动控制中枢"><a href="#运动控制中枢" class="headerlink" title="运动控制中枢"></a>运动控制中枢</h4><p>直接控制电机的函数就是之前写的那些。</p><p>设置系统 10ms 事件回调函数来控制运动：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">// 简单的 PWM，将电机转速控制为全速的 1/speedControl</span><span class="token keyword">void</span> <span class="token function">TenMsCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token comment">// 未上锁</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>speedState<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>mode<span class="token punctuation">)</span> <span class="token comment">// 根据当前模式选择运动控制函数</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span><span class="token function">Remote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><span class="token function">Remote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span><span class="token function">AutoMove</span><span class="token punctuation">(</span><span class="token function">GetUltraSonic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span><span class="token function">Follow</span><span class="token punctuation">(</span><span class="token function">GetUltraSonic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token function">VStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>speedState <span class="token operator">>=</span> speedControl<span class="token punctuation">)</span>speedState <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>在程序中，0 &lt;&#x3D; speedState &lt; speedControl。系统每次执行回调函数 speedState 会自加，超出范围后再赋值为0。只有在 speedState 为0时小车才会运动。</p><p>系统每执行 speedControl 次回调函数，只会有一次允许小车运动，即调整速度为全速的 1&#x2F;speedControl。改变 speedControl 的值即可改变速度：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">// 调整速度，speedControl 的值是 3或4-speedLevel，所以speedLevel越大，速度越大</span><span class="token keyword">void</span> <span class="token function">ChangeSpeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>speedLevel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>speedLevel <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>speedLevel <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>speedLevel <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>你问我难道老师没有写速度控制？当然写了，可老师的 PWM 是控制 EXT 接口的，我用不了。步进电机那种从 S1 到 S4 依次扫描下来的方式也做不到控制两个直流电机。那就自己写咯……</p><h4 id="模式转换"><a href="#模式转换" class="headerlink" title="模式转换"></a>模式转换</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">// 在四种模式之间轮换：红外->蓝牙->避障->跟随->红外...</span><span class="token keyword">void</span> <span class="token function">SwitchModes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>mode<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span><span class="token function">ModeBTRemote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><span class="token function">ModeAuto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span><span class="token function">ModeFollow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span><span class="token function">ModeIRRemote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="红外和蓝牙遥控"><a href="#红外和蓝牙遥控" class="headerlink" title="红外和蓝牙遥控"></a>红外和蓝牙遥控</h4><p>红外遥控和蓝牙遥控都是一套逻辑，遥控器发送的命令数据和对应动作如下：</p><table><thead><tr><th><strong>命令</strong></th><th><strong>动作</strong></th></tr></thead><tbody><tr><td><strong>0xFA,0x00</strong></td><td>停车</td></tr><tr><td><strong>0xFA,0x01</strong></td><td>前进</td></tr><tr><td><strong>0xFA,0x02</strong></td><td>左转</td></tr><tr><td><strong>0xFA,0x03</strong></td><td>右转</td></tr><tr><td><strong>0xFA,0x04</strong></td><td>后退</td></tr><tr><td><strong>0xFA,0x05</strong></td><td>鸣笛</td></tr><tr><td><strong>0xFA,0x06</strong></td><td>模式转换</td></tr><tr><td><strong>0xFA,0x07</strong></td><td>上锁解锁</td></tr><tr><td><strong>0xFA,0x08</strong></td><td>切换速度档位</td></tr></tbody></table><p>红外遥控器就是另一块同样的板子，按下按键发送命令：</p><table><thead><tr><th><strong>按键</strong></th><th><strong>动作</strong></th></tr></thead><tbody><tr><td><strong>Up</strong></td><td>前进</td></tr><tr><td><strong>Left</strong></td><td>左转</td></tr><tr><td><strong>Right</strong></td><td>右转</td></tr><tr><td><strong>Down</strong></td><td>后退</td></tr><tr><td><strong>Center</strong></td><td>停车</td></tr><tr><td><strong>Key3</strong></td><td>不发给小车，用于切换Key1和Key2的模式</td></tr><tr><td><strong>Key1</strong> <strong>模式0</strong></td><td>鸣笛</td></tr><tr><td><strong>Key1</strong> <strong>模式1</strong></td><td>上锁解锁</td></tr><tr><td><strong>Key2</strong> <strong>模式0</strong></td><td>速度控制</td></tr><tr><td><strong>Key2</strong> <strong>模式1</strong></td><td>模式转换</td></tr></tbody></table><p>红外遥控器的程序就是简单的按键事件和导航按键事件回调函数，就不贴出来了。</p><p>至于蓝牙遥控器……<del>比卷，</del>我又写了个<a href="https://github.com/charliedu2000/BLESerial">安卓蓝牙遥控器</a>，界面上的按键名就是对应功能。</p><p>小车的红外模式、蓝牙模式初始化：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">// 红外遥控模式初始化</span><span class="token keyword">void</span> <span class="token function">ModeIRRemote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">Seg7Print</span><span class="token punctuation">(</span>speedLevel<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 默认模式下显示速度等级和默认指令</span><span class="token function">IrInit</span><span class="token punctuation">(</span>NEC_R05d<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 设置红外协议基本时间片时长，接收到的数据在回调函数和 Remote() 中再进行内容校验</span><span class="token function">SetIrRxd</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rxd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">SetEventCallBack</span><span class="token punctuation">(</span>enumEventIrRxd<span class="token punctuation">,</span> IRCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>mode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 蓝牙遥控模式初始化</span><span class="token keyword">void</span> <span class="token function">ModeBTRemote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">Uart2Init</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">,</span> Uart2UsedforEXT<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 将串口2的波特率设为9600，用于 EXT</span><span class="token function">SetUart2Rxd</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rxd<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>rxdHead<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将接收到的数据存到 rxd，不在此处设置校验</span>   <span class="token comment">// 放到 Remote() 中和红外接收的数据一样用 if 语句校验</span><span class="token function">SetEventCallBack</span><span class="token punctuation">(</span>enumEventUart2Rxd<span class="token punctuation">,</span> Uart2Callback<span class="token punctuation">)</span><span class="token punctuation">;</span>mode <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>接收到数据的回调函数：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">// 红外接收到数据的回调函数</span><span class="token keyword">void</span> <span class="token function">IRCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GetIrRxNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> rxd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> rxdHead<span class="token punctuation">)</span> <span class="token comment">// 简单校验，剩下的与运动状态有关的指令在 Remote() 中校验</span><span class="token punctuation">&#123;</span><span class="token function">Seg7Print</span><span class="token punctuation">(</span>speedLevel<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> rxd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数码管显示接收到的指令（0到8）</span><span class="token keyword">if</span> <span class="token punctuation">(</span>rxd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token function">VStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SwitchModes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//IrPrint("CodeZone\n", sizeof("CodeZone\n"));</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rxd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token function">VStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> flag <span class="token operator">=</span> <span class="token operator">!</span>flag<span class="token punctuation">;</span> <span class="token comment">// 接收到7的时候进行上锁解锁操作</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rxd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token function">VStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ChangeSpeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 蓝牙接收到数据的回调函数</span><span class="token keyword">void</span> <span class="token function">Uart2Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>rxd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> rxdHead<span class="token punctuation">)</span> <span class="token comment">// 由于蓝牙初始化时不再设置校验，所以在这里简单校验</span>   <span class="token comment">// 运动状态指令和红外模式一样在 Remote() 中校验</span><span class="token punctuation">&#123;</span><span class="token function">Seg7Print</span><span class="token punctuation">(</span>speedLevel<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> rxd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数码管显示接收到的指令（0到8）</span><span class="token keyword">if</span> <span class="token punctuation">(</span>rxd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token function">VStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SwitchModes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Uart2Print("CodeZone\n", sizeof("CodeZone\n"));</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rxd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token function">VStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> flag <span class="token operator">=</span> <span class="token operator">!</span>flag<span class="token punctuation">;</span> <span class="token comment">// 接收到7的时候进行上锁解锁操作</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rxd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token function">VStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ChangeSpeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>遥控模式下的控制：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">/** * 遥控： * 现在 Remote() 由 TenMsCallback() 直接调用 * 这里不再包含上锁解锁等按下后只执行一次的操作 * 上述操作仅在接收数据事件的回调函数里判断并执行 */</span><span class="token keyword">void</span> <span class="token function">Remote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 校验数据头</span><span class="token keyword">if</span> <span class="token punctuation">(</span>rxd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> rxdHead<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>rxd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span><span class="token function">VStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>speedControl <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">-</span> speedLevel<span class="token punctuation">;</span><span class="token function">Forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>speedControl <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">-</span> speedLevel<span class="token punctuation">;</span><span class="token function">TurnLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>speedControl <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">-</span> speedLevel<span class="token punctuation">;</span><span class="token function">TurnRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>speedControl <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">-</span> speedLevel<span class="token punctuation">;</span><span class="token function">Backward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span><span class="token function">SetBeep</span><span class="token punctuation">(</span><span class="token number">440</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="避障"><a href="#避障" class="headerlink" title="避障"></a>避障</h4><p>避障模式的初始化：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">// 避障模式初始化</span><span class="token keyword">void</span> <span class="token function">ModeAuto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">EXTInit</span><span class="token punctuation">(</span>enumEXTUltraSonic<span class="token punctuation">)</span><span class="token punctuation">;</span>dirFlag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>mode <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>避障模式下的控制：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">/** * 显示距离数值，根据距离选择方向 * i 为距离值，单位是厘米 */</span><span class="token keyword">void</span> <span class="token function">AutoMove</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">Seg7Print</span><span class="token punctuation">(</span>speedLevel<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">,</span> i <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 显示速度等级、与障碍物间的距离</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>speedControl <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">-</span> speedLevel<span class="token punctuation">;</span><span class="token function">Forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dirFlag <span class="token operator">=</span> <span class="token operator">!</span>dirFlag<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>speedControl <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">-</span> speedLevel<span class="token punctuation">;</span><span class="token function">SetBeep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 距离值过小时蜂鸣器报警</span><span class="token keyword">if</span> <span class="token punctuation">(</span>dirFlag<span class="token punctuation">)</span><span class="token function">TurnLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token function">TurnRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 当前可以看作随机转向，复杂情况下可能导致小车找不到可行路径</span><span class="token punctuation">&#125;</span></code></pre><p>运动逻辑：</p><p><img src="https://i.loli.net/2021/09/27/pFOxqZhGQ3ArHud.png" alt="避障模式运动逻辑" loading="lazy"></p><p><em>显然控制函数每 10ms 就可能被调用，这个流程图里就没有循环结构了。</em></p><p>不得不说这个运动逻辑很有问题。在这个逻辑下，小车遇到障碍时的转向算是随机的，但是在复杂情况下就可能使小车一会儿左转一会儿右转，最后转不出去。让小车始终转向一个方向会好些。</p><p>由于硬件限制，我装不上舵机，也装不上多个超声波模块，就只能做到让它避开正前方的障碍了。（连这一个超声波模块都要跟蓝牙模块抢 EXT 接口，换模式还得插拔……）</p><h4 id="跟随"><a href="#跟随" class="headerlink" title="跟随"></a>跟随</h4><p>说是跟随，其实就是和障碍物保持一定距离罢了。</p><p>模式初始化：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">// 跟随模式初始化</span><span class="token keyword">void</span> <span class="token function">ModeFollow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">EXTInit</span><span class="token punctuation">(</span>enumEXTUltraSonic<span class="token punctuation">)</span><span class="token punctuation">;</span>mode <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>该模式下的运动控制：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">/** * 显示距离数值，保持一定距离 * i 为距离值，单位是厘米 */</span><span class="token keyword">void</span> <span class="token function">Follow</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">Seg7Print</span><span class="token punctuation">(</span>speedLevel<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">,</span> i <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 显示速度等级、与障碍物间的距离</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>speedControl <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">-</span> speedLevel<span class="token punctuation">;</span><span class="token function">Forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>speedControl <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">-</span> speedLevel<span class="token punctuation">;</span><span class="token function">SetBeep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 距离值过小时蜂鸣器报警</span><span class="token function">Backward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">VStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>这个运动逻辑就简单了：</p><p><img src="https://i.loli.net/2021/09/27/u2kjTUFf97LInDW.png" alt="跟随模式运动逻辑" loading="lazy"></p><p>当然，“跟随”的目标也只限正前方。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>所以我得到了什么呢？一个有四种模式的三蹦子。甚好。最初的目标实现了，这下不会空虚寂寞了（笑）。这个设计也拿了院里竞赛的一等奖，爽到。</p><p>当然，这个三蹦子还有很多可以改进的地方，包括一些运动逻辑和硬件的改装等等……嗯，未来可期！</p><details><summary>一点负能量的东西……</summary>关于这门课的得分……自己把设计思路输出出去，还提供了一些技术指导，结果那个同学几乎完全复刻，缝合了他自己原本的设计，比我得分还高……多多少少会感觉心里不舒服……算了算了……</details>]]></content>
    
    
    <summary type="html">&lt;p&gt;你是否经常感到空虚寂寞、百无聊赖？你是否缺少陪伴、倍感不安、想要在这喧嚣的城市里寻找一份慰藉？&lt;/p&gt;
&lt;p&gt;毫无疑问，拥有属于自己的车、房可以在物质层面缓解这些焦虑（确信）。买房太难了，所以就先从车开始吧。&lt;/p&gt;
&lt;h2 id=&quot;三轮车也是车&quot;&gt;&lt;a href=&quot;#三轮车也是车&quot; class=&quot;headerlink&quot; title=&quot;三轮车也是车&quot;&gt;&lt;/a&gt;三轮车也是车&lt;/h2&gt;&lt;p&gt;打住，我要说的并不是这种车：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/09/26/ln7xH36LUbiZc9O.png&quot; alt=&quot;车1网图&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/09/26/GHQzW9Xd73DqvNF.png&quot; alt=&quot;车2网图&quot;&gt;&lt;/p&gt;
&lt;p&gt;或者这种车：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/09/26/E3CDyXLPTh5qFfS.png&quot; alt=&quot;蝙蝠车网图&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;废话，你以为我买得起？&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;而是这种：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/09/26/En4idsW7mopQIlw.png&quot; alt=&quot;三蹦子&quot;&gt;&lt;/p&gt;
&lt;p&gt;什么？这不行？气抖冷，难道三轮车就不是车？玩具车就不能给慰藉了？&lt;/p&gt;</summary>
    
    
    
    <category term="奇怪的知识增加了" scheme="https://afool.top/categories/%E5%A5%87%E6%80%AA%E7%9A%84%E7%9F%A5%E8%AF%86%E5%A2%9E%E5%8A%A0%E4%BA%86/"/>
    
    
    <category term="单片机" scheme="https://afool.top/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    <category term="小车" scheme="https://afool.top/tags/%E5%B0%8F%E8%BD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Java 中的多线程编程？</title>
    <link href="https://afool.top/learning/java-thread/"/>
    <id>https://afool.top/learning/java-thread/</id>
    <published>2021-09-19T06:25:17.000Z</published>
    <updated>2022-05-15T15:32:02.555Z</updated>
    
    <content type="html"><![CDATA[<h2 id="首先，什么是线程"><a href="#首先，什么是线程" class="headerlink" title="首先，什么是线程"></a>首先，什么是线程</h2><p>在讨论“线程”这个概念之前，我们有必要知道它到底是什么。这个词经常和”进程”一起出现，那么这两者有什么区别呢？</p><p>进程是对 CPU 活动的称呼，简单说来就是执行的程序。当然它肯定不止“程序”这么简单，一个完整的进程应该包括代码段（文本）、数据段、栈、堆等部分。</p><p>至于线程，《操作系统概念》是这样定义它的：</p><blockquote><p>线程是 CPU 使用的一个基本单元；它包括线程 ID、程序计数器、寄存器组和堆栈。</p></blockquote><p>基于这些，我给出个人的理解：如果说进程是操作系统层面的程序基本单位，那么线程更像是 CPU 执行任务的基本单位。<del>众所周知，</del>一个进程可以包含多个线程，拥有多个控制线程的进程可以同时执行多个任务。</p><p>打个比方，多线程的程序就像眼睛盯着屏幕手里还搓着手柄的你，单线程的程序就像要看一眼屏幕再看一眼手柄上的按键才能操作的你。<del>是不是很形象？</del></p><p><img src="https://i.loli.net/2021/09/19/URq8ot6VmZCfJrX.gif" alt="说的就是你" loading="lazy"></p><p><del>嘶~或许还有点并行和并发的意思？</del></p><h2 id="在-Java-中使用线程"><a href="#在-Java-中使用线程" class="headerlink" title="在 Java 中使用线程"></a>在 Java 中使用线程</h2><p>为什么需要多线程编程？这就很好理解了。如果一个程序要同时处理多个任务，不管这些任务是相似的还是完全不同的，有多个线程时效率一般都会比较高（嗯）。</p><p>在 Java 中使用多线程很简单，可以直接使用继承线程（Thread）类，也可以实现 Runnable 接口。就稍微讲一下使用线程类的方法好了。</p><p><code>Thread</code> 类的对象和其他对象一样具有属性和方法。</p><h3 id="启动线程"><a href="#启动线程" class="headerlink" title="启动线程"></a>启动线程</h3><p><code>Thread</code> 类中有一个 <code>run()</code> 方法，其子类需要实现这个方法。实例化线程，创建对象之后，调用 <code>start()</code> 方法才算是启动了线程。</p><p><em>直接调用 <code>run()</code> 方法和调用普通方法没有区别，不会启动新的线程。</em></p><h3 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h3><p>线程可以有如下几个状态：</p><ul><li>新建：实例化线程对象后，还未执行 <code>start()</code> 时；</li><li>就绪：调用  <code>start()</code> 后，处于就绪状态的线程等待调度；</li><li>运行：当线程获得 CPU 资源后就可以执行 <code>run()</code> 方法，此时线程就处于运行状态，处于运行状态的线程可能变为阻塞、就绪或死亡状态；</li><li>阻塞：线程失去所占用资源后进入阻塞状态，具体原因包括睡眠、等待以及同步锁被占用等等，重新获得资源后线程可以重新进入就绪状态；</li><li>死亡：线程执行完 <code>run()</code> 方法或者因其他原因终止时进入死亡状态，即结束。</li></ul><p>状态之间的转换构成了线程的生命周期。</p><h2 id="其他要讲的"><a href="#其他要讲的" class="headerlink" title="其他要讲的"></a>其他要讲的</h2><ul><li>在 Java 中，线程有优先级，取值范围从1到10，数值越大优先级越高，默认优先级是5；</li><li>多线程编程：线程间的同步、通信等内容……<del>先不写了，才不是因为懒。</del></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;首先，什么是线程&quot;&gt;&lt;a href=&quot;#首先，什么是线程&quot; class=&quot;headerlink&quot; title=&quot;首先，什么是线程&quot;&gt;&lt;/a&gt;首先，什么是线程&lt;/h2&gt;&lt;p&gt;在讨论“线程”这个概念之前，我们有必要知道它到底是什么。这个词经常和”进程”一起出现，那么这</summary>
      
    
    
    
    <category term="快去学习" scheme="https://afool.top/categories/%E5%BF%AB%E5%8E%BB%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://afool.top/tags/Java/"/>
    
    <category term="多线程" scheme="https://afool.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>如何实现一个 Array List</title>
    <link href="https://afool.top/learning/java-implement-array-list/"/>
    <id>https://afool.top/learning/java-implement-array-list/</id>
    <published>2021-08-16T06:37:32.000Z</published>
    <updated>2022-05-15T15:32:02.554Z</updated>
    
    <content type="html"><![CDATA[<p><code>ArrayList</code> 是一种常用的数据结构，经常被拿来和 <code>LinkedList</code> 等进行对比。跟单纯的数组比起来，<code>ArrayList</code> 拥有许多使用方便的方法<del>，可谓居家旅行摸鱼 coding 必备之利器</del>。</p><p><del>虽然还没有多少实战经验，</del>我们还是来尝试实现一个具有增删改查等基本功能的 <code>ArrayList</code> 吧。</p><p><img src="https://i.loli.net/2021/08/17/1f8iAd2xUr9BcNR.jpg" alt="菜狗" loading="lazy"></p><span id="more"></span><h2 id="MyList-接口"><a href="#MyList-接口" class="headerlink" title="MyList 接口"></a>MyList 接口</h2><p>不管是哪种类型的 <code>List</code> 一些基本的方法声明都是一样的，所以我们先定义一个 <code>MyList</code> 接口，提供一些方法的抽象。（万一之后还能再用呢？）</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ex081401</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token comment">/** *  * @return 返回列表当前的大小 */</span><span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 在列表末尾添加一个元素 * @param value 要添加的元素 */</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 将此列表与另一个列表合并 * @param list 要合并的列表 */</span><span class="token keyword">void</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">MyList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 把一个数组合并进列表 * @param list 要合并的数组 */</span><span class="token keyword">void</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 将一个元素插入列表的指定下标处 * @param index 要插入位置对应的下标 * @param value 被插入的元素 */</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 将指定下标处的元素删除 * @param index 要删除元素的下标 */</span><span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 将指定元素删除 * @param value 要删除的元素 */</span><span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">E</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 清除所有元素 */</span><span class="token keyword">void</span> <span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 获取指定下标处的元素 * @param index 目标元素的下标 * @return 获取到的元素对象 */</span><span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 获取指定元素的下标数组 * @param value 目标元素 * @return 获取到的元素下标数组 */</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">E</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 修改指定下标处的元素 * @param index 目标元素的下标 * @param value 修改后的元素 */</span><span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 修改指定元素 * @param target 目标元素 * @param value 修改后的元素 */</span><span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">E</span> target<span class="token punctuation">,</span> <span class="token class-name">E</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 将列表中的元素按 hashcode 排序 */</span><span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="MyArrayList"><a href="#MyArrayList" class="headerlink" title="MyArrayList"></a>MyArrayList</h2><p>有了接口，我们现在可以来实现一个 <code>ArrayList</code>。</p><p>顾名思义，<code>ArrayList</code> 就是应该用数组来存储数据。嗯，没错！</p><p>那我们给一个数组，顺便用几个数分别表示数组中元素个数和允许的最大最小长度。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">MyList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MIN_LENGTH <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_LENGTH <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>我们重新写一个构造方法，在创建 <code>MyArrayList</code> 的时候就做必要的初始化：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">MyArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span> arrLength<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>arrLength <span class="token operator">&lt;</span> MIN_LENGTH<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>arrLength <span class="token operator">=</span> MIN_LENGTH<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>arrLength<span class="token punctuation">]</span><span class="token punctuation">;</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>values <span class="token operator">=</span> newValues<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>在这里如果初始化时指定的数组长度太小或者是负数，我就直接把长度改成了允许的最小长度。其他情况下这个长度值不小于 <code>10</code> 且在 <code>int</code> 的范围内，可以直接用。<del>一般情况下应该不会用到那么长的<strong>数组</strong>吧……</del></p><p>既然要实现接口，就要把接口中的抽象方法都实现。最简单的一个，返回数组中的元素个数：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h3><p>添加单个元素：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> length <span class="token operator">=</span> values<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">>=</span> length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> newLength <span class="token operator">=</span> <span class="token punctuation">(</span>length <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> length<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>newLength <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>newLength <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>newLength<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>newValues<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>values <span class="token operator">=</span> newValues<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>values<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>显然，如果数组已经被放满了就必须扩容。新建一个长度为原数组长度1.5倍的数组，把原来的数组元素都放进去，更新长度再替换原来的数组。<code>if(newLength &lt; 0)</code> 这里是对新长度溢出的一个简单处理。</p><p>把两个队列合并：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">MyList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> aSize <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span><span class="token keyword">int</span> bSize <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> newSize <span class="token operator">=</span> aSize <span class="token operator">+</span> bSize<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>newSize <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>newSize <span class="token operator">=</span> MAX_LENGTH<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>newSize<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> aSize<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>newValues<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> aSize<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> newSize<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>newValues<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i <span class="token operator">-</span> aSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> newSize<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>values <span class="token operator">=</span> newValues<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>如果 <code>newSize &lt; 0</code> 就表示两个队列元素个数之和溢出，这里做了一个<del>不负责任的</del>处理：新的数组长度改成 <code>int</code> 的最大值，只把这个数组装满。这样会有一部分元素装不下。也可以输出提示信息并且做其他处理。</p><p>把队列和一个数组合并，和上一个方法类似：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> aSize <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span><span class="token keyword">int</span> bSize <span class="token operator">=</span> list<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">int</span> newSize <span class="token operator">=</span> aSize <span class="token operator">+</span> bSize<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>newSize <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>newSize <span class="token operator">=</span> MAX_LENGTH<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>newSize<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> aSize<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>newValues<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> aSize<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> newSize<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>newValues<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">[</span>i <span class="token operator">-</span> aSize<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> newSize<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>values <span class="token operator">=</span> newValues<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>在指定位置插入元素：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">>=</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"插入位置对应的的下标不在允许范围内。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">></span> index<span class="token punctuation">;</span> i <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> values<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>values<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>如果指定的位置有误就输出一条提示，不进行其他操作。</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除指定位置的元素：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">>=</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除位置对应的的下标不在允许范围内。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span>i <span class="token operator">&lt;</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> values<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>values<span class="token punctuation">[</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>size <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>如果指定的位置有误就输出一条提示，不进行其他操作。</p><p>删除指定元素：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">E</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">remove</span><span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>删除所有元素：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>values <span class="token operator">=</span> newValues<span class="token punctuation">;</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>查询指定位置的元素：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">>=</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span>values<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>查询指定元素的下标：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">E</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> index <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>index <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> index<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>index<span class="token punctuation">[</span>index<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> index<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>修改指定位置的元素：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"指定的下标太小。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">>=</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"指定的下标太大。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>values<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>指定的下标有误时根据大小输出一条提示，不做其他处理。</p><p>修改指定元素：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">E</span> target<span class="token punctuation">,</span> <span class="token class-name">E</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>根据对象元素的 <code>hashCode</code> 来排序：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> theSize <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hashCodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span>theSize<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> theSize<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>hashCodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">Object</span> tempObject<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> theSize<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> theSize <span class="token operator">-</span> i<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>hashCodes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> hashCodes<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>temp <span class="token operator">=</span> hashCodes<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>hashCodes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> hashCodes<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>hashCodes<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>tempObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>values<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>values<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>values<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>values<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tempObject<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>用了简单的冒泡排序，当然其他排序方法也可以。没有借助 <code>Map</code> 一类的结构，因为它们似乎都不支持重复的 <code>key</code>。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>不重写 <code>toString()</code> 的话直接输出队列只能看到一行对人来说十分抽象的东西，所以还是重写一下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> res <span class="token operator">=</span> <span class="token string">"["</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>res <span class="token operator">+=</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>res <span class="token operator">+=</span> <span class="token string">", "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>res <span class="token operator">+=</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>res <span class="token operator">+=</span> <span class="token string">"]"</span><span class="token punctuation">;</span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>简单验证一下各个方法的功能：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">MyArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"i = "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10个对象："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"10!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n添加1个对象："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n与自己合并："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token string">"214"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n与 &#123;“123”， “214”&#125; 合并："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n删除第2个对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"10!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n删除 “10!!” "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"One"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n在第2个位置插入 “One” "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"zero"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n把第1个改成 “zero” "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"zero"</span><span class="token punctuation">,</span> <span class="token string">"Zero"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n把 “zero” 改成 “Zero” "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"i = 2"</span><span class="token punctuation">,</span> <span class="token string">"Two"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n把 “i= 2” 改成 “Two” "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n输出第14个对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n输出 “Two” 的下标数组"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"Two"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n按 hash 值排序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n清空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果：</p><pre class="language-text" data-language="text"><code class="language-text">10个对象：10[i = 0, i = 1, i = 2, i = 3, i = 4, i = 5, i = 6, i = 7, i = 8, i = 9]添加1个对象：11[i = 0, i = 1, i = 2, i = 3, i = 4, i = 5, i = 6, i = 7, i = 8, i = 9, 10!!]与自己合并：22[i = 0, i = 1, i = 2, i = 3, i = 4, i = 5, i = 6, i = 7, i = 8, i = 9, 10!!, i = 0, i = 1, i = 2, i = 3, i = 4, i = 5, i = 6, i = 7, i = 8, i = 9, 10!!]与 &#123;“123”， “214”&#125; 合并：24[i = 0, i = 1, i = 2, i = 3, i = 4, i = 5, i = 6, i = 7, i = 8, i = 9, 10!!, i = 0, i = 1, i = 2, i = 3, i = 4, i = 5, i = 6, i = 7, i = 8, i = 9, 10!!, 123, 214]删除第2个对象23[i = 0, i = 2, i = 3, i = 4, i = 5, i = 6, i = 7, i = 8, i = 9, 10!!, i = 0, i = 1, i = 2, i = 3, i = 4, i = 5, i = 6, i = 7, i = 8, i = 9, 10!!, 123, 214]删除 “10!!” 21[i = 0, i = 2, i = 3, i = 4, i = 5, i = 6, i = 7, i = 8, i = 9, i = 0, i = 1, i = 2, i = 3, i = 4, i = 5, i = 6, i = 7, i = 8, i = 9, 123, 214]在第2个位置插入 “One” 22[i = 0, One, i = 2, i = 3, i = 4, i = 5, i = 6, i = 7, i = 8, i = 9, i = 0, i = 1, i = 2, i = 3, i = 4, i = 5, i = 6, i = 7, i = 8, i = 9, 123, 214]把第1个改成 “zero” 22[zero, One, i = 2, i = 3, i = 4, i = 5, i = 6, i = 7, i = 8, i = 9, i = 0, i = 1, i = 2, i = 3, i = 4, i = 5, i = 6, i = 7, i = 8, i = 9, 123, 214]把 “zero” 改成 “Zero” 22[Zero, One, i = 2, i = 3, i = 4, i = 5, i = 6, i = 7, i = 8, i = 9, i = 0, i = 1, i = 2, i = 3, i = 4, i = 5, i = 6, i = 7, i = 8, i = 9, 123, 214]把 “i= 2” 改成 “Two” 22[Zero, One, Two, i = 3, i = 4, i = 5, i = 6, i = 7, i = 8, i = 9, i = 0, i = 1, Two, i = 3, i = 4, i = 5, i = 6, i = 7, i = 8, i = 9, 123, 214]输出第14个对象i = 3输出 “Two” 的下标数组[2, 12]按 hash 值排序22[123, 214, One, Two, Two, Zero, i = 0, i = 1, i = 3, i = 3, i = 4, i = 4, i = 5, i = 5, i = 6, i = 6, i = 7, i = 7, i = 8, i = 8, i = 9, i = 9]清空0[]</code></pre><p><code>MyArrayList</code> 的功能基本正常，那就算成功了罢。一些地方可能还不够合理，不过能实现总是好的。</p><p><img src="https://i.loli.net/2021/08/17/h5LYZmp2adNPVv6.jpg" alt="一条咸鱼" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;ArrayList&lt;/code&gt; 是一种常用的数据结构，经常被拿来和 &lt;code&gt;LinkedList&lt;/code&gt; 等进行对比。跟单纯的数组比起来，&lt;code&gt;ArrayList&lt;/code&gt; 拥有许多使用方便的方法&lt;del&gt;，可谓居家旅行摸鱼 coding 必备之利器&lt;/del&gt;。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;虽然还没有多少实战经验，&lt;/del&gt;我们还是来尝试实现一个具有增删改查等基本功能的 &lt;code&gt;ArrayList&lt;/code&gt; 吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/08/17/1f8iAd2xUr9BcNR.jpg&quot; alt=&quot;菜狗&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="快去学习" scheme="https://afool.top/categories/%E5%BF%AB%E5%8E%BB%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://afool.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>对 Object 类的不完全解析</title>
    <link href="https://afool.top/learning/java-object-class/"/>
    <id>https://afool.top/learning/java-object-class/</id>
    <published>2021-08-13T06:42:55.000Z</published>
    <updated>2022-05-15T15:32:02.555Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Object-类是什么"><a href="#Object-类是什么" class="headerlink" title="Object 类是什么"></a>Object 类是什么</h2><p><del>众所周知，</del><code>Object</code> 是 Java 中所有类的父类。当我们定义类的时候如果没有指定这个类继承的父类，默认父类就是 <code>Object</code> 。所以</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> aClass <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span></code></pre><p>等价于</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> aClass <span class="token keyword">extends</span> <span class="token class-name">Object</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span></code></pre><h2 id="一些有用没用的东西"><a href="#一些有用没用的东西" class="headerlink" title="一些有用没用的东西"></a>一些有用没用的东西</h2><ul><li><code>Object</code> 是所有类的父类，那么我们可以把任何类型的对象赋给 <code>Object</code> 型的变量。</li></ul><h3 id="Object-的几个常用方法"><a href="#Object-的几个常用方法" class="headerlink" title="Object 的几个常用方法"></a>Object 的几个常用方法</h3><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h4><p><code>Object</code> 中 <code>toString</code> 方法如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"@"</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>显然，这个方法的返回值是一个字符串，字符串的内容很简单，是“一个对象的运行时类名@对象的十六进制散列码值”。这个字符串表示了对象的一些信息。</p><p>使用示例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ex081001</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TempObject</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Demo</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>demo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>demo<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果：</p><pre class="language-text" data-language="text"><code class="language-text">ex081001.Demo@27973e9bex081001.Demo@27973e9b</code></pre><p>可以看到在这种情况下直接输出 <code>demo</code> 和使用 <code>toString()</code> 方法再输出的结果是一样的，只要输出对象就会调用 <code>Object</code> 中的  <code>toString()</code> 方法。</p><p>当然，可以重写这个方法来取得对象的更多信息。例如：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ex081001</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Integer</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">"Name: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"\nAge: "</span> <span class="token operator">+</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Peter"</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Name</span><span class="token operator">:</span> <span class="token class-name">Peter</span><span class="token class-name">Age</span><span class="token operator">:</span> <span class="token number">33</span></code></pre><h4 id="hashCode-和-equals"><a href="#hashCode-和-equals" class="headerlink" title="hashCode() 和 equals()"></a>hashCode() 和 equals()</h4><p><code>hashCode()</code> 会给每个对象计算一个 hash 值，这个值在进行比较、查找的时候很有用。</p><p>需要注意：</p><ul><li>两个相同的对象的 hash 值一定相同。</li><li>两个不同的对象 hash 值也可能相同，可以使用双重散列等方法来减少这种情况带来的错误。</li></ul><p>至于 <code>equals()</code>，<del>从字面上看就能看出来</del>它是用来比较两个对象是否相同的，如果一个类没有重写这个方法，在调用它的时候就会自动调用 <code>Object</code> 中实现的方法：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>在 <code>Object</code> 中实现的 <code>equals()</code> 是直接把两个对象进行比较，看它们的内容是否相同。这样做非常简单并且容易理解，却会带来一个问题。</p><p>举个例子来说明这个问题：200等于200.0吗？</p><p><del>这么简单的问题？肯定有鬼，我选择不等于。</del></p><p>当然是等于（笑），但是看看下面这段代码：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ex081001</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Numbers</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token keyword">double</span> b <span class="token operator">=</span> <span class="token number">200.0</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> i <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token class-name">Double</span> d <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a == b: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i == d: "</span> <span class="token operator">+</span> i<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>让 <code>int</code> 型的 <code>200</code> 和 <code>double</code> 型的 <code>200.0</code> 作比较，结果当然是相等，那么把同样的值放到分别 <code>Integer</code> 和 <code>Double</code> 这两个包装类中也应该是一样的结果吧……</p><p>运行结果：</p><pre class="language-text" data-language="text"><code class="language-text">a == b: truei == d: false</code></pre><p>被打脸了，说好的200等于200.0，怎么放到包装类中变成对象就不一样了呢？问题的关键就在于这里其实是调用了 <code>Object</code> 中的 <code>equals()</code> ，直接把<code>double</code> 的 <code>b</code> 和 <code>Integer</code> 的 <code>i</code>进行比较，两个对象甚至都不是同一类，结果自然会是 <code>false</code>。</p><p>还有一种情况，像下面这样，我们假定名字和年龄相同的两个人就是同一个人：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ex081001</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Integer</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">"Name: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"\nAge: "</span> <span class="token operator">+</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Peter"</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Peter"</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p1:\n"</span> <span class="token operator">+</span> p1 <span class="token operator">+</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p2:\n"</span> <span class="token operator">+</span> p2 <span class="token operator">+</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p1.equals(p2): "</span> <span class="token operator">+</span> p1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果：</p><pre class="language-java" data-language="java"><code class="language-java">p<span class="token operator">:</span><span class="token class-name">Name</span><span class="token operator">:</span> <span class="token class-name">Peter</span><span class="token class-name">Age</span><span class="token operator">:</span> <span class="token number">33</span>p2<span class="token operator">:</span><span class="token class-name">Name</span><span class="token operator">:</span> <span class="token class-name">Peter</span><span class="token class-name">Age</span><span class="token operator">:</span> <span class="token number">33</span>p<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token boolean">false</span></code></pre><p>这就更奇怪了，两个同类的对象，属性也是一样的，<code>equals</code> 给出的结果还是 <code>false</code>。这是因为 <code>Object</code> 中的 <code>equals()</code> 用 <code>==</code> 来比较两个对象，其实是<strong>比较两个对象的内存地址</strong>。上面的 <code>p1</code> 和 <code>p2</code> 两个对象的地址当然是不同的，所以我们得到了这样的结果。</p><p>要解决我们遇到的这些问题，就要重写 <code>equals()</code>。</p><h5 id="数之间的比较"><a href="#数之间的比较" class="headerlink" title="数之间的比较"></a>数之间的比较</h5><p>对数进行比较的话我们可以先看看 <code>Java</code> 中的基本数据类型，这里不再细说。<code>Java</code> 中数形式的数据对应的包装类包括：</p><ul><li>Byte</li><li>Short</li><li>Integer</li><li>Long</li><li>Float</li><li>Double</li></ul><p>这些类都继承了 <code>Number</code>，所以在比较时可以让它们都转型成 <code>Number</code> 再比较。同时，为了不丢失精度，避免出现123等于123.1的情况，都用它们的 <code>doubleValue()</code> 来比较。像这样：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ex081001</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Numbers</span> <span class="token punctuation">&#123;</span><span class="token comment">//public static boolean equals(Object obj,Object anObj) &#123;</span><span class="token comment">//    if(obj == null || anObj == null) return false;</span><span class="token comment">//if(obj == anObj) return true;</span><span class="token comment">//if(obj instanceof Number &amp;&amp; anObj instanceof Number) &#123;</span><span class="token comment">//return ((Number)obj).doubleValue() == ((Number)anObj).doubleValue();</span><span class="token comment">//&#125;</span><span class="token comment">//return false;</span><span class="token comment">//    &#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Number</span> num<span class="token punctuation">,</span> <span class="token class-name">Number</span> anNum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> anNum <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> anNum<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">return</span> num<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> anNum<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Byte</span> b <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token class-name">Short</span> s <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token class-name">Long</span> l <span class="token operator">=</span> <span class="token number">123L</span><span class="token punctuation">;</span><span class="token class-name">Float</span> f <span class="token operator">=</span> <span class="token number">123.1f</span><span class="token punctuation">;</span><span class="token class-name">Double</span> d <span class="token operator">=</span> <span class="token number">123.0</span><span class="token punctuation">;</span><span class="token comment">//Byte one = 1;</span><span class="token comment">//Character charOne = '1';</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Byte "</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">" and Short "</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> <span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Byte "</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">" and Integer "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> <span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Byte "</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">" and Long "</span> <span class="token operator">+</span> l <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> <span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Byte "</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">" and Float "</span> <span class="token operator">+</span> f <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> <span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Byte "</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">" and Double "</span> <span class="token operator">+</span> d <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> <span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//System.out.println();</span><span class="token comment">//System.out.println("Byte " + one + " and Character " + charOne + ": " + equals(one, charOne));</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果：</p><pre class="language-text" data-language="text"><code class="language-text">Byte 123 and Short 123: trueByte 123 and Integer 123: trueByte 123 and Long 123: trueByte 123 and Float 123.1: falseByte 123 and Double 123.0: true</code></pre><p>现在123和123.0相等了。</p><h5 id="某一个类的对象之间的比较"><a href="#某一个类的对象之间的比较" class="headerlink" title="某一个类的对象之间的比较"></a>某一个类的对象之间的比较</h5><p>就用上面的 <code>Person</code> 类来举例说明。要想让 <code>equals()</code> 把两个属性相同的 <code>Person</code> 对象判断成相同的，可以重写成这样：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ex081001</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Integer</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">"Name: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"\nAge: "</span> <span class="token operator">+</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span>obj<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Peter"</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Peter"</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p1:\n"</span> <span class="token operator">+</span> p1 <span class="token operator">+</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p2:\n"</span> <span class="token operator">+</span> p2 <span class="token operator">+</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p1.equals(p2): "</span> <span class="token operator">+</span> p1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p2 在 table 中的 value: "</span> <span class="token operator">+</span> table<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果：</p><pre class="language-text" data-language="text"><code class="language-text">p1:Name: PeterAge: 33p2:Name: PeterAge: 33p1.equals(p2): truep2 在 table 中的 value: null</code></pre><p>虽然在直接比较的时候 <code>equals()</code> 返回了 <code>true</code>，但是我们把 <code>p1</code> 放到 <code>HashMap</code> 中，用和它相等的 <code>p2</code> 去查询 <code>value</code> 却找不到结果。<code>p1</code> 和 <code>p2</code> 明明是一样的，为什么会出现这种结果？按照我们的规定，<code>p1</code> 和 <code>p2</code>  既然是同一个人，最后应该能输出 <code>0</code> 才对。</p><p>问题的关键在于重写 <code>equals()</code> 的时候没有把 <code>hashCode()</code> 也进行重写。我们用 <code>equals()</code> 判断 <code>p1</code> 和 <code>p2</code> 确实是得到了想要的结果，但是 <code>HashMap</code> 是根据对象的 hash 值来判断有没有包含这个对象的，而在默认情况下，<code>hashCode()</code> 是将对象的存储地址进行映射，<code>p1</code> 和 <code>p2</code> 的地址不同，它们的 hash 值就不一样。正因如此，我们现在不能用 <code>p2</code> 获取 <code>p1</code> 在 <code>HashMap</code> 对应的 <code>value</code>。</p><p>如果想得到这个 <code>value</code> 值，只需要重写 <code>hashCode()</code>：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ex081001</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Integer</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">"Name: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"\nAge: "</span> <span class="token operator">+</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span>obj<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">41</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Peter"</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Peter"</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p1:\n"</span> <span class="token operator">+</span> p1 <span class="token operator">+</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p2:\n"</span> <span class="token operator">+</span> p2 <span class="token operator">+</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p1.equals(p2): "</span> <span class="token operator">+</span> p1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p2 在 table 中的 value: "</span> <span class="token operator">+</span> table<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果：</p><pre class="language-java" data-language="java"><code class="language-java">p1<span class="token operator">:</span><span class="token class-name">Name</span><span class="token operator">:</span> <span class="token class-name">Peter</span><span class="token class-name">Age</span><span class="token operator">:</span> <span class="token number">33</span>p2<span class="token operator">:</span><span class="token class-name">Name</span><span class="token operator">:</span> <span class="token class-name">Peter</span><span class="token class-name">Age</span><span class="token operator">:</span> <span class="token number">33</span>p1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token boolean">true</span>p2 在 table 中的 value<span class="token operator">:</span> <span class="token number">0</span></code></pre><p>现在用 <code>p2</code> 也能获取 <code>p1</code> 的 <code>value</code>，这意味着就算用 hash 值校验，<code>p1</code> 和 <code>p2</code> 也是相同的。换句话说，重写 <code>equals()</code> 时也要重写 <code>hashCode()</code>，这样才能保持逻辑上的一致。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Object-类是什么&quot;&gt;&lt;a href=&quot;#Object-类是什么&quot; class=&quot;headerlink&quot; title=&quot;Object 类是什么&quot;&gt;&lt;/a&gt;Object 类是什么&lt;/h2&gt;&lt;p&gt;&lt;del&gt;众所周知，&lt;/del&gt;&lt;code&gt;Object&lt;/code</summary>
      
    
    
    
    <category term="快去学习" scheme="https://afool.top/categories/%E5%BF%AB%E5%8E%BB%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://afool.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>java-interface</title>
    <link href="https://afool.top/learning/java-interface/"/>
    <id>https://afool.top/learning/java-interface/</id>
    <published>2021-08-06T05:44:25.000Z</published>
    <updated>2022-05-15T15:32:02.554Z</updated>
    
    <content type="html"><![CDATA[<h2 id="接口是什么"><a href="#接口是什么" class="headerlink" title="接口是什么"></a>接口是什么</h2><p><strong>Java接口</strong>是一系列方法的声明，是一些方法特征的集合，一个<strong>接口</strong>只有方法的特征没有方法的实现，这些方法可以在不同的地方被不同的类实现，而这些实现可以具有不同的行为。</p><p>从定义可以看出接口中的方法应该都是抽象方法，事实上接口中的方法会被隐式地指定为<code>public abstract</code>。</p><p>接口中可以有属性变量，但这些变量会被隐性地指定为<code>public static final</code>变量。</p><h3 id="接口与类"><a href="#接口与类" class="headerlink" title="接口与类"></a>接口与类</h3><p>从上面可以看出，接口与类最明显的区别在于接口的方法没有方法体，因此接口不能被实例化。除此之外，类之间不支持多继承，而接口之间可以多继承。</p><p>除了普通的类，还有一种类是抽象类。抽象类介于类和接口之间，其内部的方法可以有具体实现，成员变量类型不限。一个类只能继承一个抽象类，但可以实现多个接口。</p><blockquote><p>在 JDK 1.8 之后，接口中可以有静态方法和方法体，可以有实现了的默认方法（用default修饰）。</p></blockquote><h3 id="使用接口的基本格式"><a href="#使用接口的基本格式" class="headerlink" title="使用接口的基本格式"></a>使用接口的基本格式</h3><p>声明：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Name1</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Name2</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span></code></pre><p>实现：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ClassName</span> <span class="token keyword">implements</span> <span class="token class-name">Name1</span><span class="token punctuation">,</span> <span class="token class-name">Name2</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">// 需要实现接口的所有抽象方法</span><span class="token punctuation">&#125;</span></code></pre><h2 id="为什么要使用接口"><a href="#为什么要使用接口" class="headerlink" title="为什么要使用接口"></a>为什么要使用接口</h2><p>关于这个问题，动动小手在网上搜一下就可以得到从各种角度阐述的答案。总的来说，接口的意义在于它的<strong>抽象性</strong>。借助接口可以实现调用与实现解耦，增强系统灵活性，也使得各个层次能够同时开发。</p><p>举个例子，我们用代码来描述乐器。乐器当然是可以用来演奏的，但是具体到各种乐器，它们的演奏方法又不一样，如果在一个乐器的类中写下所有的演奏方法未免显得太过臃肿，对每个实例判断乐器类型选择方法也会很麻烦。在这种情况下，就可以将乐器写成接口，只提供演奏的抽象方法，方法的实现就交给具体的类。就像这样：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Instruments</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Wind</span> <span class="token keyword">implements</span> <span class="token class-name">Instruments</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Wind:Play"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Stringed</span> <span class="token keyword">implements</span> <span class="token class-name">Instruments</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Stringed:Play"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><h2 id="使用接口的实例"><a href="#使用接口的实例" class="headerlink" title="使用接口的实例"></a>使用接口的实例</h2><p>用代码来表示乐队的一些行为。</p><p>首先定义乐器和歌手的接口，有一些简单的方法：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// Instruments.java</span><span class="token keyword">package</span> <span class="token namespace">band</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Instruments</span> <span class="token punctuation">&#123;</span><span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": ready."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// Singers.java</span><span class="token keyword">package</span> <span class="token namespace">band</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Singers</span> <span class="token punctuation">&#123;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Say \"Hello!\"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这里<code>Instruments</code>中有一个默认方法，<code>Singers</code>中有一个静态方法。</p><p>乐器的实现：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// Guitar.java</span><span class="token keyword">package</span> <span class="token namespace">band</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Guitar</span> <span class="token keyword">implements</span> <span class="token class-name">Instruments</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Playing guitar~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// Bass.java</span><span class="token keyword">package</span> <span class="token namespace">band</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bass</span> <span class="token keyword">implements</span> <span class="token class-name">Instruments</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Playing bass~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// Drums.java</span><span class="token keyword">package</span> <span class="token namespace">band</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Drums</span> <span class="token keyword">implements</span> <span class="token class-name">Instruments</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Playing drums~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// Keyboard.java</span><span class="token keyword">package</span> <span class="token namespace">band</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Keyboard</span> <span class="token keyword">implements</span> <span class="token class-name">Instruments</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Playing keyboard~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>可以发现接口中的默认方法就不用另写实现了。</p><p>歌手的实现：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// Solo.java</span><span class="token keyword">package</span> <span class="token namespace">band</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solo</span> <span class="token keyword">implements</span> <span class="token class-name">Singers</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Solo singer: start."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>有了上面这些定义和实现，我们就可以简单地描述一支乐队的行为：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// Band.java</span><span class="token keyword">package</span> <span class="token namespace">band</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Band</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">Instruments</span><span class="token punctuation">[</span><span class="token punctuation">]</span> insts<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Singers</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sings<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Band</span><span class="token punctuation">(</span><span class="token class-name">Instruments</span><span class="token punctuation">[</span><span class="token punctuation">]</span> i<span class="token punctuation">,</span> <span class="token class-name">Singers</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>insts <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>sings <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 直接通过接口名调用静态方法</span><span class="token class-name">Singers</span><span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 调用接口中已经实现的默认方法</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Instruments</span> i <span class="token operator">:</span> insts<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>i<span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Instruments</span> i <span class="token operator">:</span> insts<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>i<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Singers</span> s <span class="token operator">:</span> sings<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>s<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Instruments</span><span class="token punctuation">[</span><span class="token punctuation">]</span> i <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Guitar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Bass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Drums</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Keyboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Singers</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Solo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">Band</span> newBand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Band</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>newBand<span class="token punctuation">.</span><span class="token function">getReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>newBand<span class="token punctuation">.</span><span class="token function">startPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>乐队的成员包括一些乐器<del>乐手们对不起</del>和歌手，这里定义乐队的行为：准备和开始演奏。程序的运行结果如下：</p><pre class="language-text" data-language="text"><code class="language-text">Say "Hello!".band.Guitar: ready.band.Bass: ready.band.Drums: ready.band.Keyboard: ready.Playing guitar~Playing bass~Playing drums~Playing keyboard~Solo singer: start.</code></pre><p>嗯嗯，就是这样。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;接口是什么&quot;&gt;&lt;a href=&quot;#接口是什么&quot; class=&quot;headerlink&quot; title=&quot;接口是什么&quot;&gt;&lt;/a&gt;接口是什么&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Java接口&lt;/strong&gt;是一系列方法的声明，是一些方法特征的集合，一个&lt;strong&gt;接口&lt;/</summary>
      
    
    
    
    <category term="快去学习" scheme="https://afool.top/categories/%E5%BF%AB%E5%8E%BB%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://afool.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>有关Java中类继承的二三事</title>
    <link href="https://afool.top/learning/java-inheritance/"/>
    <id>https://afool.top/learning/java-inheritance/</id>
    <published>2021-08-04T09:00:21.000Z</published>
    <updated>2022-05-15T15:32:02.554Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不问不知道，一问才发现之前学得实在太水，好多东西都没怎么搞明白。</p></blockquote><h2 id="继承是什么"><a href="#继承是什么" class="headerlink" title="继承是什么"></a>继承是什么</h2><p>继承是面向对象的三个基本特征之一，它使得子类具有父类的属性和方法或者重新定义、追加属性和方法等。</p><span id="more"></span><p>Java 不支持多继承。</p><h3 id="类继承的格式"><a href="#类继承的格式" class="headerlink" title="类继承的格式"></a>类继承的格式</h3><p>在 Java 中类继承的一般格式如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> 父类 <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> 子类 <span class="token keyword">extends</span> 父类 <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span></code></pre><p>实现接口时使用<code>implements</code>关键字，可以变相实现多继承：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">B</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">implements</span> <span class="token class-name">A</span><span class="token punctuation">,</span><span class="token class-name">B</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span></code></pre><h2 id="为什么要继承"><a href="#为什么要继承" class="headerlink" title="为什么要继承"></a>为什么要继承</h2><p>这里我们用一个例子来说明。</p><p>假设要开发学生类，学生分别有大学生、中学生和小学生，属性都包括姓名、ID 和年龄，都有一个考试方法。如果不利用继承，就可能需要写这样的代码：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 大学生</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UniStudent</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">UniStudent</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        name <span class="token operator">=</span> n<span class="token punctuation">;</span>        id <span class="token operator">=</span> i<span class="token punctuation">;</span>        age <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"考试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 中学生</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MidStudent</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MidStudent</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        name <span class="token operator">=</span> n<span class="token punctuation">;</span>        id <span class="token operator">=</span> i<span class="token punctuation">;</span>        age <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"考试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 小学生</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PriStudent</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">PriStudent</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        name <span class="token operator">=</span> n<span class="token punctuation">;</span>        id <span class="token operator">=</span> i<span class="token punctuation">;</span>        age <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"考试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>很容易看出来上面的代码存在很多重复的地方，而且要修改的时候也会很麻烦。要解决这些问题就要用到继承：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 学生父类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        name <span class="token operator">=</span> n<span class="token punctuation">;</span>        id <span class="token operator">=</span> i<span class="token punctuation">;</span>        age <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"考试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 大学生</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UniStudent</span> <span class="token keyword">extends</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">UniStudent</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 中学生</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MidStudent</span> <span class="token keyword">extends</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">MidStudent</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 小学生</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PriStudent</span> <span class="token keyword">extends</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">PriStudent</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>把相同的部分放到父类，这样就减少了重复的代码，也就是提高了<strong>复用性</strong>。同时，继承也使类的等级层次更加清晰。</p><h2 id="继承的特性"><a href="#继承的特性" class="headerlink" title="继承的特性"></a>继承的特性</h2><h3 id="子类继承了父类的哪些东西"><a href="#子类继承了父类的哪些东西" class="headerlink" title="子类继承了父类的哪些东西"></a>子类继承了父类的哪些东西</h3><blockquote><p>这题我知道，非私有的！</p><p>（其实并不是，子类继承了父类所有的属性与方法。）</p></blockquote><p>比方说，我们知道子类不能直接调用父类私有的属性和方法，那么到底有没有继承呢？还是通过例子来说明：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"考试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">UniStudent</span> <span class="token keyword">extends</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ID:"</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>这样当然是不可以的，就好像<code>UniStudent</code>没有<code>id</code>这个属性一样。</p><p>但是如果是这样：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"考试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setID</span><span class="token punctuation">(</span><span class="token keyword">int</span> myID<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> myID<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">UniStudent</span> <span class="token keyword">extends</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ID:"</span> <span class="token operator">+</span> <span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>显然<code>UniStudent</code>也可以获取<code>id</code>并且在屏幕上打印出来。所以尽管<code>id</code>是<code>Student</code>私有的，<code>UniStudent</code>还是能够继承它，只是不能直接调用，需要借助构造方法和不受访问权限限制的其他方法。</p><p>既然子类继承了父类所有的属性与方法，那么新的问题就出现了：</p><h3 id="子类和子类对象可以调用继承到的哪些属性与方法"><a href="#子类和子类对象可以调用继承到的哪些属性与方法" class="headerlink" title="子类和子类对象可以调用继承到的哪些属性与方法"></a>子类和子类对象可以调用继承到的哪些属性与方法</h3><p>子类能够调用的属性和方法与访问权限修饰符有关。</p><table><thead><tr><th>作用域</th><th>当前类</th><th>同一包中</th><th>其他包的子类</th><th>其他包非子类</th></tr></thead><tbody><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>default</td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><h2 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h2><p>子类可以对父类允许访问的方法进行重新编写，根据需要实现父类的方法。</p><p>重写后的方法被子类优先调用，可以使用<code>super</code>关键字调用父类中被重写的方法。</p><p>举例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"考试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">UniStudent</span> <span class="token keyword">extends</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大学生考试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Manage</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UniStudent</span> unistu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UniStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu<span class="token punctuation">.</span><span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        unistu<span class="token punctuation">.</span><span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果：</p><pre class="language-text" data-language="text"><code class="language-text">考试考试大学生考试</code></pre><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>一般情况下重写方法时除了方法体之外的其他部分都应该与父类的方法一致，但情况不总是这样。</p><p>在重写方法时，参数列表必须保持一致，但是访问权限修饰符和返回值类型可以修改。</p><ul><li>返回值类型可以不同，但必须是父类对应方法返回值的派生类。</li><li>访问权限不能比父类中对应方法的访问权限更低。比如父类中的<code>public</code>方法，在子类中重写该方法时就不能声明为<code>protected</code>。</li></ul><h2 id="转型"><a href="#转型" class="headerlink" title="转型"></a>转型</h2><p>简单来说，就是父类引用指向子类对象。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Father</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h3><p>例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"考试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">UniStudent</span> <span class="token keyword">extends</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大学生考试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Manage</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Student</span> unistu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UniStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 向上转型，大学生是学生</span>        stu<span class="token punctuation">.</span><span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        unistu<span class="token punctuation">.</span><span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>在这里，<code>Student unistu = new UniStudent();</code>就是向上转型，不需要强制转型。</p><h3 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Father</span> f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 向上转型</span><span class="token class-name">Son</span> s2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Son</span><span class="token punctuation">)</span>f2<span class="token punctuation">;</span> <span class="token comment">// 向下转型，需要强制转型</span></code></pre><p>因为这里的<code>f2</code>实际上指向的是子类的对象，向下转型不会出错。</p><p>如果是这样：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Father</span> f3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Son</span> s3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Son</span><span class="token punctuation">)</span>f3<span class="token punctuation">;</span> <span class="token comment">// 编译不会出错但运行时会出错</span></code></pre><p>会出现运行时错误。</p><p>向下转型时要注意对象原本是什么类型的实例。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;不问不知道，一问才发现之前学得实在太水，好多东西都没怎么搞明白。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;继承是什么&quot;&gt;&lt;a href=&quot;#继承是什么&quot; class=&quot;headerlink&quot; title=&quot;继承是什么&quot;&gt;&lt;/a&gt;继承是什么&lt;/h2&gt;&lt;p&gt;继承是面向对象的三个基本特征之一，它使得子类具有父类的属性和方法或者重新定义、追加属性和方法等。&lt;/p&gt;</summary>
    
    
    
    <category term="快去学习" scheme="https://afool.top/categories/%E5%BF%AB%E5%8E%BB%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://afool.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>用单片机蜂鸣器播放音乐</title>
    <link href="https://afool.top/learning/stc-beep-music/"/>
    <id>https://afool.top/learning/stc-beep-music/</id>
    <published>2021-07-12T09:28:11.000Z</published>
    <updated>2022-05-15T15:32:02.556Z</updated>
    
    <content type="html"><![CDATA[<h2 id="这是怎么一回事"><a href="#这是怎么一回事" class="headerlink" title="这是怎么一回事"></a>这是怎么一回事</h2><p>是的，我又来水了。</p><p>话说回来，虽然暑假开始已经将近两周了，但是我们并没有回家。为什么呢？</p><p>你可知道这世上有一物唤作“小学期”吗？</p><p><img src="https://i.loli.net/2021/07/13/Kz3emPhy7xDvNMu.jpg" alt="滑稽" loading="lazy"></p><p>每年暑假，我们学院大二的学生都会被拉到工训中心愉悦地学习课程，其名为——焊板子！<del>（学会了，明天就进电子厂。）</del></p><p><img src="https://i.loli.net/2021/07/13/YqjBUElkJ2VW8DX.jpg" alt="板子成品" loading="lazy"></p><p>好吧，其实正式名称应该是电子系统设计与创新基础训练，上面说的算是实训的一部分。在焊板子之外，我们要做的事情是通过学习各种案例理解其中的原理，最终自己编程实现想要的功能。</p><p>老师给我们提供了很多案例，不过根据观察，大家玩得最 High 的还是电子音乐，就是让蜂鸣器按指定的曲调发出声音。<del>（电子系统设计？不，是 8-bit 音乐大赏。）</del></p><span id="more"></span><h2 id="蜂鸣器电子音乐"><a href="#蜂鸣器电子音乐" class="headerlink" title="蜂鸣器电子音乐"></a>蜂鸣器电子音乐</h2><p>电子音乐的案例代码如下，感谢我校老师：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">/**********************myMusic 音乐播放型号:IAP15F2K60S2 主频:12MHz************************/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;STC15F2K60S2.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">uint</span> <span class="token expression"><span class="token keyword">unsigned</span> <span class="token keyword">int</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">uchar</span> <span class="token expression"><span class="token keyword">unsigned</span> <span class="token keyword">char</span></span></span><span class="token comment">/*---------引脚别名定义---------*/</span>sbit sbtBeep <span class="token operator">=</span> P3 <span class="token operator">^</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token comment">//蜂鸣器</span><span class="token comment">/*---------变量定义---------*/</span>uchar ucTimerH<span class="token punctuation">,</span> ucTimerL<span class="token punctuation">;</span>   <span class="token comment">//定义定时器的重装值</span>uchar code arrMusic<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span>     <span class="token comment">//音乐代码，歌曲为《同一首歌》，格式为: 音符, 节拍</span><span class="token punctuation">&#123;</span><span class="token comment">//音符的十位代表是低中高八度，1代表高八度，2代表中八度，3代表高八度</span><span class="token comment">//个位代表简谱的音符，例如0x15代表低八度的S0，0x21代表中八度的DO。</span><span class="token comment">//节拍则是代表音长，例如：0x10代表一拍，0x20代表两拍，0x08代表1/2拍</span><span class="token number">0x15</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x16</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x15</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x31</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x27</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x26</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x26</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x26</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x27</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x26</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x26</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x17</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x17</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x16</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x15</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x16</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>uchar code arrMusicToTimerNum<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span>  <span class="token punctuation">&#123;</span>    <span class="token comment">//此数组数据为各个音符在定时器中的重装值，第一列是高位，第二列是低位</span>    <span class="token number">0xf8</span><span class="token punctuation">,</span> <span class="token number">0x8c</span><span class="token punctuation">,</span>   <span class="token comment">//低八度，低1</span>    <span class="token number">0xf9</span><span class="token punctuation">,</span> <span class="token number">0x5b</span><span class="token punctuation">,</span>    <span class="token number">0xfa</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">,</span>   <span class="token comment">//低3</span>    <span class="token number">0xfa</span><span class="token punctuation">,</span> <span class="token number">0x67</span><span class="token punctuation">,</span>    <span class="token number">0xfb</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span>   <span class="token comment">//低5</span>    <span class="token number">0xfb</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span>    <span class="token number">0xfc</span><span class="token punctuation">,</span> <span class="token number">0x0c</span><span class="token punctuation">,</span>   <span class="token comment">//低7</span>    <span class="token number">0xfc</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span>   <span class="token comment">//中央C调</span>    <span class="token number">0xfc</span><span class="token punctuation">,</span> <span class="token number">0xac</span><span class="token punctuation">,</span>   <span class="token comment">//中2</span>    <span class="token number">0xfd</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span>    <span class="token number">0xfd</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span>   <span class="token comment">//中4</span>    <span class="token number">0xfd</span><span class="token punctuation">,</span> <span class="token number">0x82</span><span class="token punctuation">,</span>    <span class="token number">0xfd</span><span class="token punctuation">,</span> <span class="token number">0xc8</span><span class="token punctuation">,</span>   <span class="token comment">//中6</span>    <span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span>    <span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span>   <span class="token comment">//高八度，高1</span>    <span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span>    <span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0x6e</span><span class="token punctuation">,</span>   <span class="token comment">//高3</span>    <span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0x9a</span><span class="token punctuation">,</span>    <span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0xc1</span><span class="token punctuation">,</span>   <span class="token comment">//高5</span>    <span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0xe4</span><span class="token punctuation">,</span>    <span class="token number">0xff</span><span class="token punctuation">,</span> <span class="token number">0x03</span>    <span class="token comment">//高7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/*---------延时子函数---------*/</span><span class="token keyword">void</span> <span class="token function">DelayMs</span><span class="token punctuation">(</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> xms <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    uint i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> i <span class="token operator">=</span> xms<span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">124</span><span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*---------取址子函数---------*/</span><span class="token comment">//取出tem音符在arrMusicToTimerNum数组中的位置值</span>uchar <span class="token function">GetPosition</span><span class="token punctuation">(</span> uchar tem <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    uchar ucBase<span class="token punctuation">,</span> ucOffset<span class="token punctuation">,</span> ucPosition<span class="token punctuation">;</span>     <span class="token comment">//定义曲调，音符和位置</span>    ucBase <span class="token operator">=</span> tem <span class="token operator">/</span> <span class="token number">16</span><span class="token punctuation">;</span>            <span class="token comment">//高4位是曲调值,基址</span>    ucOffset <span class="token operator">=</span> tem <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">;</span>          <span class="token comment">//低4位是音符，偏移量</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> ucBase <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>              <span class="token comment">//当曲调值为1时，即是低八度，基址为0</span>        ucBase <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> ucBase <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">)</span>          <span class="token comment">//当曲调值为2时，即是中八度，基址为14</span>        ucBase <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> ucBase <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">)</span>          <span class="token comment">//当曲调值为3时，即是高八度，基址为28</span>        ucBase <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">;</span>    <span class="token comment">//通过基址加上偏移量，即可定位此音符在arrMusicToTimerNum数组中的位置</span>    ucPosition <span class="token operator">=</span> ucBase <span class="token operator">+</span> <span class="token punctuation">(</span> ucOffset <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> ucPosition<span class="token punctuation">;</span>            <span class="token comment">//返回这一个位置值</span><span class="token punctuation">&#125;</span><span class="token comment">/*---------播放音乐功能函数---------*/</span><span class="token keyword">void</span> <span class="token function">PlayMusic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    uchar ucNoteTmp<span class="token punctuation">,</span> ucRhythmTmp<span class="token punctuation">,</span> tem<span class="token punctuation">;</span> <span class="token comment">// ucNoteTmp为音符，ucRhythmTmp为节拍</span>    uchar i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        ucNoteTmp <span class="token operator">=</span> arrMusic<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//如果碰到结束符,延时1秒,回到开始再来一遍</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> ucNoteTmp <span class="token operator">==</span> <span class="token number">0x00</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token function">DelayMs</span><span class="token punctuation">(</span> <span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> ucNoteTmp <span class="token operator">==</span> <span class="token number">0xff</span> <span class="token punctuation">)</span>  <span class="token comment">//若碰到休止符,延时100ms,继续取下一音符</span>        <span class="token punctuation">&#123;</span>            i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token function">DelayMs</span><span class="token punctuation">(</span> <span class="token number">100</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            TR0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>                     <span class="token comment">//正常情况下取音符和节拍</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//取出当前音符在arrMusicToTimerNum数组中的位置值</span>            tem <span class="token operator">=</span> <span class="token function">GetPosition</span><span class="token punctuation">(</span> arrMusic<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">//把音符相应的计时器重装载值赋予ucTimerH和ucTimerL</span>            ucTimerH <span class="token operator">=</span> arrMusicToTimerNum<span class="token punctuation">[</span>tem<span class="token punctuation">]</span><span class="token punctuation">;</span>              ucTimerL <span class="token operator">=</span> arrMusicToTimerNum<span class="token punctuation">[</span>tem <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            TH0 <span class="token operator">=</span> ucTimerH<span class="token punctuation">;</span>           <span class="token comment">//把ucTimerH和ucTimerL赋予计时器</span>            TL0 <span class="token operator">=</span> ucTimerL<span class="token punctuation">;</span>            ucRhythmTmp <span class="token operator">=</span> arrMusic<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">//取得节拍</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        TR0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                          <span class="token comment">//开定时器1</span>        <span class="token function">DelayMs</span><span class="token punctuation">(</span> ucRhythmTmp <span class="token operator">*</span> <span class="token number">180</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//等待节拍完成, 通过P3^4口输出音频</span>        TR0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                          <span class="token comment">//关定时器1</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*---------初始化子函数---------*/</span><span class="token comment">//功能是配置IO口</span><span class="token keyword">void</span> <span class="token function">InitSys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    P0M0 <span class="token operator">=</span> <span class="token number">0xff</span><span class="token punctuation">;</span>    P0M1 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>    P2M0 <span class="token operator">=</span> <span class="token number">0x08</span><span class="token punctuation">;</span>    P2M1 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>    P3M0 <span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span>    P3M1 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>    P4M0 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>    P4M1 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>    P5M0 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>    P5M1 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*---------定时器0初始化子函数---------*/</span><span class="token keyword">void</span> <span class="token function">InitT0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    TMOD <span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>    TH0 <span class="token operator">=</span> <span class="token number">0xD8</span><span class="token punctuation">;</span>    TL0 <span class="token operator">=</span> <span class="token number">0xEF</span><span class="token punctuation">;</span>    EA <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    ET0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    TR0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*---------主函数---------*/</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">InitSys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">InitT0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    P0 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>    <span class="token function">PlayMusic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*---------定时器0中断处理函数---------*/</span><span class="token comment">//重新装值，并把sbtBeep值取反，产生方波</span><span class="token keyword">void</span> <span class="token function">T0_Process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">1</span>                     <span class="token comment">//计时器控制频率</span><span class="token punctuation">&#123;</span>    TH0 <span class="token operator">=</span> ucTimerH<span class="token punctuation">;</span>    TL0 <span class="token operator">=</span> ucTimerL<span class="token punctuation">;</span>    sbtBeep <span class="token operator">=</span> <span class="token operator">~</span>sbtBeep<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>头文件的内容就不贴了，主要是跟寄存器有关的。电子音乐工程有好几个版本，包括可以切换内容的、可以震动感应的，甚至还有可以显示歌词的……但是我现在要说的只需要用到上面这个（不要把偷懒说得这么堂而皇之啊喂）。</p><h2 id="问题以及修改"><a href="#问题以及修改" class="headerlink" title="问题以及修改"></a>问题以及修改</h2><p>上面这个程序是让蜂鸣器以《同一首歌》的旋律发出声音，以“做中学”为准则的我院学生怎么能只听它唱呢？<del>最起码换成咱们的曲子。</del></p><p>于是问题就出现了，当我们把自己选的曲子按格式写进去、构建程序并且下载之后，播放出来却很明显比预想的节奏快很多，而且时不时会有很怪的调调出现。除此之外，休止符的效果也不能让我们满意。</p><h3 id="音高"><a href="#音高" class="headerlink" title="音高"></a>音高</h3><p>经过几次试验，我们发现音高的问题主要出现在高音3，这个音不对劲。那么怎么修改呢？</p><p>根据原理说明和源代码，程序指定音高的时候是根据写入的音乐代码重定位到音符在定时器中的重装值。这个重装值又是什么？</p><p><img src="https://i.loli.net/2021/07/13/ug95cZrwiSLT4dU.jpg" alt="简谱码" loading="lazy"></p><p>这是课程网站给出的一张图。经过进制转换可以发现图中的简谱码就是前面所说的重装值。这样一来就好办了，老师给出的工程文件中高音3的重装值是<code>0xfe, 0x6e</code>，就是<code>0xff6e</code>，而高音3的简谱码<code>65157</code>转换成16进制应该是<code>0xfe85</code>，把重装值改成<code>0xfe, 0x85</code>就好了。</p><p>同理，也可以用这种方式校准其它音，只要有简谱码，甚至可以实现半音和不在这个表格中的音。表格给出了一部分，不在这一部分的可以通过如下公式来计算：</p><blockquote><p><a href="https://zhidao.baidu.com/question/73525053.html">百度知道</a></p><p>N&#x3D;Fi÷2÷Fr</p><p>N：计数值</p><p>Fi：内部计时频率12MHz，应该和硬件有关</p><p>Fr：要产生的频率</p><p>T&#x3D;65536-N&#x3D;65536-Fi÷2÷Fr </p></blockquote><p>T值就是我们需要的简谱码，转换成16进制就可以在程序中使用了。</p><h3 id="节拍"><a href="#节拍" class="headerlink" title="节拍"></a>节拍</h3><p>音高的问题解决了，下面是节拍。源代码是这样写的：</p><pre class="language-c" data-language="c"><code class="language-c">TR0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                          <span class="token comment">//开定时器1</span><span class="token function">DelayMs</span><span class="token punctuation">(</span> ucRhythmTmp <span class="token operator">*</span> <span class="token number">180</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//等待节拍完成, 通过P3^4口输出音频</span>TR0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                          <span class="token comment">//关定时器1</span></code></pre><p>其实节拍应该不算是个问题，因为不同歌曲的速度也会不同。经过试验（主要是听，毕竟不懂），我自己用的大部分歌曲改成这样会比较好：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token function">DelayMs</span><span class="token punctuation">(</span> ucRhythmTmp <span class="token operator">*</span> <span class="token number">360</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>不过具体写多少还是取决于目标音乐的速度。</p><h3 id="休止符"><a href="#休止符" class="headerlink" title="休止符"></a>休止符</h3><p>至于休止符，我在音符的重装值最后加上了<code>0xff,0xff</code>，只要当前音符是<code>0xn0</code>（n 不为0，因为<code>0x00</code>表示播放结束，回到开头），就让程序把重装值定位到42的位置（前面3个八度需要42个16进制数，从第0到第41），这样获取的重装值的高低位相等（其它的重装值还没有高低位相等的），直接关掉定时器再等待节拍，蜂鸣器在休止期间就不会发声。</p><pre class="language-c" data-language="c"><code class="language-c">TR0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                       <span class="token comment">// 开定时器1</span><span class="token keyword">if</span><span class="token punctuation">(</span> ucTimerH <span class="token operator">==</span> ucTimerL <span class="token punctuation">)</span>     <span class="token comment">// 是休止符直接关掉定时器</span>    TR0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">DelayMs</span><span class="token punctuation">(</span> parameter <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 等待节拍完成</span>TR0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                       <span class="token comment">// 关定时器1</span></code></pre><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>我还加上了根据音符来点亮不同数量 LED 灯的功能，实现了按键控制暂停和继续播放，<del>其实就是把其他案例复制粘贴。</del>除此之外，我把<code>PlayMusic</code>函数中<code>i</code>的类型从<code>uchar</code>改成<code>uint</code>来支持更长的音乐。</p><p>好像没什么技术力的说……</p><h2 id="让蜂鸣器唱起《国际歌》"><a href="#让蜂鸣器唱起《国际歌》" class="headerlink" title="让蜂鸣器唱起《国际歌》"></a>让蜂鸣器唱起《国际歌》</h2><p>上视频：</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="////player.bilibili.com/player.html?aid=461634310&bvid=BV16L411W7Ay&cid=370583013&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;" ></iframe></div><p>修改后的代码，没有定义半音：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">/**********************myMusic 音乐播放型号:IAP15F2K60S2 主频:12MHz************************/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;STC15F2K60S2.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">uint</span> <span class="token expression"><span class="token keyword">unsigned</span> <span class="token keyword">int</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">uchar</span> <span class="token expression"><span class="token keyword">unsigned</span> <span class="token keyword">char</span></span></span><span class="token comment">/*---------引脚别名定义---------*/</span>sbit sbtBeep <span class="token operator">=</span> P3 <span class="token operator">^</span> <span class="token number">4</span><span class="token punctuation">;</span>   <span class="token comment">// 蜂鸣器</span>sbit key1 <span class="token operator">=</span> P3 <span class="token operator">^</span> <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token comment">// 按键1</span>sbit sbtLedSel <span class="token operator">=</span> P2 <span class="token operator">^</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 数码管与 LED 灯切换引脚</span><span class="token comment">/*---------变量定义---------*/</span>uchar code arrLed<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0x0f</span><span class="token punctuation">,</span> <span class="token number">0x1f</span><span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token number">0x7f</span><span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// LED 值</span>uchar ucTimerH<span class="token punctuation">,</span> ucTimerL<span class="token punctuation">;</span>                                                     <span class="token comment">// 定义定时器的重装值</span>bit flag<span class="token punctuation">;</span>                                                                     <span class="token comment">// 标志位，暂停或播放</span>uchar code arrMusic<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span>                                                       <span class="token comment">// 音乐代码，格式为: 音符, 节拍</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 音符的十位代表是低中高八度，1代表高八度，2代表中八度，3代表高八度</span>        <span class="token comment">// 个位代表简谱的音符，例如0x15代表低八度的S0，0x21代表中八度的DO。</span>        <span class="token comment">// 节拍则是代表音长，例如：0x10代表一拍，0x20代表两拍，0x08代表1/2拍</span>        <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x23</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span>        <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x23</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span>        <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x23</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span>        <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span>        <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span>        <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span>        <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span>        <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span>        <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x23</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span>        <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x0c</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span>        <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span>        <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span>        <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x0c</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x23</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span>        <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x0c</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span>        <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span>        <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span>        <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>uchar code arrMusicToTimerNum<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 此数组数据为各个音符在定时器中的重装值，第一列是高位，第二列是低位</span>        <span class="token number">0xf8</span><span class="token punctuation">,</span> <span class="token number">0x8c</span><span class="token punctuation">,</span> <span class="token comment">// 低八度，低1</span>        <span class="token number">0xf9</span><span class="token punctuation">,</span> <span class="token number">0x5b</span><span class="token punctuation">,</span>        <span class="token number">0xfa</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">,</span> <span class="token comment">// 低3</span>        <span class="token number">0xfa</span><span class="token punctuation">,</span> <span class="token number">0x67</span><span class="token punctuation">,</span>        <span class="token number">0xfb</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token comment">// 低5</span>        <span class="token number">0xfb</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span>        <span class="token number">0xfc</span><span class="token punctuation">,</span> <span class="token number">0x0c</span><span class="token punctuation">,</span> <span class="token comment">// 低7</span>        <span class="token number">0xfc</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token comment">// 中央 C 调</span>        <span class="token number">0xfc</span><span class="token punctuation">,</span> <span class="token number">0xac</span><span class="token punctuation">,</span> <span class="token comment">// 中2</span>        <span class="token number">0xfd</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span>        <span class="token number">0xfd</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token comment">// 中4</span>        <span class="token number">0xfd</span><span class="token punctuation">,</span> <span class="token number">0x82</span><span class="token punctuation">,</span>        <span class="token number">0xfd</span><span class="token punctuation">,</span> <span class="token number">0xc8</span><span class="token punctuation">,</span> <span class="token comment">// 中6</span>        <span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span>        <span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token comment">// 高八度，高1</span>        <span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span>        <span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0x85</span><span class="token punctuation">,</span> <span class="token comment">// 高3</span>        <span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0x9a</span><span class="token punctuation">,</span>        <span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0xc1</span><span class="token punctuation">,</span> <span class="token comment">// 高5</span>        <span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0xe4</span><span class="token punctuation">,</span>        <span class="token number">0xff</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token comment">// 高7</span>        <span class="token number">0xff</span><span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/*---------延时子函数---------*/</span><span class="token keyword">void</span> <span class="token function">DelayMs</span><span class="token punctuation">(</span>uint xms<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    uint i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> xms<span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">124</span><span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*---------取址子函数---------*/</span><span class="token comment">// 取出 tem 音符在 arrMusicToTimerNum 数组中的位置值</span>uchar <span class="token function">GetPosition</span><span class="token punctuation">(</span>uchar tem<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    uchar ucBase<span class="token punctuation">,</span> ucOffset<span class="token punctuation">,</span> ucPosition<span class="token punctuation">;</span> <span class="token comment">// 定义曲调、音符和位置</span>    ucBase <span class="token operator">=</span> tem <span class="token operator">/</span> <span class="token number">16</span><span class="token punctuation">;</span>                  <span class="token comment">// 高4位是曲调值，基址</span>    ucOffset <span class="token operator">=</span> tem <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">;</span>                <span class="token comment">// 低4位是音符，偏移量</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ucOffset <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                  <span class="token comment">// 当音符为0时，位置是42</span>    <span class="token punctuation">&#123;</span>        P0 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">42</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 点亮对应数量的 LED</span>    P0 <span class="token operator">=</span> arrLed<span class="token punctuation">[</span>ucOffset<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ucBase <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 当曲调值为1时，即是低八度，基址为0</span>        ucBase <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ucBase <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 当曲调值为2时，即是中八度，基址为14</span>        ucBase <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ucBase <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 当曲调值为3时，即是高八度，基址为28</span>        ucBase <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">;</span>    <span class="token comment">// 通过基址加上偏移量，即可定位此音符在 arrMusicToTimerNum 数组中的位置</span>    ucPosition <span class="token operator">=</span> ucBase <span class="token operator">+</span> <span class="token punctuation">(</span>ucOffset <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ucPosition<span class="token punctuation">;</span> <span class="token comment">// 返回这一个位置值</span><span class="token punctuation">&#125;</span><span class="token comment">/*---------播放音乐功能函数---------*/</span><span class="token keyword">void</span> <span class="token function">PlayMusic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// ucNoteTmp 为音符，ucRhythmTmp 为节拍</span>    uchar ucNoteTmp<span class="token punctuation">,</span> ucRhythmTmp<span class="token punctuation">,</span> tem<span class="token punctuation">;</span>    <span class="token comment">// 这里把 uchar 型改成 uint 型，否则 i 最大为255，只能支持128个音符，甚至放不完《国际歌》的旋律</span>    uint i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 播放状态</span>        <span class="token punctuation">&#123;</span>            ucNoteTmp <span class="token operator">=</span> arrMusic<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ucNoteTmp <span class="token operator">==</span> <span class="token number">0x00</span><span class="token punctuation">)</span> <span class="token comment">// 如果碰到结束符,延时1秒,回到开始再来一遍</span>            <span class="token punctuation">&#123;</span>                i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                P0 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>                sbtBeep <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token function">DelayMs</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token comment">// 其他情况下取音符和节拍</span>            <span class="token punctuation">&#123;</span>                tem <span class="token operator">=</span> <span class="token function">GetPosition</span><span class="token punctuation">(</span>arrMusic<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 取出当前音符在 arrMusicToTimerNum 数组中的位置值</span>                ucTimerH <span class="token operator">=</span> arrMusicToTimerNum<span class="token punctuation">[</span>tem<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 把音符相应的计时器重装载值赋予 ucTimerH 和 ucTimerL</span>                ucTimerL <span class="token operator">=</span> arrMusicToTimerNum<span class="token punctuation">[</span>tem <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                TH0 <span class="token operator">=</span> ucTimerH<span class="token punctuation">;</span> <span class="token comment">// 把 ucTimerH 和 ucTimerL 赋予计时器</span>                TL0 <span class="token operator">=</span> ucTimerL<span class="token punctuation">;</span>                ucRhythmTmp <span class="token operator">=</span> arrMusic<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 取得节拍</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                TR0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                  <span class="token comment">// 开定时器1</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ucTimerH <span class="token operator">==</span> ucTimerL<span class="token punctuation">)</span> <span class="token comment">// 休止直接关掉定时器</span>                    TR0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token function">DelayMs</span><span class="token punctuation">(</span>ucRhythmTmp <span class="token operator">*</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待节拍完成, 通过 P3^4 口输出音频</span>                TR0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token comment">// 关定时器1</span>                sbtBeep <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>flag <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 暂停</span>                <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*---------初始化子函数---------*/</span><span class="token comment">// 功能是配置 IO 口</span><span class="token keyword">void</span> <span class="token function">InitSys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    P0M0 <span class="token operator">=</span> <span class="token number">0xff</span><span class="token punctuation">;</span>    P0M1 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>    P2M0 <span class="token operator">=</span> <span class="token number">0x08</span><span class="token punctuation">;</span>    P2M1 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>    P3M0 <span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span>    P3M1 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>    P4M0 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>    P4M1 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>    P5M0 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>    P5M1 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>    sbtLedSel <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*---------定时器0初始化子函数---------*/</span><span class="token keyword">void</span> <span class="token function">InitT0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    TMOD <span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>    TH0 <span class="token operator">=</span> <span class="token number">0xD8</span><span class="token punctuation">;</span>    TL0 <span class="token operator">=</span> <span class="token number">0xEF</span><span class="token punctuation">;</span>    IE <span class="token operator">=</span> <span class="token number">0x87</span><span class="token punctuation">;</span> <span class="token comment">// 1000 0111  EA=1,EX0=1,ET0=1,EX1=0;</span>    IP <span class="token operator">=</span> <span class="token number">0x02</span><span class="token punctuation">;</span> <span class="token comment">// 0000 0010  PT0=1;   定时器0优先级高</span>    TR0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    sbtBeep <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*---------主函数---------*/</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">InitSys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">InitT0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    P0 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>    key1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">PlayMusic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*---------定时器0中断处理函数---------*/</span><span class="token comment">// 重新装值，并把 sbtBeep 值取反，产生方波</span><span class="token keyword">void</span> <span class="token function">T0_Process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">1</span> <span class="token comment">// 计时器控制频率</span><span class="token punctuation">&#123;</span>    TH0 <span class="token operator">=</span> ucTimerH<span class="token punctuation">;</span>    TL0 <span class="token operator">=</span> ucTimerL<span class="token punctuation">;</span>    sbtBeep <span class="token operator">=</span> <span class="token operator">~</span>sbtBeep<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*---------按键1中断处理函数---------*/</span><span class="token comment">// 从其他案例抄过来的</span><span class="token keyword">void</span> <span class="token function">ex1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">0</span><span class="token punctuation">&#123;</span>    <span class="token function">DelayMs</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 判断 key1 是否按下</span>    <span class="token punctuation">&#123;</span>        <span class="token function">DelayMs</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>key1<span class="token punctuation">)</span>                <span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token operator">~</span>flag<span class="token punctuation">;</span> <span class="token comment">// 播放中断位取反，播放或者暂停</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;这是怎么一回事&quot;&gt;&lt;a href=&quot;#这是怎么一回事&quot; class=&quot;headerlink&quot; title=&quot;这是怎么一回事&quot;&gt;&lt;/a&gt;这是怎么一回事&lt;/h2&gt;&lt;p&gt;是的，我又来水了。&lt;/p&gt;
&lt;p&gt;话说回来，虽然暑假开始已经将近两周了，但是我们并没有回家。为什么呢？&lt;/p&gt;
&lt;p&gt;你可知道这世上有一物唤作“小学期”吗？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/07/13/Kz3emPhy7xDvNMu.jpg&quot; alt=&quot;滑稽&quot;&gt;&lt;/p&gt;
&lt;p&gt;每年暑假，我们学院大二的学生都会被拉到工训中心愉悦地学习课程，其名为——焊板子！&lt;del&gt;（学会了，明天就进电子厂。）&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/07/13/YqjBUElkJ2VW8DX.jpg&quot; alt=&quot;板子成品&quot;&gt;&lt;/p&gt;
&lt;p&gt;好吧，其实正式名称应该是电子系统设计与创新基础训练，上面说的算是实训的一部分。在焊板子之外，我们要做的事情是通过学习各种案例理解其中的原理，最终自己编程实现想要的功能。&lt;/p&gt;
&lt;p&gt;老师给我们提供了很多案例，不过根据观察，大家玩得最 High 的还是电子音乐，就是让蜂鸣器按指定的曲调发出声音。&lt;del&gt;（电子系统设计？不，是 8-bit 音乐大赏。）&lt;/del&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="奇怪的知识增加了" scheme="https://afool.top/categories/%E5%A5%87%E6%80%AA%E7%9A%84%E7%9F%A5%E8%AF%86%E5%A2%9E%E5%8A%A0%E4%BA%86/"/>
    
    
    <category term="单片机" scheme="https://afool.top/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    <category term="c" scheme="https://afool.top/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>夏天的风和雨</title>
    <link href="https://afool.top/diary/2021-middle/"/>
    <id>https://afool.top/diary/2021-middle/</id>
    <published>2021-07-02T14:48:31.000Z</published>
    <updated>2022-05-15T15:32:02.533Z</updated>
    
    <content type="html"><![CDATA[    <div id="aplayer-VjXYpymH" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="499027" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#C20C0C"    ></div><h2 id="快来点凉风吧"><a href="#快来点凉风吧" class="headerlink" title="快来点凉风吧"></a>快来点凉风吧</h2><p>这几天还是和往常一样闷热，我有点怀疑自己是不是在蒸桑拿。正好考试周刚过，就躺在床上不动好了，既省力又不会被外面的酷暑打扰。</p><p>躺着是不可能就只是躺着的，经过考试的洗礼，我不禁对自己过去一段时间的生活和学习产生了深深的怀疑。<del>（笑，希望不要又是死不悔改）。</del></p><p><img src="https://i.loli.net/2021/07/02/6eLrusJTcW4w3jG.gif" alt="emmm" loading="lazy"></p><span id="more"></span><p>怎么说呢，作为当代摸鱼大学生，学习什么的其实也是看得很重的，只是不知道为什么，自己总是不能很好地集中精力去做这些事情，学着学着就去干别的了。<del>比如一到考试周游戏就变得特别好玩，简直要成为某种定律了。</del></p><p>于是就这样日复一日，平常该学的东西就掌握个半斤八两，复习的时候也就是用一两天的时间过一遍而已，最后拿到一个很一般的分数，排名不上不下。要说差嘛，也没有很差，但总觉得不应该是这样的。</p><p>转眼间大学生活已经过去一半了，<del>就这？这就过去一半了？</del>有的同学的技术水平已经可以出去实习了（甚至被抢着要），有的同学也用课余时间做了很多有趣的事情，每次看到这些我都会忍不住再看看自己。我到底是来做什么的呢？</p><p>来回顾一下自己曾经立下的flag吧：</p><ul><li><input disabled="" type="checkbox"> 拿到奖学金</li><li><input disabled="" type="checkbox"> 写出小说的第一部</li><li><input disabled="" type="checkbox"> 学会弹吉他</li><li><input disabled="" type="checkbox"> 看完《冰与火之歌》</li></ul><p>显而易见，这些我都还没有完成。</p><p>去年的奖学金因为挂了高数二泡汤了，不挂的话看综测排名应该是有希望的。今年的要等9月开学才知道能不能拿到（暑假有小学期，这之后还要进行综测排名）。至于后面的几个，之前的空闲时间不是刷视频就是玩游戏，直到看到自己曾经列下的目标才想起来。</p><h2 id="窗前听雨"><a href="#窗前听雨" class="headerlink" title="窗前听雨"></a>窗前听雨</h2><p>要是让两年前的我看到自己现在这副摸样，一定会嗤之以鼻的吧。这个人怎么就这么丧呢？看起来毫无生气。</p><p><img src="https://i.loli.net/2021/07/02/pM5BYo7iWa3knI9.jpg" alt="流泪" loading="lazy"></p><p>不得不承认，我对不起从前的自己，对不起已经失去的时间，对不起给过我鼓励和信任的人。但我也很清楚，就这么丧下去是绝对不行的，要行动就要趁现在，不能拖延。<del>就知道说。</del></p><blockquote><p>种一棵树，最好的时间是十年前，其次是现在。</p></blockquote><p>经常看到很多大佬自嘲为废物并决定躺平，但我觉得那不是真的就躺平不动了。所谓躺平只是一种心态，只是平和地对待生活中的不如意罢了。面对不确定的未来，还是要做好自己决定做的事情才能抓住机会。</p><p>希望两年后的我会变成自己期望的样子吧。</p><p><del>果然心情低落又迷茫的时候写出来的东西也会有点空洞乏味。</del></p><p><del>也可能是因为我今天睡得太久有点不舒服吧。</del></p><h2 id="美好的东西和值得吐槽的事情"><a href="#美好的东西和值得吐槽的事情" class="headerlink" title="美好的东西和值得吐槽的事情"></a>美好的东西和值得吐槽的事情</h2><p>也并不是所有事情都一无是处，至少风景还是一样美。</p><p>食堂的饭还算不错，能让人吃得感到满足。<del>价格就先不提了。</del></p><p>让子弹飞很好看。</p><p>Switch Lite真的很香。</p><p>泽野弘之的音乐还是一样好听，只是最近几年貌似都是风格差不多的番剧找泽野配乐啊……感觉很少听到像The Moment of Dreams和A Letter这样风格的歌了，今年的86也是把比较日常的部分都给了山本康太。山本水平也不错，但还是希望有人能让泽野来点风格更多样的曲子。</p><p>在寝室学习或者构思都需要一点耐心，毕竟每个人的节奏不是同步的。</p><p><img src="https://i.loli.net/2021/07/02/U5jciBYNrxG3bXH.jpg" alt="呵呵" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;div id=&quot;aplayer-VjXYpymH&quot; class=&quot;aplayer aplayer-tag-marker meting-tag-marker&quot;
         data-id=&quot;499027&quot; data-server=&quot;netease&quot; data-type=&quot;song&quot; data-mode=&quot;circulation&quot; data-autoplay=&quot;false&quot; data-mutex=&quot;true&quot; data-listmaxheight=&quot;340px&quot; data-preload=&quot;auto&quot; data-theme=&quot;#C20C0C&quot;
    &gt;&lt;/div&gt;

&lt;h2 id=&quot;快来点凉风吧&quot;&gt;&lt;a href=&quot;#快来点凉风吧&quot; class=&quot;headerlink&quot; title=&quot;快来点凉风吧&quot;&gt;&lt;/a&gt;快来点凉风吧&lt;/h2&gt;&lt;p&gt;这几天还是和往常一样闷热，我有点怀疑自己是不是在蒸桑拿。正好考试周刚过，就躺在床上不动好了，既省力又不会被外面的酷暑打扰。&lt;/p&gt;
&lt;p&gt;躺着是不可能就只是躺着的，经过考试的洗礼，我不禁对自己过去一段时间的生活和学习产生了深深的怀疑。&lt;del&gt;（笑，希望不要又是死不悔改）。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/07/02/6eLrusJTcW4w3jG.gif&quot; alt=&quot;emmm&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="往事如烟" scheme="https://afool.top/categories/%E5%BE%80%E4%BA%8B%E5%A6%82%E7%83%9F/"/>
    
    
    <category term="杂记" scheme="https://afool.top/tags/%E6%9D%82%E8%AE%B0/"/>
    
    <category term="负能量警告" scheme="https://afool.top/tags/%E8%B4%9F%E8%83%BD%E9%87%8F%E8%AD%A6%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>把站点迁移到GitHub</title>
    <link href="https://afool.top/log/move_to_github/"/>
    <id>https://afool.top/log/move_to_github/</id>
    <published>2021-05-23T06:57:20.000Z</published>
    <updated>2022-05-15T15:32:02.557Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>原因很简单，为了节省服务器经费<del>（钱包空空）</del>，服务器摆在那里，资源也没有充分利用起来。</p><span id="more"></span><h2 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h2><p>把文章从Typecho导出到Hugo主要是通过这个插件来完成的：<a href="https://github.com/lizheming/typecho-export-hugo">Typecho 博客文章导出至 Hugo 插件</a>。</p><p>然而我得到的zip文件老是无法解压，看了<a href="https://github.com/lizheming/typecho-export-hugo/issues/2">issue</a>之后去<code>/tmp/Export2Hugo</code>下面找才找到导出的文件。把导出的content文件夹扔到Hugo的目录下面，嗯，最基本的部分就完成了。</p><h3 id="然而"><a href="#然而" class="headerlink" title="然而"></a>然而</h3><p>经过一番折腾还是换了Hexo，不过之前导出的文件倒是可以直接用。</p><p>有一说一，就生成文章的速度来看，还是Hugo更胜一筹。</p><h2 id="主题和配置"><a href="#主题和配置" class="headerlink" title="主题和配置"></a>主题和配置</h2><p>使用了云游君大佬的<a href="https://github.com/YunYouJun/hexo-theme-yun">Yun</a>主题。</p><p>在<code>source</code>目录下面新建目录<code>_data</code>，新建一个<code>yun.yml</code>，按照主题说明文档来改就可以。</p><p>安装的必要插件和额外依赖库：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 渲染器</span><span class="token function">npm</span> <span class="token function">install</span> hexo-render-pug hexo-renderer-stylus --save<span class="token comment"># 标签</span><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-tag<span class="token comment"># 分类</span><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-category<span class="token comment"># 部署</span><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git<span class="token comment"># 字数统计</span><span class="token function">npm</span> <span class="token function">install</span> hexo-wordcount<span class="token comment"># RSS</span><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save</code></pre><p>暂时就这些，要用到别的以后还可以再配嘛。</p><h2 id="启用GitHub-Pages"><a href="#启用GitHub-Pages" class="headerlink" title="启用GitHub Pages"></a>启用GitHub Pages</h2><p>这个就不多说了，建仓库开Pages服务还有域名解析。域名解析记录可以直接用<strong>CNAME</strong>指向GitHub给的默认域名。</p><h2 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h2><p>使用了<strong>SM.MS</strong>免费版和<strong>PicGo</strong>的组合，先这样吧<del>（钱包空空）</del>。</p><h2 id="今后的打算"><a href="#今后的打算" class="headerlink" title="今后的打算"></a>今后的打算</h2><p>之前发的那些题解水文就不删了，<del>不然没有内容，</del>今后题解水文如果发也可能只有一些思路，更具体的应该会放到CSDN上吧。学习笔记什么的会用语雀之类的平台。用主题提供的post type做成外部链接也不错。</p><p>还是希望这里能够成为更个性化的空间。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;原因很简单，为了节省服务器经费&lt;del&gt;（钱包空空）&lt;/del&gt;，服务器摆在那里，资源也没有充分利用起来。&lt;/p&gt;</summary>
    
    
    
    <category term="往事如烟" scheme="https://afool.top/categories/%E5%BE%80%E4%BA%8B%E5%A6%82%E7%83%9F/"/>
    
    
    <category term="blog" scheme="https://afool.top/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>夏天到了，开个空调</title>
    <link href="https://afool.top/post/install_air_conditioner/"/>
    <id>https://afool.top/post/install_air_conditioner/</id>
    <published>2021-05-14T16:12:00.000Z</published>
    <updated>2022-05-15T15:32:02.558Z</updated>
    
    <content type="html"><![CDATA[<h2 id="这里是空调房"><a href="#这里是空调房" class="headerlink" title="这里是空调房"></a>这里是空调房</h2><p>这个空调来自这里：<a href="https://www.yunyoujun.cn/posts/air-conditioner/">云游君的小站-便携小空调</a>。</p><p>看起来蛮有趣的，<del>空调房最适合摸鱼了</del>。</p><span id="more"></span><iframe height=800 src="https://ac.yunyoujun.cn"></iframe><h2 id="空调维修"><a href="#空调维修" class="headerlink" title="空调维修"></a>空调维修</h2><p>事情是这样的，之前搬文章的时候先用了下Hugo，然后我发现小空调不见了……不见了……</p><p><img src="https://i.loli.net/2021/06/27/3iDmAFlU8eZkhRV.jpg" alt="完蛋" loading="lazy"></p><p>本着偷懒的原则，我想去当时用的主题的说明文档里面找找看有没有关于这个问题的解答。结果显而易见，没有。<del>不然我也不用写这么个维修记录了。</del></p><p>那就自己动手，丰衣足食。所以我打开了万能的搜索引擎。<del>（自己动手，大嘘）</del>，输入“Hugo”和“iframe”这么两个关键字，找到了三四篇相关的文章。</p><p>简单来说，就是Hugo似乎不支持在Markdown中直接插入iframe标签。但是，Hugo有一个shortcode机制可以完成这个目的。</p><p>那么维修方法就是：在<code>layouts/shortcodes</code>目录下面新建一个html文件（小空调要用到的属性只有高度和地址，就草率地把这个文件命名为<code>height_and_src.html</code>）：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span>    <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;.Get 0 &#125;&#125;<span class="token punctuation">"</span></span>    <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://&#123;&#123;.Get 1 &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span></code></pre><p>要让小空调工作，只需要在Markdown里加上这么一行：</p><pre class="language-markup" data-language="markup"><code class="language-markup">&#123;&#123;&lt; height_and_src 800 ac.yunyoujun.cn >&#125;&#125;</code></pre><p>当然，Hexo支持iframe，这个问题就抛到脑后吧。</p><p><del>打开空调，睡觉。</del></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;这里是空调房&quot;&gt;&lt;a href=&quot;#这里是空调房&quot; class=&quot;headerlink&quot; title=&quot;这里是空调房&quot;&gt;&lt;/a&gt;这里是空调房&lt;/h2&gt;&lt;p&gt;这个空调来自这里：&lt;a href=&quot;https://www.yunyoujun.cn/posts/air-conditioner/&quot;&gt;云游君的小站-便携小空调&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;看起来蛮有趣的，&lt;del&gt;空调房最适合摸鱼了&lt;/del&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="奇怪的知识增加了" scheme="https://afool.top/categories/%E5%A5%87%E6%80%AA%E7%9A%84%E7%9F%A5%E8%AF%86%E5%A2%9E%E5%8A%A0%E4%BA%86/"/>
    
    
    <category term="玩具" scheme="https://afool.top/tags/%E7%8E%A9%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>BombLab实验</title>
    <link href="https://afool.top/learning/csapp_bomblab/"/>
    <id>https://afool.top/learning/csapp_bomblab/</id>
    <published>2021-05-14T15:52:00.000Z</published>
    <updated>2022-05-15T15:32:02.552Z</updated>
    
    <content type="html"><![CDATA[<h2 id="拆掉邪恶博士的炸弹"><a href="#拆掉邪恶博士的炸弹" class="headerlink" title="拆掉邪恶博士的炸弹"></a>拆掉邪恶博士的炸弹</h2><blockquote><p>这是一个课程实验，感觉有点意思，就记录一下吧。</p><p>分析可能不准确，仅供参考。</p></blockquote><h3 id="邪恶博士的幽默感"><a href="#邪恶博士的幽默感" class="headerlink" title="邪恶博士的幽默感"></a>邪恶博士的幽默感</h3><pre class="language-none"><code class="language-none">&#x2F;*************************************************************************** * Dr. Evil&#39;s Insidious Bomb, Version 1.1 * Copyright 2011, Dr. Evil Incorporated. All rights reserved. * * LICENSE: * * Dr. Evil Incorporated (the PERPETRATOR) hereby grants you (the * VICTIM) explicit permission to use this bomb (the BOMB).  This is a * time limited license, which expires on the death of the VICTIM. * The PERPETRATOR takes no responsibility for damage, frustration, * insanity, bug-eyes, carpal-tunnel syndrome, loss of sleep, or other * harm to the VICTIM.  Unless the PERPETRATOR wants to take credit, * that is.  The VICTIM may not distribute this bomb source code to * any enemies of the PERPETRATOR.  No VICTIM may debug, * reverse-engineer, run &quot;strings&quot; on, decompile, decrypt, or use any * other technique to gain knowledge of and defuse the BOMB.  BOMB * proof clothing may not be worn when handling this program.  The * PERPETRATOR will not apologize for the PERPETRATOR&#39;s poor sense of * humor.  This license is null and void where the BOMB is prohibited * by law. ***************************************************************************&#x2F;</code></pre><p>满满的中二之感，连我都看不惯了，解之。</p><p>由于我们并没有完整的源代码，只能通过汇编代码来尝试推出博士<del>这个邪恶的刀客塔</del>到底在炸弹里做了些什么手脚了。</p><span id="more"></span><h3 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h3><pre class="language-none"><code class="language-none">&#x2F;* Hmm...  Six phases must be more secure than one phase! *&#x2F;</code></pre><p>邪恶博士的第一个关卡如下</p><pre class="language-none"><code class="language-none">08048b50 &lt;phase_1&gt;: 8048b50:   83 ec 1c                sub    $0x1c,%esp 8048b53:   c7 44 24 04 64 a1 04    movl   $0x804a164,0x4(%esp) 8048b5a:   08  8048b5b:   8b 44 24 20             mov    0x20(%esp),%eax 8048b5f:   89 04 24                mov    %eax,(%esp) 8048b62:   e8 2d 04 00 00          call   8048f94 &lt;strings_not_equal&gt; 8048b67:   85 c0                   test   %eax,%eax 8048b69:   74 05                   je     8048b70 &lt;phase_1+0x20&gt; 8048b6b:   e8 36 05 00 00          call   80490a6 &lt;explode_bomb&gt; 8048b70:   83 c4 1c                add    $0x1c,%esp 8048b73:   c3                      ret</code></pre><p>看起来很短，大概是这样的：</p><p>把输入的内容传给了<code>phase_1</code>，根据<code>phase_1</code>调用了<code>&lt;strings_not_equal&gt;</code>猜想这里应该是把输入的字符串和某个字符串作比较，下面<code>test %eax,%eax</code>，当<code>%eax</code>为0时跳过<code>&lt;explode_bomb&gt;</code>，即<code>&lt;strings_not_equal&gt;</code>的返回值为0，两个字符串相等时跳过。</p><p>在<code>&lt;strings_not_equal&gt;</code>之前可以看到<code>movl $0x804a164,0x4(%esp)</code>，将这个立即数作为地址。使用gdb调试bomb程序，输入<code>x/s 0x804a164</code>，终端显示了<code>0x804a164: &quot;Crikey! I have lost my mojo!&quot;</code>。</p><p>再往下是<code>mov 0x20(%esp),%eax</code>，把手动输入的字符串的地址放进<code>%eax</code>，再放到<code>(%esp)</code>，传给了<code>&lt;strings_not_equal&gt;</code>。猜测需要输入的正确答案就是<code>0x804a164</code>处的字符串<code>Crikey! I have lost my mojo!</code>。</p><p>在<code>&lt;explode_bomb&gt;</code>前设置断点，<code>break explode_bomb</code>，输入run运行程序。输入字符串<code>Crikey! I have lost my mojo!</code>，终端显示<code>Phase 1 defused. How about the next one?</code>，第一关通过。</p><p><img src="https://i.loli.net/2021/06/05/xodRVhpKkq7BUI5.jpg" alt="phase1" loading="lazy"></p><h3 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h3><pre class="language-none"><code class="language-none">&#x2F;* The second phase is harder.  No one will ever figure out * how to defuse this... *&#x2F;</code></pre><pre class="language-none"><code class="language-none">08048b74 &lt;phase_2&gt;: 8048b74:   56                      push   %esi 8048b75:   53                      push   %ebx 8048b76:   83 ec 34                sub    $0x34,%esp 8048b79:   8d 44 24 18             lea    0x18(%esp),%eax 8048b7d:   89 44 24 04             mov    %eax,0x4(%esp) 8048b81:   8b 44 24 40             mov    0x40(%esp),%eax 8048b85:   89 04 24                mov    %eax,(%esp) 8048b88:   e8 4e 06 00 00          call   80491db &lt;read_six_numbers&gt; 8048b8d:   83 7c 24 18 00          cmpl   $0x0,0x18(%esp) 8048b92:   75 07                   jne    8048b9b &lt;phase_2+0x27&gt; 8048b94:   83 7c 24 1c 01          cmpl   $0x1,0x1c(%esp) 8048b99:   74 05                   je     8048ba0 &lt;phase_2+0x2c&gt; 8048b9b:   e8 06 05 00 00          call   80490a6 &lt;explode_bomb&gt;</code></pre><p>由<code>&lt;read_six_numbers&gt;</code>可以猜想第二关要输入六个数。紧接着是<code>cmpl  $0x0,0x18(%esp)</code>和<code>jne 8048b9b &lt;phase_2+0x27&gt;</code>，而<code>8048b9b</code>处就是调用<code>&lt;explode_bomb&gt;</code>，也就是说如果第一个数不等于0就爆炸，所以第一个数是0。</p><p>再往下是<code>cmpl $0x1,0x1c(%esp)</code>和<code>je 8048ba0 &lt;phase_2+0x2c&gt;</code>，第二个数等于1就跳过爆炸。</p><pre class="language-none"><code class="language-none">8048ba0:   8d 5c 24 20             lea    0x20(%esp),%ebx 8048ba4:   8d 74 24 30             lea    0x30(%esp),%esi 8048ba8:   8b 43 f8                mov    -0x8(%ebx),%eax 8048bab:   03 43 fc                add    -0x4(%ebx),%eax 8048bae:   39 03                   cmp    %eax,(%ebx) 8048bb0:   74 05                   je     8048bb7 &lt;phase_2+0x43&gt; 8048bb2:   e8 ef 04 00 00          call   80490a6 &lt;explode_bomb&gt; 8048bb7:   83 c3 04                add    $0x4,%ebx 8048bba:   39 f3                   cmp    %esi,%ebx 8048bbc:   75 ea                   jne    8048ba8 &lt;phase_2+0x34&gt; 8048bbe:   83 c4 34                add    $0x34,%esp 8048bc1:   5b                      pop    %ebx 8048bc2:   5e                      pop    %esi 8048bc3:   c3                      ret</code></pre><p>接着是循环遍历剩下的数，由<code>mov -0x8(%ebx),%eax</code>、<code>add -0x4(%ebx),%eax</code>、<code>cmp %eax,(%ebx)</code>可以发现是用当前数与它前面两个数之和比较，相等就不爆炸，也就是说输入的数应该组成斐波那契数列，已经有了0和1，剩下的应该是1、2、3、5。</p><p>在终端输入<code>0 1 1 2 3 5</code>，终端输出了<code>That&#39;s number 2. Keep going!</code>，第二关通过。</p><p><img src="https://i.loli.net/2021/06/05/yXM4Omd15wWbu8V.jpg" alt="phase2" loading="lazy"></p><h3 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h3><pre class="language-none"><code class="language-none">&#x2F;* I guess this is too easy so far.  Some more complex code will * confuse people. *&#x2F;</code></pre><pre class="language-none"><code class="language-none">08048bc4 &lt;phase_3&gt;: 8048bc4:   83 ec 2c                sub    $0x2c,%esp 8048bc7:   8d 44 24 1c             lea    0x1c(%esp),%eax 8048bcb:   89 44 24 0c             mov    %eax,0xc(%esp) 8048bcf:   8d 44 24 18             lea    0x18(%esp),%eax 8048bd3:   89 44 24 08             mov    %eax,0x8(%esp) 8048bd7:   c7 44 24 04 8b a3 04    movl   $0x804a38b,0x4(%esp) 8048bde:   08  8048bdf:   8b 44 24 30             mov    0x30(%esp),%eax 8048be3:   89 04 24                mov    %eax,(%esp) 8048be6:   e8 85 fc ff ff          call   8048870 &lt;__isoc99_sscanf@plt&gt; 8048beb:   83 f8 01                cmp    $0x1,%eax 8048bee:   7f 05                   jg     8048bf5 &lt;phase_3+0x31&gt; 8048bf0:   e8 b1 04 00 00          call   80490a6 &lt;explode_bomb&gt;</code></pre><p>由<code>movl $0x804a38b,0x4(%esp)</code>可以猜想<code>0x804a38b</code>中保存的内容与<code>sscanf</code>有关。在gdb中输入<code>x/s 0x804a38b</code>，终端输出了<code>0x804a38b: &quot;%d %d&quot;</code>，猜想应该输入两个整数，<code>sscanf</code>的返回值与1比较，返回值（输入数的个数）大于1才能不爆炸。</p><pre class="language-none"><code class="language-none">8048bf5:   83 7c 24 18 07          cmpl   $0x7,0x18(%esp) 8048bfa:   77 3c                   ja     8048c38 &lt;phase_3+0x74&gt;</code></pre><p>输入的第一个数与7比较，小于等于7才不爆炸。</p><pre class="language-none"><code class="language-none">8048bfc:   8b 44 24 18             mov    0x18(%esp),%eax 8048c00:   ff 24 85 a0 a1 04 08    jmp    *0x804a1a0(,%eax,4)</code></pre><p>猜测是<code>switch</code>，使用以<code>*0x804a1a0</code>为基址的跳转表。</p><pre class="language-none"><code class="language-none">8048c07:   b8 f5 02 00 00          mov    $0x2f5,%eax 8048c0c:   eb 3b                   jmp    8048c49 &lt;phase_3+0x85&gt; 8048c0e:   b8 ad 03 00 00          mov    $0x3ad,%eax 8048c13:   eb 34                   jmp    8048c49 &lt;phase_3+0x85&gt; 8048c15:   b8 0e 02 00 00          mov    $0x20e,%eax 8048c1a:   eb 2d                   jmp    8048c49 &lt;phase_3+0x85&gt; 8048c1c:   b8 e3 03 00 00          mov    $0x3e3,%eax 8048c21:   eb 26                   jmp    8048c49 &lt;phase_3+0x85&gt; 8048c23:   b8 e0 03 00 00          mov    $0x3e0,%eax 8048c28:   eb 1f                   jmp    8048c49 &lt;phase_3+0x85&gt; 8048c2a:   b8 a3 02 00 00          mov    $0x2a3,%eax 8048c2f:   eb 18                   jmp    8048c49 &lt;phase_3+0x85&gt; 8048c31:   b8 5e 01 00 00          mov    $0x15e,%eax 8048c36:   eb 11                   jmp    8048c49 &lt;phase_3+0x85&gt; 8048c38:   e8 69 04 00 00          call   80490a6 &lt;explode_bomb&gt; 8048c3d:   b8 00 00 00 00          mov    $0x0,%eax 8048c42:   eb 05                   jmp    8048c49 &lt;phase_3+0x85&gt; 8048c44:   b8 13 03 00 00          mov    $0x313,%eax 8048c49:   3b 44 24 1c             cmp    0x1c(%esp),%eax 8048c4d:   74 05                   je     8048c54 &lt;phase_3+0x90&gt; 8048c4f:   e8 52 04 00 00          call   80490a6 &lt;explode_bomb&gt; 8048c54:   83 c4 2c                add    $0x2c,%esp 8048c57:   c3                      ret</code></pre><p>输入<code>p/x *0x804a1a0</code>，终端输出了<code>&quot;$1 = 0x8048c07&quot;</code>，那么第一个数是0时，第二个数应该是<code>0x8048c07</code>处<code>mov $0x2f5,%eax</code>对应的数0x2f5，转换成十进制就是757。当第一个数是其他值时第二个数会有不同，比如当第一个数是2，通过<code>p/x *0x804a1a8</code>得到<code>$3 = 0x8048c0e</code>，第二个数应该是0x3ad，转换成十进制是941，其他情况不再一一列出。</p><p>输入<code>0 757</code>，终端输出了<code>Halfway there!</code>，第三关通过，答案不唯一。</p><p><img src="https://i.loli.net/2021/06/05/kXyj7TLxtaJEIB3.jpg" alt="phase3" loading="lazy"></p><h3 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h3><pre class="language-none"><code class="language-none">&#x2F;* Oh yeah?  Well, how good is your math?  Try on this saucy problem! *&#x2F;</code></pre><pre class="language-none"><code class="language-none">08048cb5 &lt;phase_4&gt;: 8048cb5:   83 ec 2c                sub    $0x2c,%esp 8048cb8:   8d 44 24 18             lea    0x18(%esp),%eax 8048cbc:   89 44 24 0c             mov    %eax,0xc(%esp) 8048cc0:   8d 44 24 1c             lea    0x1c(%esp),%eax 8048cc4:   89 44 24 08             mov    %eax,0x8(%esp) 8048cc8:   c7 44 24 04 8b a3 04    movl   $0x804a38b,0x4(%esp) 8048ccf:   08  8048cd0:   8b 44 24 30             mov    0x30(%esp),%eax 8048cd4:   89 04 24                mov    %eax,(%esp) 8048cd7:   e8 94 fb ff ff          call   8048870 &lt;__isoc99_sscanf@plt&gt; 8048cdc:   83 f8 02                cmp    $0x2,%eax 8048cdf:   75 0e                   jne    8048cef &lt;phase_4+0x3a&gt; 8048ce1:   8b 44 24 18             mov    0x18(%esp),%eax 8048ce5:   83 f8 01                cmp    $0x1,%eax 8048ce8:   7e 05                   jle    8048cef &lt;phase_4+0x3a&gt;</code></pre><p>根据<code>movl $0x804a38b,0x4(%esp)</code>，输入<code>x/s 0x804a38b</code>，得到<code>&quot;0x804a38b: &quot;%d %d&quot;&quot;</code>，猜想应该输入两个整数。接下来<code>sscanf</code>返回值等于2就不爆炸，说明接受的输入数量是2个。</p><p>在这种情况下<code>&quot;%d %d&quot;</code>指定了<code>sscanf</code>接受的输入类型，使它只能接受两个输入，输入元素的数量大于2时返回值也是2，这样<code>secret_phase</code>的进入条件不会影响<code>phase_4</code>的正常通关。</p><pre class="language-none"><code class="language-none">8048cea:   83 f8 04                cmp    $0x4,%eax 8048ced:   7e 05                   jle    8048cf4 &lt;phase_4+0x3f&gt; 8048cef:   e8 b2 03 00 00          call   80490a6 &lt;explode_bomb&gt; 8048cf4:   8b 44 24 18             mov    0x18(%esp),%eax 8048cf8:   89 44 24 04             mov    %eax,0x4(%esp) 8048cfc:   c7 04 24 06 00 00 00    movl   $0x6,(%esp) 8048d03:   e8 50 ff ff ff          call   8048c58 &lt;func4&gt;</code></pre><p><code>mov 0x18(%esp),%eax</code>、<code>cmp $0x1,%eax</code>和<code>cmp $0x4,%eax</code>限定输入的第二个数应该大于1且小于等于4，再将6和输入的第二个数（这里记作x和y）传入<code>func4</code>。</p><p>func4：</p><pre class="language-none"><code class="language-none">08048c58 &lt;func4&gt;: 8048c58:   83 ec 1c                sub    $0x1c,%esp 8048c5b:   89 5c 24 10             mov    %ebx,0x10(%esp) 8048c5f:   89 74 24 14             mov    %esi,0x14(%esp) 8048c63:   89 7c 24 18             mov    %edi,0x18(%esp) 8048c67:   8b 74 24 20             mov    0x20(%esp),%esi 8048c6b:   8b 5c 24 24             mov    0x24(%esp),%ebx 8048c6f:   85 f6                   test   %esi,%esi 8048c71:   7e 2b                   jle    8048c9e &lt;func4+0x46&gt; 8048c73:   83 fe 01                cmp    $0x1,%esi 8048c76:   74 2b                   je     8048ca3 &lt;func4+0x4b&gt;</code></pre><p>先判断x是否等于0，等于0则返回0；再判断x是否为1，为1则返回y。</p><pre class="language-none"><code class="language-none">8048c78:   89 5c 24 04             mov    %ebx,0x4(%esp) 8048c7c:   8d 46 ff                lea    -0x1(%esi),%eax 8048c7f:   89 04 24                mov    %eax,(%esp) 8048c82:   e8 d1 ff ff ff          call   8048c58 &lt;func4&gt; 8048c87:   8d 3c 18                lea    (%eax,%ebx,1),%edi 8048c8a:   89 5c 24 04             mov    %ebx,0x4(%esp) 8048c8e:   83 ee 02                sub    $0x2,%esi 8048c91:   89 34 24                mov    %esi,(%esp) 8048c94:   e8 bf ff ff ff          call   8048c58 &lt;func4&gt; 8048c99:   8d 1c 07                lea    (%edi,%eax,1),%ebx 8048c9c:   eb 05                   jmp    8048ca3 &lt;func4+0x4b&gt; 8048c9e:   bb 00 00 00 00          mov    $0x0,%ebx 8048ca3:   89 d8                   mov    %ebx,%eax 8048ca5:   8b 5c 24 10             mov    0x10(%esp),%ebx 8048ca9:   8b 74 24 14             mov    0x14(%esp),%esi 8048cad:   8b 7c 24 18             mov    0x18(%esp),%edi 8048cb1:   83 c4 1c                add    $0x1c,%esp 8048cb4:   c3                      ret</code></pre><p>剩下的部分，即x大于1时，把x-1的值和y当作参数调用<code>func4</code>，返回值与y相加后存到<code>%edi</code>，接着与这里类似，x减去2，把<code>x-2</code>和<code>y</code>当作参数调用<code>func4</code>，返回值与之前存在<code>%edi</code>中的值相加，所得结果作为返回值。</p><p>推测func4如下：</p><pre class="language-none"><code class="language-none">int func4(int x, int y) &#123;  if(x &#x3D;&#x3D; 0) &#123;    return 0;  &#125;  else if(x &#x3D;&#x3D; 1) &#123;    return y;  &#125;  else &#123;    return func4(x-1, y)+y+func4(x-2, y);  &#125;&#125;</code></pre><p>回到<code>phase4</code>：</p><pre class="language-none"><code class="language-none">8048d08:   3b 44 24 1c             cmp    0x1c(%esp),%eax 8048d0c:   74 05                   je     8048d13 &lt;phase_4+0x5e&gt; 8048d0e:   e8 93 03 00 00          call   80490a6 &lt;explode_bomb&gt; 8048d13:   83 c4 2c                add    $0x2c,%esp 8048d16:   c3                      ret</code></pre><p><code>cmp 0x1c(%esp),%eax</code>，将<code>func4</code>的返回值与输入的第一个数比较，相等就跳过爆炸，那么输入的第一个数应该等于<code>func4</code>的返回值，该返回值与输入的第二个数有关，答案不唯一。</p><p>当输入的第二个数为4时，<code>func4</code>的返回值应该是80。</p><p>输入80 4，终端输出了<code>So you got that one. Try this one.</code>，第四关通过。</p><p><img src="https://i.loli.net/2021/06/05/EhNXclznmLyHFGs.jpg" alt="phase4" loading="lazy"></p><h3 id="第五关"><a href="#第五关" class="headerlink" title="第五关"></a>第五关</h3><pre class="language-none"><code class="language-none">&#x2F;* Round and &#39;round in memory we go, where we stop, the bomb blows! *&#x2F;</code></pre><pre class="language-none"><code class="language-none">08048d17 &lt;phase_5&gt;: 8048d17:   53                      push   %ebx 8048d18:   83 ec 18                sub    $0x18,%esp 8048d1b:   8b 5c 24 20             mov    0x20(%esp),%ebx 8048d1f:   89 1c 24                mov    %ebx,(%esp) 8048d22:   e8 54 02 00 00          call   8048f7b &lt;string_length&gt; 8048d27:   83 f8 06                cmp    $0x6,%eax 8048d2a:   74 05                   je     8048d31 &lt;phase_5+0x1a&gt; 8048d2c:   e8 75 03 00 00          call   80490a6 &lt;explode_bomb&gt;</code></pre><p>将输入的内容传到<code>(%esp)</code>再调用<code>&lt;string_length&gt;</code>，获取字符串长度并与6比较，长度为6才不爆炸。</p><pre class="language-none"><code class="language-none">8048d31:   ba 00 00 00 00          mov    $0x0,%edx 8048d36:   b8 00 00 00 00          mov    $0x0,%eax 8048d3b:   0f be 0c 03             movsbl (%ebx,%eax,1),%ecx 8048d3f:   83 e1 0f                and    $0xf,%ecx 8048d42:   03 14 8d c0 a1 04 08    add    0x804a1c0(,%ecx,4),%edx 8048d49:   83 c0 01                add    $0x1,%eax 8048d4c:   83 f8 06                cmp    $0x6,%eax 8048d4f:   75 ea                   jne    8048d3b &lt;phase_5+0x24&gt;</code></pre><p>接下来是一个循环，用<code>movsbl (%ebx,%eax,1),%ecx</code>和<code>and $0xf,%ecx</code>获得输入的字符串中每个字符的二进制编码低四位，<code>add 0x804a1c0(,%ecx,4),%edx</code>以每一步的四位编码作为偏移量在数组中找到对应的数，做累加，存到<code>%edx</code>。</p><pre class="language-none"><code class="language-none">8048d51:   83 fa 35                cmp    $0x35,%edx 8048d54:   74 05                   je     8048d5b &lt;phase_5+0x44&gt; 8048d56:   e8 4b 03 00 00          call   80490a6 &lt;explode_bomb&gt; 8048d5b:   83 c4 18                add    $0x18,%esp 8048d5e:   5b                      pop    %ebx 8048d5f:   90                      nop 8048d60:   c3                      ret</code></pre><p>这里<code>cmp $0x35,%edx</code>，将上一步获得的结果与0x35（转化成十进制是53）比较，相等则跳过爆炸。</p><p>在gdb中输入<code>x/16d 0x804a1c0</code>，以十进制有符号数格式显示数组中的部分数值：</p><p><img src="https://i.loli.net/2021/06/05/nWz8EwikTUpqQ3d.jpg" alt="nums" loading="lazy"></p><p>只要输入的六个字符编码低四位作为偏移量对应数组元素之和等于53即可。比如输入字符a，ASCII码是<code>01100001</code>，低四位是<code>0001</code>，那么对应的数组元素就是<code>10</code>。按照这个方法可以得出一组可能的答案：<code>dehifk</code>。答案不唯一。</p><p>输入<code>dehifk</code>，终端输出<code>Good work! On to the next...</code>，第五关通过。</p><p><img src="https://i.loli.net/2021/06/05/rig7bMAeZzaQyk1.jpg" alt="phase5" loading="lazy"></p><h3 id="第六关"><a href="#第六关" class="headerlink" title="第六关"></a>第六关</h3><pre class="language-none"><code class="language-none">&#x2F;* This phase will never be used, since no one will get past the * earlier ones.  But just in case, make this one extra hard. *&#x2F;</code></pre><pre class="language-none"><code class="language-none">08048d61 &lt;phase_6&gt;: 8048d61:   56                      push   %esi 8048d62:   53                      push   %ebx 8048d63:   83 ec 44                sub    $0x44,%esp 8048d66:   8d 44 24 10             lea    0x10(%esp),%eax 8048d6a:   89 44 24 04             mov    %eax,0x4(%esp) 8048d6e:   8b 44 24 50             mov    0x50(%esp),%eax 8048d72:   89 04 24                mov    %eax,(%esp) 8048d75:   e8 61 04 00 00          call   80491db &lt;read_six_numbers&gt;</code></pre><p>由<code>&lt;read_six_numbers&gt;</code>可以看出这一关需要输入六个数。</p><pre class="language-none"><code class="language-none">8048d7a:   be 00 00 00 00          mov    $0x0,%esi 8048d7f:   8b 44 b4 10             mov    0x10(%esp,%esi,4),%eax 8048d83:   83 e8 01                sub    $0x1,%eax 8048d86:   83 f8 05                cmp    $0x5,%eax 8048d89:   76 05                   jbe    8048d90 &lt;phase_6+0x2f&gt; 8048d8b:   e8 16 03 00 00          call   80490a6 &lt;explode_bomb&gt; 8048d90:   83 c6 01                add    $0x1,%esi 8048d93:   83 fe 06                cmp    $0x6,%esi 8048d96:   74 33                   je     8048dcb &lt;phase_6+0x6a&gt;</code></pre><p>这里进入一个循环，由<code>$0x0,%esi、mov 0x10(%esp,%esi,4),%eax</code>、<code>sub $0x1,%eax</code>和<code>cmp $0x5,%eax</code>发现输入的数必须小于等于6（注意<code>%eax</code>与5比较之前减去了1），<code>add $0x1,%esi、cmp $0x6,%esi</code>是循环条件，保证遍历输入的6个数，确定其大小。</p><pre class="language-none"><code class="language-none">8048d98:   89 f3                   mov    %esi,%ebx 8048d9a:   8b 44 9c 10             mov    0x10(%esp,%ebx,4),%eax 8048d9e:   39 44 b4 0c             cmp    %eax,0xc(%esp,%esi,4) 8048da2:   75 05                   jne    8048da9 &lt;phase_6+0x48&gt; 8048da4:   e8 fd 02 00 00          call   80490a6 &lt;explode_bomb&gt; 8048da9:   83 c3 01                add    $0x1,%ebx 8048dac:   83 fb 05                cmp    $0x5,%ebx 8048daf:   7e e9                   jle    8048d9a &lt;phase_6+0x39&gt; 8048db1:   eb cc                   jmp    8048d7f &lt;phase_6+0x1e&gt;</code></pre><p>判断完一个数（记为<code>x</code>）的大小后进行嵌套的循环，其中<code>mov 0x10(%esp,%ebx,4),%eax</code>和<code>cmp %eax,0xc(%esp,%esi,4)</code>把后面的数和x进行比较，不相等才不会引发爆炸。这一层循环比较x和它后面的所有数。这两层循环就能确定输入的所有数都不相等。</p><pre class="language-none"><code class="language-none">8048db3:   8b 52 08                mov    0x8(%edx),%edx 8048db6:   83 c0 01                add    $0x1,%eax 8048db9:   39 c8                   cmp    %ecx,%eax 8048dbb:   75 f6                   jne    8048db3 &lt;phase_6+0x52&gt;​ 8048dbd:   89 54 b4 28             mov    %edx,0x28(%esp,%esi,4); 8048dc1:   83 c3 01                add    $0x1,%ebx 8048dc4:   83 fb 06                cmp    $0x6,%ebx 8048dc7:   75 07                   jne    8048dd0 &lt;phase_6+0x6f&gt;; 8048dc9:   eb 1c                   jmp    8048de7 &lt;phase_6+0x86&gt;​ 8048dcb:   bb 00 00 00 00          mov    $0x0,%ebx​ 8048dd0:   89 de                   mov    %ebx,%esi 8048dd2:   8b 4c 9c 10             mov    0x10(%esp,%ebx,4),%ecx 8048dd6:   b8 01 00 00 00          mov    $0x1,%eax 8048ddb:   ba 3c c1 04 08          mov    $0x804c13c,%edx 8048de0:   83 f9 01                cmp    $0x1,%ecx 8048de3:   7f ce                   jg     8048db3 &lt;phase_6+0x52&gt; 8048de5:   eb d6                   jmp    8048dbd &lt;phase_6+0x5c&gt;</code></pre><p>做完之前的检查后程序跳到了<code>8048dcb</code>对应的行，这里也是一个循环，在这个循环中，以<code>0x804c13c</code>为基址，之前输入的数减1再乘8作为偏移量，按数被输入的顺序将对应的元素存入栈帧。</p><p>输入<code>x/20wx 0x804c13c</code>，得到如下内容：</p><p><img src="https://i.loli.net/2021/06/05/IYUkiuCAZMjdDzb.jpg" alt="contents" loading="lazy"></p><p>可以发现前面保存的内容都是地址的形式。由这些内容还可以看出应该输入的数是1到6这六个数。</p><p>如果输入的第一个数是<code>2</code>，那么偏移量是<code>8</code>，保存的地址就是<code>0x804c144</code>处的内容<code>0x804c148</code>。</p><pre class="language-none"><code class="language-none">8048de7:   8b 5c 24 28             mov    0x28(%esp),%ebx 8048deb:   8b 44 24 2c             mov    0x2c(%esp),%eax 8048def:   89 43 08                mov    %eax,0x8(%ebx) 8048df2:   8b 54 24 30             mov    0x30(%esp),%edx 8048df6:   89 50 08                mov    %edx,0x8(%eax) 8048df9:   8b 44 24 34             mov    0x34(%esp),%eax 8048dfd:   89 42 08                mov    %eax,0x8(%edx) 8048e00:   8b 54 24 38             mov    0x38(%esp),%edx 8048e04:   89 50 08                mov    %edx,0x8(%eax) 8048e07:   8b 44 24 3c             mov    0x3c(%esp),%eax 8048e0b:   89 42 08                mov    %eax,0x8(%edx) 8048e0e:   c7 40 08 00 00 00 00    movl   $0x0,0x8(%eax)</code></pre><p>之前保存完地址之后，程序按顺序将这些地址指向的数也保存进栈帧，按照上面假设的情况，保存的第一项是<code>0x143</code>。</p><pre class="language-none"><code class="language-none">8048e15:   be 05 00 00 00          mov    $0x5,%esi 8048e1a:   8b 43 08                mov    0x8(%ebx),%eax 8048e1d:   8b 10                   mov    (%eax),%edx 8048e1f:   39 13                   cmp    %edx,(%ebx) 8048e21:   7e 05                   jle    8048e28 &lt;phase_6+0xc7&gt; 8048e23:   e8 7e 02 00 00          call   80490a6 &lt;explode_bomb&gt;​ 8048e28:   8b 5b 08                mov    0x8(%ebx),%ebx 8048e2b:   83 ee 01                sub    $0x1,%esi 8048e2e:   75 ea                   jne    8048e1a &lt;phase_6+0xb9&gt;；aaa​ 8048e30:   83 c4 44                add    $0x44,%esp 8048e33:   5b                      pop    %ebx 8048e34:   5e                      pop    %esi 8048e35:   c3                      ret</code></pre><p>在这之后，进行比较排序。<code>mov 0x8(%ebx),%eax</code>、<code>mov (%eax),%edx</code>和<code>cmp %edx,(%ebx)</code>每次都取一项与前一项进行比较，前一项小于后一项才不会爆炸。<code>sub  $0x1,%esi</code>、<code>jne 8048e1a &lt;phase_6+0xb9&gt;</code>是循环条件。</p><p>可以发现保存的数与输入的数的对应关系：</p><pre class="language-none"><code class="language-none">277 1143 21f3 331d 4281 58c  6</code></pre><p>按升序排列：</p><pre class="language-none"><code class="language-none">8c  6143 21f3 3277 1281 531d 4</code></pre><p>也就是说输入数的顺序应该是6、2、3、1、5、4。</p><p>输入<code>6 2 3 1 5 4</code>，终端输出了<code>Congratulations! You&#39;ve defused the bomb!</code>，第六关通过。</p><p><img src="https://i.loli.net/2021/06/05/4yp7FVA1wiEMkrI.jpg" alt="phase6" loading="lazy"></p><h3 id="隐藏关卡"><a href="#隐藏关卡" class="headerlink" title="隐藏关卡"></a>隐藏关卡</h3><p>看起来我们已经解决了所有问题，但是事情好像并不像我们想得那么简单。</p><pre class="language-none"><code class="language-none">&#x2F;* Wow, they got it!  But isn&#39;t something... missing?  Perhaps * something they overlooked?  Mua ha ha ha ha! *&#x2F;</code></pre><p>这赤裸裸的嘲讽，能忍吗？（doge）</p><p>发现汇编代码中存在<code>secret_phase</code>，但是之前的过程并没有用到，猜测它是一个隐藏关卡。</p><h4 id="进入条件"><a href="#进入条件" class="headerlink" title="进入条件"></a>进入条件</h4><p>为了找到进入该关卡的条件，在汇编代码中寻找<code>secret_phase</code>，发现只有<code>phase_defused</code>调用了该函数。</p><p>首先分析<code>phase_defused</code>，它在通过每一个关卡后被调用。</p><pre class="language-none"><code class="language-none">0804922b &lt;phase_defused&gt;: 804922b:   81 ec 8c 00 00 00       sub    $0x8c,%esp 8049231:   65 a1 14 00 00 00       mov    %gs:0x14,%eax 8049237:   89 44 24 7c             mov    %eax,0x7c(%esp) 804923b:   31 c0                   xor    %eax,%eax 804923d:   83 3d cc c3 04 08 06    cmpl   $0x6,0x804c3cc 8049244:   75 72                   jne    80492b8 &lt;phase_defused+0x8d&gt;</code></pre><p><code>cmpl $0x6,0x804c3cc</code>可能与通过之前六关有关，没有全部通过就不会触发隐藏关卡。</p><pre class="language-none"><code class="language-none">8049246:   8d 44 24 2c             lea    0x2c(%esp),%eax 804924a:   89 44 24 10             mov    %eax,0x10(%esp) 804924e:   8d 44 24 28             lea    0x28(%esp),%eax 8049252:   89 44 24 0c             mov    %eax,0xc(%esp) 8049256:   8d 44 24 24             lea    0x24(%esp),%eax 804925a:   89 44 24 08             mov    %eax,0x8(%esp) 804925e:   c7 44 24 04 91 a3 04    movl   $0x804a391,0x4(%esp) 8049265:   08  8049266:   c7 04 24 d0 c4 04 08    movl   $0x804c4d0,(%esp) 804926d:   e8 fe f5 ff ff          call   8048870 &lt;__isoc99_sscanf@plt&gt;</code></pre><p>把两个立即数地址传给<code>&lt;__isoc99_sscanf@plt&gt;</code>。查看第一个地址（<code>x/s 0x804a391</code>）发现是<code>&quot;%d %d %s&quot;</code>，应该输入两个整数和一个字符串。后一个地址<code>0x804c4d0</code>应该是输入时的地址，查看每一个关卡输入时的地址，发现<strong>第四关</strong>输入时的地址正好是<code>0x804c4d0</code>。</p><p><img src="https://i.loli.net/2021/06/05/x7tO5IuYpvTCgKE.jpg" alt="input4" loading="lazy"></p><pre class="language-none"><code class="language-none">8049272:   83 f8 03                cmp    $0x3,%eax 8049275:   75 35                   jne    80492ac &lt;phase_defused+0x81&gt; 8049277:   c7 44 24 04 9a a3 04    movl   $0x804a39a,0x4(%esp) 804927e:   08  804927f:   8d 44 24 2c             lea    0x2c(%esp),%eax 8049283:   89 04 24                mov    %eax,(%esp) 8049286:   e8 09 fd ff ff          call   8048f94 &lt;strings_not_equal&gt; 804928b:   85 c0                   test   %eax,%eax 804928d:   75 1d                   jne    80492ac &lt;phase_defused+0x81&gt; 804928f:   c7 04 24 60 a2 04 08    movl   $0x804a260,(%esp) 8049296:   e8 65 f5 ff ff          call   8048800 &lt;puts@plt&gt; 804929b:   c7 04 24 88 a2 04 08    movl   $0x804a288,(%esp) 80492a2:   e8 59 f5 ff ff          call   8048800 &lt;puts@plt&gt; 80492a7:   e8 db fb ff ff          call   8048e87 &lt;secret_phase&gt;​ 80492ac:   c7 04 24 c0 a2 04 08    movl   $0x804a2c0,(%esp) 80492b3:   e8 48 f5 ff ff          call   8048800 &lt;puts@plt&gt; 80492b8:   8b 44 24 7c             mov    0x7c(%esp),%eax 80492bc:   65 33 05 14 00 00 00    xor    %gs:0x14,%eax 80492c3:   74 05                   je     80492ca &lt;phase_defused+0x9f&gt; 80492c5:   e8 06 f5 ff ff          call   80487d0 &lt;__stack_chk_fail@plt&gt; 80492ca:   81 c4 8c 00 00 00       add    $0x8c,%esp 80492d0:   c3                      ret</code></pre><p>将<code>&lt;__isoc99_sscanf@plt&gt;</code>的返回值与3比较，猜测该返回值应该是参数的数量，等于3才可能解锁隐藏关。然后又传递了一个地址<code>0x804a39a</code>，将该地址处的字符串与输入的字符串比较，相等才能解锁隐藏关。在gdb中输入<code>x/s 0x804a39a</code>，得到该处的字符串是<code>DrEvil</code>。</p><p>所以在进行第四关时，输入两个数后再输入<code>DrEvil</code>，通过第六关之后即可进入<code>secret_phase</code>。第四关里面获取输入元素数量也使用了<code>&lt;__isoc99_sscanf@plt&gt;</code>，在那里给的参数是<code>&quot;%d %d&quot;</code>，应该是只能接受两个输入，即使输入了三个，返回值也会是2，第四关的通关不受影响。</p><p>进入secret_phase：</p><p><img src="https://i.loli.net/2021/06/05/CRqUj6n8Ki7ZlDd.jpg" alt="enter-sp" loading="lazy"></p><h4 id="分析secret-phase"><a href="#分析secret-phase" class="headerlink" title="分析secret_phase"></a>分析secret_phase</h4><pre class="language-none"><code class="language-none">08048e87 &lt;secret_phase&gt;: 8048e87:   53                      push   %ebx 8048e88:   83 ec 18                sub    $0x18,%esp 8048e8b:   e8 3d 02 00 00          call   80490cd &lt;read_line&gt; 8048e90:   c7 44 24 08 0a 00 00    movl   $0xa,0x8(%esp) 8048e97:   00  8048e98:   c7 44 24 04 00 00 00    movl   $0x0,0x4(%esp) 8048e9f:   00  8048ea0:   89 04 24                mov    %eax,(%esp) 8048ea3:   e8 38 fa ff ff          call   80488e0 &lt;strtol@plt&gt;</code></pre><p>由<code>&lt;read_line&gt;</code>可知要有一行输入，然后输入的内容和<code>0xa</code>、<code>0x0</code>两个立即数一起作为<code>&lt;strtol@plt&gt;</code>的参数。<code>&lt;strtol@plt&gt;</code>的作用是把参数按照其base（即进制）转换成长整型数，由此可知应该输入的是一个数。</p><pre class="language-none"><code class="language-none">8048ea8:   89 c3                   mov    %eax,%ebx 8048eaa:   8d 40 ff                lea    -0x1(%eax),%eax 8048ead:   3d e8 03 00 00          cmp    $0x3e8,%eax 8048eb2:   76 05                   jbe    8048eb9 &lt;secret_phase+0x32&gt; 8048eb4:   e8 ed 01 00 00          call   80490a6 &lt;explode_bomb&gt;</code></pre><p>输入的数应该小于等于1001。</p><pre class="language-none"><code class="language-none">8048eb9:   89 5c 24 04             mov    %ebx,0x4(%esp); 8048ebd:   c7 04 24 88 c0 04 08    movl   $0x804c088,(%esp) 8048ec4:   e8 6d ff ff ff          call   8048e36 &lt;fun7&gt; 8048ec9:   83 f8 07                cmp    $0x7,%eax 8048ecc:   74 05                   je     8048ed3 &lt;secret_phase+0x4c&gt; 8048ece:   e8 d3 01 00 00          call   80490a6 &lt;explode_bomb&gt;</code></pre><p>把地址<code>0x804c088</code>和输入的数作为参数调用<code>fun7</code>。要求<code>fun7</code>的返回值等于7。</p><p>接下来分析<code>fun7</code>：</p><p>记<code>fun7</code>的参数为<code>x</code>和<code>y</code>，在<code>secret_phase</code>中调用时<code>x</code>是一个地址。</p><pre class="language-none"><code class="language-none">08048e36 &lt;fun7&gt;: 8048e36:   53                      push   %ebx 8048e37:   83 ec 18                sub    $0x18,%esp 8048e3a:   8b 54 24 20             mov    0x20(%esp),%edx 8048e3e:   8b 4c 24 24             mov    0x24(%esp),%ecx 8048e42:   85 d2                   test   %edx,%edx 8048e44:   74 37                   je     8048e7d &lt;fun7+0x47&gt;</code></pre><p>它是一个递归函数，当x为0时返回<code>0xffffffff</code>。不过<code>secret_phase</code>传给它的x不为0。</p><pre class="language-none"><code class="language-none">8048e46:   8b 1a                   mov    (%edx),%ebx 8048e48:   39 cb                   cmp    %ecx,%ebx 8048e4a:   7e 13                   jle    8048e5f &lt;fun7+0x29&gt; 8048e4c:   89 4c 24 04             mov    %ecx,0x4(%esp) 8048e50:   8b 42 04                mov    0x4(%edx),%eax 8048e53:   89 04 24                mov    %eax,(%esp) 8048e56:   e8 db ff ff ff          call   8048e36 &lt;fun7&gt; 8048e5b:   01 c0                   add    %eax,%eax 8048e5d:   eb 23                   jmp    8048e82 &lt;fun7+0x4c&gt;</code></pre><p>若x不为0，当x指向的值大于y，将地址x加4，和y一起作为参数调用fun7，返回其返回值的2倍。当x指向的值等于y，返回0。</p><pre class="language-none"><code class="language-none">8048e5f:   b8 00 00 00 00          mov    $0x0,%eax 8048e64:   39 cb                   cmp    %ecx,%ebx 8048e66:   74 1a                   je     8048e82 &lt;fun7+0x4c&gt;​ 8048e68:   89 4c 24 04             mov    %ecx,0x4(%esp) 8048e6c:   8b 42 08                mov    0x8(%edx),%eax 8048e6f:   89 04 24                mov    %eax,(%esp) 8048e72:   e8 bf ff ff ff          call   8048e36 &lt;fun7&gt;​ 8048e77:   8d 44 00 01             lea    0x1(%eax,%eax,1),%eax 8048e7b:   eb 05                   jmp    8048e82 &lt;fun7+0x4c&gt;</code></pre><p>当x指向的值小于y，将地址x加8，和y一起作为参数调用fun7，返回其返回值的2倍加1。</p><pre class="language-none"><code class="language-none">8048e7d:   b8 ff ff ff ff          mov    $0xffffffff,%eax 8048e82:   83 c4 18                add    $0x18,%esp 8048e85:   5b                      pop    %ebx 8048e86:   c3                      ret</code></pre><p>最终需要的返回值是7，最内层返回值应该是0，即在最内层x所指向的值与y相等，再往外一层返回2<em>0+1，再往外一层返回2</em>1+1，最外层返回2*3+1。</p><p>输入<code>x/44x 0x804c088</code>查看保存的值。</p><p><img src="https://i.loli.net/2021/06/05/rIbYyvn1j2AHZa7.jpg" alt="values" loading="lazy"></p><p><code>secret_phase</code>调用<code>fun7</code>时，x为<code>0x804c088</code>，y是输入的数。</p><p><code>0x804c088+8</code>等于<code>0x804c090</code>，该处存放的值为<code>0x804c0a0</code>，是一个地址。</p><p><code>0x804c0a0+8</code>等于<code>0x804c0a8</code>，该处存放的值为<code>0x804c0d0</code>，是一个地址。</p><p><code>0x804c0d0+8</code>等于<code>0x804c0d8</code>，该处存放的值为<code>0x804c130</code>，是一个地址。</p><p>地址<code>0x804c130</code>处保存了一个数，0x3e9，转换成十进制是1001，它应该等于y。</p><p>返回到<code>secret_phase</code>:</p><pre class="language-none"><code class="language-none">8048ed3:   c7 04 24 00 a2 04 08    movl   $0x804a200,(%esp) 8048eda:   e8 21 f9 ff ff          call   8048800 &lt;puts@plt&gt; 8048edf:   e8 47 03 00 00          call   804922b &lt;phase_defused&gt; 8048ee4:   83 c4 18                add    $0x18,%esp 8048ee7:   5b                      pop    %ebx 8048ee8:   c3                      ret</code></pre><p><code>fun7(0x804c088, 1001)</code>的返回值应该是7，使得程序输出通关信息，正常返回。也就是说，要通过<code>secret_phase</code>，应该输入<code>1001</code>。</p><p>输入<code>1001</code>，终端输出了<code>Wow! You&#39;ve defused the secret stage!</code>，隐藏的秘密关卡通过。</p><p><img src="https://i.loli.net/2021/06/05/oSlURyD4XP8NbhZ.jpg" alt="sp" loading="lazy"></p><h3 id="通关"><a href="#通关" class="headerlink" title="通关"></a>通关</h3><p><img src="https://i.loli.net/2021/06/05/TpuSW5DxAa8yQje.jpg" alt="victory" loading="lazy"></p><p>有几关的答案不唯一。这个实验每个人的题目不太一样，不过在网上能找到很多类似的题解来提供思路。和身边的人对比起来，我抽到的题目算是比较常规吧。邪恶博士，谢谢你（才怪）。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;拆掉邪恶博士的炸弹&quot;&gt;&lt;a href=&quot;#拆掉邪恶博士的炸弹&quot; class=&quot;headerlink&quot; title=&quot;拆掉邪恶博士的炸弹&quot;&gt;&lt;/a&gt;拆掉邪恶博士的炸弹&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;这是一个课程实验，感觉有点意思，就记录一下吧。&lt;/p&gt;
&lt;p&gt;分析可能不准确，仅供参考。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;邪恶博士的幽默感&quot;&gt;&lt;a href=&quot;#邪恶博士的幽默感&quot; class=&quot;headerlink&quot; title=&quot;邪恶博士的幽默感&quot;&gt;&lt;/a&gt;邪恶博士的幽默感&lt;/h3&gt;&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;&amp;#x2F;***************************************************************************
 * Dr. Evil&amp;#39;s Insidious Bomb, Version 1.1
 * Copyright 2011, Dr. Evil Incorporated. All rights reserved.
 *
 * LICENSE:
 *
 * Dr. Evil Incorporated (the PERPETRATOR) hereby grants you (the
 * VICTIM) explicit permission to use this bomb (the BOMB).  This is a
 * time limited license, which expires on the death of the VICTIM.
 * The PERPETRATOR takes no responsibility for damage, frustration,
 * insanity, bug-eyes, carpal-tunnel syndrome, loss of sleep, or other
 * harm to the VICTIM.  Unless the PERPETRATOR wants to take credit,
 * that is.  The VICTIM may not distribute this bomb source code to
 * any enemies of the PERPETRATOR.  No VICTIM may debug,
 * reverse-engineer, run &amp;quot;strings&amp;quot; on, decompile, decrypt, or use any
 * other technique to gain knowledge of and defuse the BOMB.  BOMB
 * proof clothing may not be worn when handling this program.  The
 * PERPETRATOR will not apologize for the PERPETRATOR&amp;#39;s poor sense of
 * humor.  This license is null and void where the BOMB is prohibited
 * by law.
 ***************************************************************************&amp;#x2F;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;满满的中二之感，连我都看不惯了，解之。&lt;/p&gt;
&lt;p&gt;由于我们并没有完整的源代码，只能通过汇编代码来尝试推出博士&lt;del&gt;这个邪恶的刀客塔&lt;/del&gt;到底在炸弹里做了些什么手脚了。&lt;/p&gt;</summary>
    
    
    
    <category term="快去学习" scheme="https://afool.top/categories/%E5%BF%AB%E5%8E%BB%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习笔记" scheme="https://afool.top/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>3.程序的机器级表示</title>
    <link href="https://afool.top/learning/machine_level_representation_of_programs/"/>
    <id>https://afool.top/learning/machine_level_representation_of_programs/</id>
    <published>2021-04-26T12:29:35.000Z</published>
    <updated>2022-05-15T15:32:02.555Z</updated>
    
    <content type="html"><![CDATA[<h1 id="程序的机器级表示"><a href="#程序的机器级表示" class="headerlink" title="程序的机器级表示"></a>程序的机器级表示</h1><p>2020-2021-2 计算机系统</p><h2 id="控制"><a href="#控制" class="headerlink" title="控制"></a>控制</h2><h3 id="处理器状态"><a href="#处理器状态" class="headerlink" title="处理器状态"></a>处理器状态</h3><ul><li>当前运行运行程序的相关信息：<ul><li>临时数据（%eax等通用寄存器）；</li><li>运行栈帧的地址（%ebp，%esp）；</li><li>即将要执行的指令地址（%eip……）；</li><li>标志位（CF、ZF、SF、OF）。</li></ul></li></ul><h3 id="条件码"><a href="#条件码" class="headerlink" title="条件码"></a>条件码</h3><ul><li>每个条件码占一个bit：<ul><li>CF：最高位产生进位、无符号操作数的溢出；</li><li>SF：符号标志，操作结果为负数（有符号数a - b &lt; 0）；</li><li>ZF：零标志；</li><li>OF：有符号数溢出。</li></ul></li></ul><p>通过条件码可以确定状态。</p><h3 id="跳转指令"><a href="#跳转指令" class="headerlink" title="跳转指令"></a>跳转指令</h3><table><thead><tr><th align="left">jx</th><th>条件</th><th>描述</th></tr></thead><tbody><tr><td align="left">jmp</td><td>1</td><td>无条件跳转</td></tr><tr><td align="left">je&#x2F;jz</td><td>ZF</td><td>相等&#x2F;结果为0</td></tr><tr><td align="left">jne&#x2F;jnz</td><td>~ZF</td><td>不相等&#x2F;结果非零</td></tr><tr><td align="left">js</td><td>SF</td><td>负数</td></tr><tr><td align="left">jns</td><td>~SF</td><td>非负数</td></tr><tr><td align="left">jg</td><td><del>(SF^OF)&amp;</del>ZF</td><td>大于（有符号数）</td></tr><tr><td align="left">jge</td><td>~(SF^OF)</td><td>大于等于（有符号数）</td></tr><tr><td align="left">jl</td><td>(SF^OF)</td><td>小于（有符号数）</td></tr><tr><td align="left">jle</td><td>~(SF^OF)|ZF</td><td>小于等于（有符号数）</td></tr><tr><td align="left">ja</td><td><del>CF&amp;</del>ZF</td><td>大于（无符号数）</td></tr><tr><td align="left">jb</td><td>CF</td><td>小于（无符号数）</td></tr></tbody></table><h3 id="条件跳转"><a href="#条件跳转" class="headerlink" title="条件跳转"></a>条件跳转</h3><pre class="language-assembly" data-language="assembly"><code class="language-assembly">cmpa, bjxxxx</code></pre><p>C语言的goto与之类似。</p><h3 id="分支跳转"><a href="#分支跳转" class="headerlink" title="分支跳转"></a>分支跳转</h3><h3 id="条件传送"><a href="#条件传送" class="headerlink" title="条件传送"></a>条件传送</h3><p>先计算一个条件操作的两个结果，然后根据条件选择某一个。</p><h4 id="与条件跳转比较"><a href="#与条件跳转比较" class="headerlink" title="与条件跳转比较"></a>与条件跳转比较</h4><p>C Code：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">comvdiff</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> tval <span class="token operator">=</span> y<span class="token operator">-</span>x<span class="token punctuation">;</span>  <span class="token keyword">int</span> rval <span class="token operator">=</span> x<span class="token operator">-</span>y<span class="token punctuation">;</span>  <span class="token keyword">int</span> test <span class="token operator">=</span> x <span class="token operator">&lt;</span> y<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>test<span class="token punctuation">)</span> rval <span class="token operator">=</span> tval<span class="token punctuation">;</span>  result rval<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>条件传送：</p><pre class="language-assembly" data-language="assembly"><code class="language-assembly">comvdiff:movl8(%ebp), %ecxmovl12(%ebp), %edxmovl%edx, %ebxsubl%ecx, %ebxmovl%ecx, %eaxsubl%edx, %eaxcmpl%edx, %ecxcmovl%ebx, %eax</code></pre><p>条件跳转：</p><pre class="language-assembly" data-language="assembly"><code class="language-assembly">absdiff:pushl%ebpmovl%esp, %ebpmovl8(%ebp), %edxmovl12(%ebp), %eaxcmpl%eax, %edxjle .L6subl%eax, %edxmovl%edx, %eaxjmp .L7.L6:subl%edx, %eax.L7:popl%ebpret</code></pre><p>避免了跳转指令，CPU无需做分支预测，避免预测错误的代价；流水线效率更高。（优化编译）</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ol><li>计算代价<ul><li>两个计算过程都要执行；</li><li>一般只有当两个计算过程都比较简单的时候才能发挥优势；</li><li><code>val = Test(x)? Hard1(x) : Hard2(x);</code></li></ul></li><li>非法操作<ul><li>在p为0的时候，仍然会去引用 *p，从而产生非法操作；</li><li><code>val = p? *p : 0;</code></li></ul></li><li>副作用<ul><li>两个表达式都进行了计算；</li><li>产生了意料之外的赋值过程。</li><li><code>val= x &gt; 0? x*=7 : x+=3;</code></li></ul></li></ol><h3 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do-while循环"></a>do-while循环</h3><p>例：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">pcount_do</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>    result <span class="token operator">+=</span> x <span class="token operator">&amp;</span> <span class="token number">0x1</span><span class="token punctuation">;</span>    x <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-assembly" data-language="assembly"><code class="language-assembly">movl$0,%ecx# result &#x3D; 0.L2:# loopmovl%edx,%eaxandl$1,%eax# t &#x3D; x &amp; 1addl%eax,%ecx# result +&#x3D; tshrl%edx# x &gt;&gt; 1jne.L2# if !0, goto loop</code></pre><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>while和do-while：</p><ul><li>都是条件测试失败退出循环</li><li>do-while循环至少执行一次循环体</li></ul><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><h3 id="switch语句与跳转表"><a href="#switch语句与跳转表" class="headerlink" title="switch语句与跳转表"></a>switch语句与跳转表</h3><p>switch-case</p><p>当case数大于4且case间间隔小于13时会使用跳转表，否则使用cmp-jmp式的跳转。</p><p>跳转表例：</p><pre class="language-assembly" data-language="assembly"><code class="language-assembly">.section .rodata.align 4.L4:.long .L8.long .L3.long .L5.long .L9.long .L8.long .L7.long .L7</code></pre><p>该跳转表基址为.L4，在汇编代码中跳转的指令是这样的：<code>jmp *.L4(,%eax,4)</code>，每个地址占4个字节。</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="栈帧"><a href="#栈帧" class="headerlink" title="栈帧"></a>栈帧</h3><blockquote><p>机器用栈来<strong>传递过程参数、存储返回信息、保存寄存器用于以后恢复，以及本地存储</strong>。而为单个过程分配的那部分栈称为栈帧（stack frame）。</p><p>每一个函数或过程在执行时，都需要在内存中分配一个空间来保存运行时数据，这个空间由于是采用栈的方式进行操作，所以也称为栈帧。</p></blockquote><ul><li>当前函数或过程的栈顶地址保存在 %esp 中，栈底地址保存在 %ebp 中；</li><li>栈是向“下”增长的，或者说是向地址 0x0 处增加的，因此 %esp 中的值小于或等于 %ebp<br>中的值；</li><li>栈帧是内存中一段连续的内存空间；</li><li>被调用者的栈帧紧挨着调用者的栈帧；</li><li>待补充。</li></ul><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>T A[L]</p><ul><li>type L，length L；</li><li>在内存中连续分配 L*sizeof(T) 个字节；</li><li>标识符 A可用于表示数组的首地址，也可以通过 Type T*转换成数组首地址。</li></ul><p>连续声明的数组一般也是连续分配。</p><p>结构、联合</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;程序的机器级表示&quot;&gt;&lt;a href=&quot;#程序的机器级表示&quot; class=&quot;headerlink&quot; title=&quot;程序的机器级表示&quot;&gt;&lt;/a&gt;程序的机器级表示&lt;/h1&gt;&lt;p&gt;2020-2021-2 计算机系统&lt;/p&gt;
&lt;h2 id=&quot;控制&quot;&gt;&lt;a href=&quot;#控制</summary>
      
    
    
    
    <category term="快去学习" scheme="https://afool.top/categories/%E5%BF%AB%E5%8E%BB%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>i3wm配置备份</title>
    <link href="https://afool.top/post/i3wm_config_backup/"/>
    <id>https://afool.top/post/i3wm_config_backup/</id>
    <published>2021-04-09T14:43:00.000Z</published>
    <updated>2022-05-15T15:32:02.557Z</updated>
    
    <content type="html"><![CDATA[<h2 id="i3wm配置"><a href="#i3wm配置" class="headerlink" title="i3wm配置"></a>i3wm配置</h2><blockquote><p>i3wm的配置备份，基本只写了非默认的部分。</p></blockquote><span id="more"></span><h2 id="x2F-config-x2F-i3-x2F-config"><a href="#x2F-config-x2F-i3-x2F-config" class="headerlink" title="~&#x2F;.config&#x2F;i3&#x2F;config"></a>~&#x2F;.config&#x2F;i3&#x2F;config</h2><pre class="language-text" data-language="text"><code class="language-text"># mod键为win键set $mod Mod4gaps inner 5# 设置i3窗口间的空隙大小，单位是像素。new_window 1pixel# 设置新的窗口的边界宽度，效果是不显示窗口的title。new_float 1pixel# 新的浮动窗口的边界宽度，同上。smart_borders on# 在只有一个窗口的情况下自动最大化当前的窗口，不处理窗口的Gap。# 电源管理exec --no-startup-id xfce4-power-manager#登录时 启用窗口透明exec_always --no-startup-id picom -b#exec_always --no-startup-id ibus-daemon -dr# fcitx5输入法exec_always --no-startup-id fcitx5#自动平铺exec_always --no-startup-id autotiling#随机壁纸exec --no-startup-id feh --randomize --bg-fill ~/Pictures/Wallpapersfont pango:DejaVu Sans Mono 10# start a terminal : alacrittybindsym $mod+Return exec alacritty# 应用菜单改为rofibindsym $mod+d exec --no-startup-id rofi -show drun# Start i3bar to display a workspace bar (plus the system information i3status# finds out, if available)bar &#123;        status_command i3status        position top&#125;</code></pre><h2 id="x2F-config-x2F-alacritty-x2F-alacritty-yml"><a href="#x2F-config-x2F-alacritty-x2F-alacritty-yml" class="headerlink" title="~&#x2F;.config&#x2F;alacritty&#x2F;alacritty.yml"></a>~&#x2F;.config&#x2F;alacritty&#x2F;alacritty.yml</h2><pre class="language-text" data-language="text"><code class="language-text"># KDE Breeze (Ported from Konsole)colors:  # Default colors  primary:    background: '#232627'    foreground: '#fcfcfc'    dim_foreground: '#eff0f1'    bright_foreground: '#ffffff'    dim_background: '#31363b'    bright_background: '#000000'  # Normal colors  normal:    black: '#232627'    red: '#ed1515'    green: '#11d116'    yellow: '#f67400'    blue: '#1d99f3'    magenta: '#9b59b6'    cyan: '#1abc9c'    white: '#fcfcfc'  # Bright colors  bright:    black: '#7f8c8d'    red: '#c0392b'    green: '#1cdc9a'    yellow: '#fdbc4b'    blue: '#3daee9'    magenta: '#8e44ad'    cyan: '#16a085'    white: '#ffffff'  # Dim colors  dim:    black: '#31363b'    red: '#783228'    green: '#17a262'    yellow: '#b65619'    blue: '#1b668f'    magenta: '#614a73'    cyan: '#186c60'    white: '#63686d'background_opacity: 0.90# 设置字体font:  normal:    family: "Hack Nerd Font"    style: Regular  bold:    family: "Hack Nerd Font"    style: Bold  italic:    family: "Hack Nerd Font"    style: Italic  bold_italic:    family: "Hack Nerd Font"    style: Bold Italic  # 字大小  size: 8.0   offset:    x: 0    y: 0  glyph_offset:    x: 0    y: 0window:  padding:    x: 2    y: 2scrolling:# 回滚缓冲区中的最大行数,指定“0”将禁用滚动。  history: 10000  # 滚动行数   multiplier: 10# 如果为‘true’，则使用亮色变体绘制粗体文本。draw_bold_text_with_bright_colors: trueselection:  semantic_escape_chars: ',│`|:"'' ()[]&#123;&#125;&lt;>'  save_to_clipboard: truelive_config_reload: true# 解决ssh之后不能正确识别终端类型的问题env:  TERM: xterm-256color</code></pre><h2 id="x2F-etc-x2F-X11-x2F-xorg-conf-d-x2F-90-touchpad-conf"><a href="#x2F-etc-x2F-X11-x2F-xorg-conf-d-x2F-90-touchpad-conf" class="headerlink" title="&#x2F;etc&#x2F;X11&#x2F;xorg.conf.d&#x2F;90-touchpad.conf"></a>&#x2F;etc&#x2F;X11&#x2F;xorg.conf.d&#x2F;90-touchpad.conf</h2><pre class="language-text" data-language="text"><code class="language-text">Section "InputClass"        Identifier "touchpad"        MatchIsTouchpad "on"        Driver "libinput"        Option "Tapping" "on"Option "NaturalScrolling" "on"EndSection</code></pre><h2 id="x2F-etc-x2F-i3status-conf"><a href="#x2F-etc-x2F-i3status-conf" class="headerlink" title="&#x2F;etc&#x2F;i3status.conf"></a>&#x2F;etc&#x2F;i3status.conf</h2><pre class="language-text" data-language="text"><code class="language-text">general &#123;        colors = true        interval = 5&#125;order += "wireless _first_"# order += "ethernet _first_"order += "volume master"order += "battery all"order += "disk /"order += "load"order += "memory"order += "tztime local"volume master &#123;        format = "♪: %volume"        format_muted = "♪: muted (%volume)"        device = "default"        mixer = "Master"        mixer_idx = 0&#125;wireless _first_ &#123;        format_up = "W: (%quality at %essid)"        format_down = "W: down"&#125;ethernet _first_ &#123;        format_up = "E: %ip (%speed)"        format_down = "E: down"&#125;battery all &#123;        format = "%status %percentage %remaining"        format_down = "No battery"        status_chr = "⚡"        status_bat = "🔋"        status_unk = "?"        status_full = "☻"        path = "/sys/class/power_supply/BAT%d/uevent"        low_threshold = 15&#125;disk "/" &#123;        format = "/ %avail free"&#125;load &#123;        format = "Load %1min"&#125;memory &#123;        format = "RAM %used | %available"        threshold_degraded = "1G"        format_degraded = "MEMORY &lt; %available"&#125;tztime local &#123;        format = "%Y-%m-%d %H:%M"&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;i3wm配置&quot;&gt;&lt;a href=&quot;#i3wm配置&quot; class=&quot;headerlink&quot; title=&quot;i3wm配置&quot;&gt;&lt;/a&gt;i3wm配置&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;i3wm的配置备份，基本只写了非默认的部分。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="奇怪的知识增加了" scheme="https://afool.top/categories/%E5%A5%87%E6%80%AA%E7%9A%84%E7%9F%A5%E8%AF%86%E5%A2%9E%E5%8A%A0%E4%BA%86/"/>
    
    
    <category term="i3wm" scheme="https://afool.top/tags/i3wm/"/>
    
  </entry>
  
  <entry>
    <title>2.位、字节与信息存储</title>
    <link href="https://afool.top/learning/bit_byte_and_information_storage/"/>
    <id>https://afool.top/learning/bit_byte_and_information_storage/</id>
    <published>2021-04-03T16:13:00.000Z</published>
    <updated>2022-05-15T15:32:02.551Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2020-2021-2-计算机系统"><a href="#2020-2021-2-计算机系统" class="headerlink" title="2020-2021-2 计算机系统"></a>2020-2021-2 计算机系统</h1><p>2020-2021学年第二学期 计算机系统</p><p>基于32位系统</p><p>随上课进度更新</p><h2 id="位、字节与信息存储"><a href="#位、字节与信息存储" class="headerlink" title="位、字节与信息存储"></a>位、字节与信息存储</h2><h3 id="机器字长"><a href="#机器字长" class="headerlink" title="机器字长"></a>机器字长</h3><p>指明整数和指针数据标称大小</p><h3 id="位级操作"><a href="#位级操作" class="headerlink" title="位级操作"></a>位级操作</h3><ul><li><strong>一个内存地址</strong>存放的是<strong>一个字节</strong>（8个bit）；</li><li>地址指明的是某个字节的存放位置；<ul><li>即某数据第一个字节所在位置；</li><li>因此连续存放的<strong>两个字</strong>之间相隔4个地址（32位字长）或8个地址（64位字长）。</li></ul></li></ul><h3 id="大小端"><a href="#大小端" class="headerlink" title="大小端"></a>大小端</h3><p>举例：</p><p>$0x1234</p><table><thead><tr><th align="center">地址</th><th align="center">大端</th><th align="center">小端</th></tr></thead><tbody><tr><td align="center">00</td><td align="center">12</td><td align="center">34</td></tr><tr><td align="center">01</td><td align="center">34</td><td align="center">12</td></tr></tbody></table><p>（小端：高地址、高有效位在后面）</p><h3 id="位移"><a href="#位移" class="headerlink" title="位移"></a>位移</h3><p>左移：x &lt;&lt; y</p><blockquote><p>将x左移y位，在右边填0。</p></blockquote><p>右移：x &gt;&gt; y</p><blockquote><p>逻辑移位：补0</p><p>算术移位：填充符号位</p></blockquote><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><h4 id="整形数据取值范围"><a href="#整形数据取值范围" class="headerlink" title="整形数据取值范围"></a>整形数据取值范围</h4><p>不详细记录。</p><h4 id="整数编码"><a href="#整数编码" class="headerlink" title="整数编码"></a>整数编码</h4><p>假设一个整型数据有w位，用位向量的形式表示这个数的二进制。</p><h5 id="无符号数"><a href="#无符号数" class="headerlink" title="无符号数"></a>无符号数</h5><p>每个介于0 ~ 2^w - 1之间的数都有唯一一个的w位的编码。</p><h5 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h5><p>最高有效位是符号位。</p><p>（函数表示待补）</p><p>例：</p><pre class="language-text" data-language="text"><code class="language-text">B2T 4 ([0001]) = -0 * 2^3 + 0 * 2^2 + 0 * 2^1 + 1 * 2^0 = 0 + 0 + 0 + 1 = 1B2T 4 ([0101]) = -0 * 2^3 + 1 * 2^2 + 0 * 2^1 + 1 * 2^0 = 0 + 4 + 0 + 1 = 5B2T 4 ([1011]) = -1 * 2^3 + 0 * 2^2 + 1 * 2^1 + 1 * 2^0 = -8 + 0 + 2 + 1 = -5B2T 4 ([1111]) = -1 * 2^3 + 1 * 2^2 + 1 * 2^1 + 1 * 2^0 = -8 + 4 + 2 + 1 = -1</code></pre><p>显然，补码的范围是不对称的，|Tmin| &#x3D; |Tmax| + 1。</p><blockquote><p>补码、补码值盒子</p><p>整数表示</p></blockquote><p>求补码的其他方法？</p><h4 id="C语言中的整数"><a href="#C语言中的整数" class="headerlink" title="C语言中的整数"></a>C语言中的整数</h4><ul><li>常数<ul><li>默认是有符号数；</li><li>U作为无符号数的后缀，如0U，1234U。</li></ul></li><li>转换<ul><li>用(类型)来转换，位模式不变，按转换后的类型重新解释；</li><li>也可以通过<strong>赋值语句</strong>和<strong>过程调用</strong>来实现。</li></ul></li></ul><h5 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h5><ul><li>表达式<ul><li>如果一个表达式中同时出现有符号数和无符号数，有符号数直接转成无符号数；</li><li>上述表达式包括比较运算：&lt;，&gt;，&#x3D;&#x3D;，&lt;&#x3D;，&gt;&#x3D;。</li></ul></li></ul><p>例：w &#x3D; 32，Tmin &#x3D; -2147483648，Tmax &#x3D; 2147483647</p><table><thead><tr><th align="left">常数1</th><th align="left">常数2</th><th align="center">关系</th><th align="center">结果</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">0U</td><td align="center">&#x3D;&#x3D;</td><td align="center">1</td></tr><tr><td align="left">-1</td><td align="left">0</td><td align="center">&lt;</td><td align="center">1</td></tr><tr><td align="left">-1</td><td align="left">0U</td><td align="center">&lt;</td><td align="center">0</td></tr><tr><td align="left">2147483647</td><td align="left">-2147483647-1</td><td align="center">&gt;</td><td align="center">1</td></tr><tr><td align="left">2147483647U</td><td align="left">-2147483647-1</td><td align="center">&gt;</td><td align="center">0</td></tr><tr><td align="left">-1</td><td align="left">-2</td><td align="center">&gt;</td><td align="center">1</td></tr><tr><td align="left">(unsigned) -1</td><td align="left">-2</td><td align="center">&gt;</td><td align="center">1</td></tr><tr><td align="left">2147483647</td><td align="left">2147483648U</td><td align="center">&lt;</td><td align="center">1</td></tr><tr><td align="left">2147483647</td><td align="left">(int) 2147483648U</td><td align="center">&lt;</td><td align="center">0</td></tr></tbody></table><h4 id="整数的扩展与截断"><a href="#整数的扩展与截断" class="headerlink" title="整数的扩展与截断"></a>整数的扩展与截断</h4><ul><li><p>符号位扩展</p><ul><li>将w位的有符号数x转换为(w+k)-bit的整数，保持值不变。</li><li>参考算术移位，符号位是几就在高位补充几。</li></ul></li><li><p>截断（例如从无符号整型变成无符号短整型）</p><ul><li>对于无符号数就是mod操作</li><li>对于有符号数，类似于mod，剩下的以补码解释。<blockquote><p>例：</p><p>int x &#x3D; 53191;</p><p>short sx &#x3D; (short)x;    &#x2F;&#x2F;-12345</p></blockquote></li></ul></li></ul><h4 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h4><h5 id="无符号数加法"><a href="#无符号数加法" class="headerlink" title="无符号数加法"></a>无符号数加法</h5><p>忽略最高进位。</p><blockquote><p>通过取模来实现。</p></blockquote><h5 id="补码加法"><a href="#补码加法" class="headerlink" title="补码加法"></a>补码加法</h5><p>舍弃最高位，按补码解释。</p><ul><li>若sum &gt;&#x3D; 2^(w-1)，补码结果为负数，为正溢出，导致结果减少；</li><li>若sum &lt;&#x3D; -2^(w-1)，补码结果为正数，为负溢出，导致结果增加。</li></ul><h4 id="乘除法"><a href="#乘除法" class="headerlink" title="乘除法"></a>乘除法</h4><h5 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h5><p>乘积有2w位，忽略乘积的高w位；</p><p>用移位代替乘法：左移乘，右移除；</p><h5 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h5><ul><li><p>除数为<strong>无符号数</strong>时使用逻辑右移；</p></li><li><p>除数为<strong>有符号数</strong>时使用算术右移；</p></li><li><p>除法的修正</p><ul><li>加偏置值</li></ul></li></ul><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><ul><li>二进制小数点右侧的“位”表示2的分数幂（负幂）；</li><li>其他值只能近似表示。</li></ul><p>例：0.101(2) &#x3D; 0.5 + 0.125 &#x3D; 0.625。</p><h4 id="IEEE浮点数"><a href="#IEEE浮点数" class="headerlink" title="IEEE浮点数"></a>IEEE浮点数</h4><ul><li>数学形式：(-1)^s M 2^E<ul><li>符号位s，确定这个数是正数还是负数，数值0的符号位特殊处理；</li><li>尾数M是一个二进制小数，通常规定在范围1 ~ 2-ε或0 ~ 1-ε；</li><li>阶码E表示2的幂。</li></ul></li></ul><table><thead><tr><th align="center">精度</th><th align="center">s(符号)</th><th align="center">exp(阶码)</th><th align="center">frac(尾数)</th></tr></thead><tbody><tr><td align="center">单精度32-bits</td><td align="center">1</td><td align="center">8-bits</td><td align="center">23-bits</td></tr><tr><td align="center">双精度64-bits</td><td align="center">1</td><td align="center">11-bits</td><td align="center">52-bits</td></tr><tr><td align="center">扩展精度80-bits</td><td align="center">1</td><td align="center">15-bits</td><td align="center">63 or 64-bits</td></tr></tbody></table><h5 id="浮点数的三种情况"><a href="#浮点数的三种情况" class="headerlink" title="浮点数的三种情况"></a>浮点数的三种情况</h5><ol><li><p>规格化的值</p><p> 当exp的位模式既不全为0，也不全为1时都属于这种情况；</p><p> 阶码字段被解释为以<em>偏置</em>形式表示的有符号整数，阶码的值E &#x3D; e - Bias，其中e是无符号数其位表示为e(k-1)…e(1)e(0)，而Bias是一个等于2^k-1 - 1的偏置值；</p><p> 小数字段frac被解释为描述小数值f，其中0 &lt;&#x3D; f &lt; 1。</p><p> 例：</p><p> float F &#x3D; 15213.0；</p><p> 15213(10) &#x3D; 11101101101101(2) &#x3D; 1.1101101101101(2) * 2^13；</p><ul><li>尾数<ul><li>M &#x3D; 1.1101101101101(2)；</li><li>frac &#x3D; <em>1101101101101</em>0000000000(2)；</li></ul></li><li>阶码<ul><li>E &#x3D; 13；</li><li>Bias &#x3D; 127；</li><li>Exp &#x3D; 140 &#x3D; 10001100(2)；</li></ul></li><li>结果<ul><li>0 10001100 11011011011010000000000</li></ul></li></ul></li><li><p>非规格化的值</p><p> 当阶码域全为0时，所表示的数就是<em>非规格化形式</em>。在这种情况下，阶码值是E &#x3D; 1 - Bias，而尾数的值是M &#x3D; f，也就是小数字段的值，不包含隐含的开头的1。</p><ul><li>例：<ul><li>exp &#x3D; 000…0，frac &#x3D; 000…0，此时值为0，符号位决定“+0”或“-0”；</li><li>exp &#x3D; 000…0，frac !&#x3D; 000…0，此时为非常接近0.0的数。</li></ul></li></ul></li><li><p>特殊值</p><p> 当阶码全为1的时候出现。</p><ul><li>情况1：<ul><li>exp &#x3D; 111…1，frac &#x3D; 000…0，表示的是<strong>无穷大</strong>，由符号位决定正负；</li><li>exp &#x3D; 111…1，frac !&#x3D; 000…0，表示的不是一个数（NaN），用来表示一些无法表示的数，如sqrt(-1)等，在某些应用中也可用来表示未初始化的数据。</li></ul></li></ul></li></ol><h4 id="舍入"><a href="#舍入" class="headerlink" title="舍入"></a>舍入</h4><p>四种舍入方式示例：</p><table><thead><tr><th align="center">方式</th><th align="center">1.40</th><th align="center">1.60</th><th align="center">1.50</th><th align="center">2.50</th><th align="center">-1.50</th></tr></thead><tbody><tr><td align="center">向偶数舍入</td><td align="center">1</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">-2</td></tr><tr><td align="center">向零舍入</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">2</td><td align="center">-1</td></tr><tr><td align="center">向下舍入</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">2</td><td align="center">-2</td></tr><tr><td align="center">向上舍入</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">3</td><td align="center">-1</td></tr></tbody></table><p>向偶数舍入能找到最近的匹配值，其他三种用于计算上界和下界。</p><p>向偶数舍入也可以舍入到其他数位：</p><ul><li>中间值舍入到偶数；</li><li>例如，舍入到百分位：<ul><li>1.2349999 -&gt; 1.23；</li><li>1.2350001 -&gt; 1.24；</li><li>1.2350000 -&gt; 1.24；</li><li>1.2450000 -&gt; 1.24。</li></ul></li></ul><p>向偶数舍入法能够运用于二进制小数。</p><ul><li>将最低有效位的值0认为是偶数，值1认为是奇数；</li><li>“中间值”是指舍入位的右边正好是**100…(2)**的形式；</li><li>例如，舍入到1&#x2F;4（小数点右边两位）：<ul><li>2 3&#x2F;32，即10.00<strong>011</strong>(2)，小于中间值，结果为10.00(2)，即2</li><li>2 3&#x2F;16，即10.00<strong>110</strong>(2)，大于中间值，结果为10.01(2)，即2 1&#x2F;4</li><li>2 7&#x2F;8，即10.11<strong>100</strong>(2)，等于中间值，结果为11.00(2)，即3</li><li>2 5&#x2F;8，即10.10<strong>100</strong>(2)，等于中间值，结果为10.10(2)，即2 1&#x2F;2</li></ul></li></ul><h4 id="浮点运算"><a href="#浮点运算" class="headerlink" title="浮点运算"></a>浮点运算</h4><h5 id="浮点数加法"><a href="#浮点数加法" class="headerlink" title="浮点数加法"></a>浮点数加法</h5><ol><li>对阶，小阶向大阶对齐<ul><li>两数的阶码不同，表示小数点的位置没有对齐；</li><li>将原来阶码小的数的尾数右移|ΔE|位，其阶码值加上|ΔE|，即每右移一次尾数要使阶码加1,则该浮点数的值不变（但精度变差了）；</li></ul></li><li>尾数进行加法运算</li><li>结果规格化并进行舍入处理<ul><li>如果尾数不是规格化数，需要进行规格化处理，并进行舍入；</li></ul></li><li>判断溢出<ul><li>根据阶码判断是否溢出。</li></ul></li></ol><h6 id="浮点数加法的数学特性"><a href="#浮点数加法的数学特性" class="headerlink" title="浮点数加法的数学特性"></a>浮点数加法的数学特性</h6><ul><li>与阿贝尔群比较<ul><li>有交换性；</li><li>没有结合性（由于舍入）；</li><li>3.14 + 1e10 - 1e10 &#x3D; <strong>0</strong>；</li><li>3.14 + (1e10 - 1e10) &#x3D; <strong>3.14</strong>；</li></ul></li><li>单调性<ul><li>如果a &gt;&#x3D; b，对于任何a、b以及x的值，除了NaN和无穷大，都有x + a &gt;&#x3D; x + b，而无符号数加法或补码加法不具有这个实数、整数加法的属性。</li></ul></li></ul><h5 id="浮点数乘法"><a href="#浮点数乘法" class="headerlink" title="浮点数乘法"></a>浮点数乘法</h5><p>(-1)^s1 M1 2^E1 * (-1)^s2 M2 2^E2</p><ul><li>精确结果：(-1)^s M 2^E<ul><li>符号位s：s1 ^ s2；</li><li>尾数M：M1 * M2；</li><li>阶码E：E1 + E2；</li></ul></li><li>调整<ul><li>如果M &gt;&#x3D; 2，M右移一位，E &#x3D; E + 1；</li><li>如果E超出表示范围，溢出；</li><li>将M舍入到frac的位数范围。</li></ul></li></ul><h6 id="浮点数乘法的数学特性"><a href="#浮点数乘法的数学特性" class="headerlink" title="浮点数乘法的数学特性"></a>浮点数乘法的数学特性</h6><ul><li>可交换性<ul><li>a * b &#x3D; b * a；</li></ul></li><li>不可结合性<ul><li>a * b * c !&#x3D; a * (b * c)；</li></ul></li><li>不具备分配性<ul><li>a * (b + c) !&#x3D; a * b + a * c；</li></ul></li><li>单调性<ul><li>若a &gt;&#x3D; b且c &gt;&#x3D; 0，则a * c &gt;&#x3D; b * c，（都不等于NaN或无穷大）。</li></ul></li></ul><h4 id="C语言中的浮点数"><a href="#C语言中的浮点数" class="headerlink" title="C语言中的浮点数"></a>C语言中的浮点数</h4><p>float &amp; double</p><ul><li>转换<ul><li>double&#x2F;float -&gt; int<ul><li>值向零舍入，对于无法表示或超出范围的值未定义；</li></ul></li><li>int -&gt; double<ul><li>能有效保留精确值；</li></ul></li><li>int -&gt; float<ul><li>数字不会溢出，可能会被舍入。</li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2020-2021-2-计算机系统&quot;&gt;&lt;a href=&quot;#2020-2021-2-计算机系统&quot; class=&quot;headerlink&quot; title=&quot;2020-2021-2 计算机系统&quot;&gt;&lt;/a&gt;2020-2021-2 计算机系统&lt;/h1&gt;&lt;p&gt;2020-2021学</summary>
      
    
    
    
    <category term="快去学习" scheme="https://afool.top/categories/%E5%BF%AB%E5%8E%BB%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习笔记" scheme="https://afool.top/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>1.汇编初步</title>
    <link href="https://afool.top/learning/assembly/"/>
    <id>https://afool.top/learning/assembly/</id>
    <published>2021-03-10T07:26:00.000Z</published>
    <updated>2022-05-15T15:32:02.550Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2020-2021-2-计算机系统"><a href="#2020-2021-2-计算机系统" class="headerlink" title="2020-2021-2 计算机系统"></a>2020-2021-2 计算机系统</h1><p>2020-2021学年第二学期 计算机系统</p><p>基于32位系统</p><p>随上课进度更新</p><h2 id="汇编初步"><a href="#汇编初步" class="headerlink" title="汇编初步"></a>汇编初步</h2><h3 id="机器指令"><a href="#机器指令" class="headerlink" title="机器指令"></a>机器指令</h3><pre class="language-text" data-language="text"><code class="language-text">00000000 &lt;_start>:   0:   90   1:   ……</code></pre><p>地址：指令数</p><p>一行对应一条指令</p><h3 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h3><table><thead><tr><th align="center">%eax</th><th align="center">%ax</th><th align="center">%ah</th><th align="center">%al</th></tr></thead><tbody><tr><td align="center">31-0</td><td align="center">15-0</td><td align="center">15-8</td><td align="center">7-0</td></tr></tbody></table><p>（命名方式与发展过程相关）</p><h3 id="AT-amp-T汇编代码"><a href="#AT-amp-T汇编代码" class="headerlink" title="AT&amp;T汇编代码"></a>AT&amp;T汇编代码</h3><pre class="language-assembly" data-language="assembly"><code class="language-assembly">格式：指令 源操作数,目的操作数示例：movl $8,%eax0</code></pre><ul><li>操作数<ul><li>立即数</li><li>寄存器</li><li>存储器</li></ul></li></ul><h4 id="汇编示例"><a href="#汇编示例" class="headerlink" title="汇编示例"></a>汇编示例</h4><pre class="language-assembly" data-language="assembly"><code class="language-assembly">.section .text.global _start_start:    nop    mov $0x4, %eax    sarl %eax    movw $1, %bx    movb $0xff65, %dh    movl $13, %edx    movl $1, %eax    movl $0, %ebx    int $0x80</code></pre><h5 id="Tip：gcc编译"><a href="#Tip：gcc编译" class="headerlink" title="Tip：gcc编译"></a>Tip：gcc编译</h5><ul><li><p>预处理</p><p>  <code>gcc -E main.c -o main.i</code></p></li><li><p>编译</p><p>  <code>gcc -S main.i -o main.s</code></p></li><li><p>汇编</p><p>  <code>gcc -c main.s -o main.o</code></p></li><li><p>链接</p><p>  <code>gcc main.o -o main</code></p></li></ul><h5 id="Tip：gdb调试相关"><a href="#Tip：gdb调试相关" class="headerlink" title="Tip：gdb调试相关"></a>Tip：gdb调试相关</h5><p><a href="https://www.jianshu.com/p/589308dd36dc">参考简书Adam_0的文章</a></p><ul><li><p>启动gdb</p><pre class="language-bash" data-language="bash"><code class="language-bash">gdb xxx可以通过--silent、-q和--quiet选项取消输出免责条款</code></pre></li><li><p>常用命令</p><pre class="language-text" data-language="text"><code class="language-text">编译程序时需要加上-g，之后才能用gdb进行调试：gcc -g main.c -o maingdb中命令：回车键：重复上一命令（gdb）help：查看命令帮助，具体命令查询在gdb中输入help + 命令，简写h（gdb）run：重新开始运行文件（run-text：加载文本文件，run-bin：加载二进制文件），简写r（gdb）start：单步执行，运行程序，停在第一执行语句（gdb）list：查看原代码（list-n,从第n行开始查看代码。list+ 函数名：查看具体函数），简写l（gdb）set：设置变量的值（gdb）next：单步调试（逐过程，函数直接执行），简写n（gdb）step：单步调试（逐语句：跳入自定义函数内部执行），简写s（gdb）backtrace：查看函数的调用的栈帧和层级关系，简写bt（gdb）frame：切换函数的栈帧，简写f（gdb）info：查看函数内部局部变量的数值，简写i（gdb）finish：结束当前函数，返回到函数调用点（gdb）continue：继续运行，简写c（gdb）print：打印值及地址，简写p（gdb）quit：退出gdb，简写q（gdb）break+num：在第num行设置断点，简写b（gdb）info breakpoints：查看当前设置的所有断点（gdb）delete breakpoints num：删除第num个断点，简写d（gdb）display：追踪查看具体变量值（gdb）undisplay：取消追踪观察变量（gdb）watch：被设置观察点的变量发生修改时，打印显示（gdb）i watch：显示观察点（gdb）enable breakpoints：启用断点（gdb）disable breakpoints：禁用断点（gdb）x：查看内存x/20xw 显示20个单元，16进制，4字节每单元（gdb）run argv[1] argv[2]：调试时命令行传参（gdb）set follow-fork-mode child#Makefile项目管理：选择跟踪父子进程（fork()）core文件：先用$ ulimit -c 1024 开启core，当程序出错会自动生成core文件。调试时 gdb a.out corectrl+c：退出输入</code></pre></li><li><p>gdb的examine命令：</p><pre class="language-text" data-language="text"><code class="language-text">x/&lt;n/f/u>  &lt;addr>n:是正整数，表示需要显示的内存单元的个数，即从当前地址向后显示n个内存单元的内容，一个内存单元的大小由第三个参数u定义。 f:表示addr指向的内存内容的输出格式，s对应输出字符串，此处需特别注意输出整型数据的格式：  x 按十六进制格式显示变量；  d 按十进制格式显示变量；  u 按十进制格式显示无符号整型；  o 按八进制格式显示变量；  t 按二进制格式显示变量；  a 按十六进制格式显示变量；  c 按字符格式显示变量；  f 按浮点数格式显示变量。u:就是指以多少个字节作为一个内存单元-unit,默认为4。u还可以用被一些字符表示:  如b=1 byte, h=2 bytes,w=4 bytes,g=8 bytes。&lt;addr>:表示内存地址。</code></pre></li></ul><h5 id="Tip：objdump反汇编"><a href="#Tip：objdump反汇编" class="headerlink" title="Tip：objdump反汇编"></a>Tip：objdump反汇编</h5><pre class="language-bash" data-language="bash"><code class="language-bash">objdump -d xxx将代码段反汇编</code></pre><p><a href="https://blog.csdn.net/wwchao2012/article/details/79980514">可参考这篇文章</a></p><h4 id="数据传送"><a href="#数据传送" class="headerlink" title="数据传送"></a>数据传送</h4><ul><li>movl 32位 (4字节)</li><li>movw 16位</li><li>movb 8位</li></ul><h4 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h4><ul><li><p>立即数寻址</p><pre class="language-assambly" data-language="assambly"><code class="language-assambly">movl $1,%eax将1传给%eax</code></pre></li><li><p>寄存器寻址</p><pre class="language-assembly" data-language="assembly"><code class="language-assembly">movl %ebx,%eax将%ebx的内容传给%eax</code></pre></li><li><p>绝对寻址</p><pre class="language-assembly" data-language="assembly"><code class="language-assembly">movl 0x08048054,%eax&#96;以地址0x08048054访问内存，将对应内容传给%eax</code></pre></li><li><p>间接寻址</p><pre class="language-assembly" data-language="assembly"><code class="language-assembly">movl (%ebx),%eax以%ebx的内容作为地址访问内存，将内存对应内容传给%eax</code></pre></li><li><p>基址偏移量寻址</p><pre class="language-assembly" data-language="assembly"><code class="language-assembly">0x8(%ebx),%eax%ebx的内容+8作为地址</code></pre></li><li><p>变址寻址</p><pre class="language-assembly" data-language="assembly"><code class="language-assembly">(%ebx,%edx),%eax%ebx、%edx内容相加作为地址</code></pre></li><li><p>变址基址寻址</p><pre class="language-assembly" data-language="assembly"><code class="language-assembly">movl 0x8(%ebx,%edx),%eax%ebx、%edx内容相加再+8作为地址</code></pre></li><li><p>比例变址寻址</p><pre class="language-assembly" data-language="assembly"><code class="language-assembly">(%ebx,%ecx,0x2),%eax%ecx、0x2相乘再与%ebx相加作为地址</code></pre></li><li><p>比例变址基址寻址</p><pre class="language-assembly" data-language="assembly"><code class="language-assembly">movl 0x8(%ebx,%ecx,0x2),%eax%ecx、0x2相乘再与%ebx相加，再加8作为地址</code></pre></li><li><p>总结</p><pre class="language-assembly" data-language="assembly"><code class="language-assembly">D(rb, ri, S) mem[Reg[rb]+Reg[ri]*S+D]</code></pre></li></ul><h4 id="lea指令"><a href="#lea指令" class="headerlink" title="lea指令"></a>lea指令</h4><p>lea：Load Effective Address</p><p>可以用来将一个内存地址直接赋给目的操作数</p><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><p>先进后出；</p><p>向“下”（低地址方向）增长；</p><p>栈顶指针保存在%esp中 指示最新的数据；</p><p>P115</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2020-2021-2-计算机系统&quot;&gt;&lt;a href=&quot;#2020-2021-2-计算机系统&quot; class=&quot;headerlink&quot; title=&quot;2020-2021-2 计算机系统&quot;&gt;&lt;/a&gt;2020-2021-2 计算机系统&lt;/h1&gt;&lt;p&gt;2020-2021学</summary>
      
    
    
    
    <category term="快去学习" scheme="https://afool.top/categories/%E5%BF%AB%E5%8E%BB%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习笔记" scheme="https://afool.top/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="汇编" scheme="https://afool.top/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>开始读《冰与火之歌》</title>
    <link href="https://afool.top/post/read_a_song_of_ice_and_fire/"/>
    <id>https://afool.top/post/read_a_song_of_ice_and_fire/</id>
    <published>2021-03-08T14:46:04.000Z</published>
    <updated>2022-05-15T15:32:02.558Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>之前从老师那里白嫖到一套英文版的《冰与火之歌》，正巧最近感觉自己阅读量大不如前，也是为了复习英语（大概吧），开始写《冰与火之歌》的读书笔记吧。</p><h2 id="笔记内容"><a href="#笔记内容" class="headerlink" title="笔记内容"></a>笔记内容</h2><p>可能会包括新认识的英语表达（也不一定是新见到的，还有可能是我太久不学忘掉的……）、一部分情节总结和一点粗浅的感想。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;之前从老师那里白嫖到一套英文版的《冰与火之歌》，正巧最近感觉自己阅读量大不如前，也是为了复习英语（大概吧），开始写《冰与火之歌》的读书笔记吧</summary>
      
    
    
    
    <category term="读点什么" scheme="https://afool.top/categories/%E8%AF%BB%E7%82%B9%E4%BB%80%E4%B9%88/"/>
    
    
    <category term="小说" scheme="https://afool.top/tags/%E5%B0%8F%E8%AF%B4/"/>
    
    <category term="读书" scheme="https://afool.top/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>短记：《空之境界》</title>
    <link href="https://afool.top/post/read_kara_no_kyoukai/"/>
    <id>https://afool.top/post/read_kara_no_kyoukai/</id>
    <published>2021-01-18T14:40:43.000Z</published>
    <updated>2022-05-15T15:32:02.558Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近的阅读实在潦草，读完这部小说也有好多天了，许多关于书中内容的地方可能不太准确，之后有机会可能会得出更有价值的感想。</p></blockquote><span id="more"></span><h2 id="冷冽而闪烁着微光"><a href="#冷冽而闪烁着微光" class="headerlink" title="冷冽而闪烁着微光"></a>冷冽而闪烁着微光</h2><p>《空之境界》给人的感觉正如它的名字，它不会像那种现在常见的小说般一上来就仿佛与你关系热络已久、直接把角色的经历如流水账般放给你看，它也并不具备许多引人注目的要素，而是与你保持若即若离的关系（不过，我会有这种感觉可能是因为我是在搞期末复习的时候读完的，心思多少会有些飘忽不定，：D），时刻透露出一种疏离感。</p><p>由于最近的阅读量实在太少，我也只能硬着头皮来随便记下我的一些感受。《空之境界》究竟达到了哪种境界？这一点恐怕没有定论，在不同的人群口中肯定会有不同的答案。就我个人看来，它的层次正好是那种“这是一个好故事”的级别。</p><p>据说奈须蘑菇本人曾说过，《空之境界》不过是一个boy meets girl的故事。这句话实在恰当。从比较简单的角度理解，《空之境界》就是两仪式与黑桐干也的爱情故事。不难看出，两仪式身上最为关键的转变正是由于黑桐干也，重生也好救赎也罢，都离不开这一层关系。相比之下，对“空”的阐述以及魔术师为了追求根源而展开的争斗反倒不那么重要了。</p><p>尽管如此，小说的许多地方仍然显得“帅气”（这个形容来自绫辻行人在《空之境界》上卷末尾的解说），透露出一种特立独行的姿态。这种姿态配合较为利落的描写方法，让我在阅读的时候感觉自己时刻处在清凉的雨中。</p><h2 id="两仪式：因为名叫“爱”的感情重生为人"><a href="#两仪式：因为名叫“爱”的感情重生为人" class="headerlink" title="两仪式：因为名叫“爱”的感情重生为人"></a>两仪式：因为名叫“爱”的感情重生为人</h2><p>作为两仪家世世代代追求的目标、连接根源的存在，两仪式是极致的“空”，虚无应该是她的存在方式，但是黑桐干也的出现改变了她。</p><p>原本的两仪式性格冷酷，她知道自己的异常，但仍然抱着“既然决定要给我，我就会收下”的想法，认为自己会一直过着扭曲而又安稳的生活。而黑桐干也就是那个打破了这个幻想的人，他使两仪式有了对寻常生活（爱）的渴望。对于那个异常的两仪式而言，黑桐干也是让她失控的存在，要解决这个问题，最直接的方法就是解决带来问题的人，也就是说杀死黑桐干也。</p><p>出乎我意料的是，阻止式杀死黑桐的是织，两仪式的第二人格，那个负责“否定”、只会“杀”的人格。为了那个寄托在黑桐身上的梦想，为了式的未来，织选择了自我了断。</p><p>从那场车祸存活下来的两仪式在两年之后醒来。醒来的她活得没有实感，只有“死”能让她获得存在的感觉。在这种情况下，也是黑桐干也填补了两仪式的心这座伽蓝之洞。</p><p>“人一生只能杀一个人”，为了黑桐干也，两仪式杀死了白纯里绪，背负了本来不该背负的罪孽。然而也是因为黑桐干也，两仪式慢慢融入了琐碎的日常，获得了作为一个人的生活方式。这该说是爱的救赎吗？</p><h2 id="黑桐干也：能够填补“空”的爱与善良，最为特别的平凡"><a href="#黑桐干也：能够填补“空”的爱与善良，最为特别的平凡" class="headerlink" title="黑桐干也：能够填补“空”的爱与善良，最为特别的平凡"></a>黑桐干也：能够填补“空”的爱与善良，最为特别的平凡</h2><p>黑桐干也这个人怎么说呢？真是“亚撒西”到了极点。几乎对所有人都抱有善意，看见可怜的人就会觉得“不能这样不管”，确实有点像是个滥好人。与此同时，他没有什么特别的期待，总是觉得“像现在这样就好”，像这样的人往往会被称之为“普通人”。但是就算是普通人也会有自己的欲望，黑桐干也显然又不是这样。从一开始就打算平凡的活下去，这才是黑桐干也，这样的他本身反而是极为特别的存在了。“理所当然地活着，理所当然地死去”，这种普通而又特别的孤独的生活方式，就是黑桐干也。他是某种幸福的化身，是普通人无法企及却又触手可及的平凡。</p><p>话说回来，这家伙的人缘（尤其是对异性）确实好得过分，搜集情报的能力也让人不得不佩服。</p><h2 id="根源"><a href="#根源" class="headerlink" title="根源"></a>根源</h2><p>关于“根源”这一概念，我没有什么可说的。人总会追求些什么，不管根源、真实这类东西是否存在，我们都无法停下追寻的脚步，也许只有在这宿命之中发生的事情才能反映出我们的本质。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;最近的阅读实在潦草，读完这部小说也有好多天了，许多关于书中内容的地方可能不太准确，之后有机会可能会得出更有价值的感想。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="读点什么" scheme="https://afool.top/categories/%E8%AF%BB%E7%82%B9%E4%BB%80%E4%B9%88/"/>
    
    
    <category term="杂记" scheme="https://afool.top/tags/%E6%9D%82%E8%AE%B0/"/>
    
    <category term="小说" scheme="https://afool.top/tags/%E5%B0%8F%E8%AF%B4/"/>
    
    <category term="空之境界" scheme="https://afool.top/tags/%E7%A9%BA%E4%B9%8B%E5%A2%83%E7%95%8C/"/>
    
  </entry>
  
</feed>
